Help on class Button in module tkinter.ttk:

class Button(Widget)
 |  Button(master=None, **kw)
 |
 |  Ttk Button widget, displays a textual label and/or image, and
 |  evaluates a command when pressed.
 |
 |  Method resolution order:
 |      Button
 |      Widget
 |      tkinter.Widget
 |      tkinter.BaseWidget
 |      tkinter.Misc
 |      tkinter.Pack
 |      tkinter.Place
 |      tkinter.Grid
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  __init__(self, master=None, **kw)
 |      Construct a Ttk Button widget with the parent master.
 |
 |      STANDARD OPTIONS
 |
 |          class, compound, cursor, image, state, style, takefocus,
 |          text, textvariable, underline, width
 |
 |      WIDGET-SPECIFIC OPTIONS
 |
 |          command, default, width
 |
 |  invoke(self)
 |      Invokes the command associated with the button.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from Widget:
 |
 |  identify(self, x, y)
 |      Returns the name of the element at position x, y, or the empty
 |      string if the point does not lie within any element.
 |
 |      x and y are pixel coordinates relative to the widget.
 |
 |  instate(self, statespec, callback=None, *args, **kw)
 |      Test the widget's state.
 |
 |      If callback is not specified, returns True if the widget state
 |      matches statespec and False otherwise. If callback is specified,
 |      then it will be invoked with *args, **kw if the widget state
 |      matches statespec. statespec is expected to be a sequence.
 |
 |  state(self, statespec=None)
 |      Modify or inquire widget state.
 |
 |      Widget state is returned if statespec is None, otherwise it is
 |      set according to the statespec flags and then a new state spec
 |      is returned indicating which flags were changed. statespec is
 |      expected to be a sequence.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.BaseWidget:
 |
 |  destroy(self)
 |      Destroy this and all descendants widgets.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Misc:
 |
 |  __getitem__ = cget(self, key)
 |
 |  __repr__(self)
 |      Return repr(self).
 |
 |  __setitem__(self, key, value)
 |
 |  __str__(self)
 |      Return the window path name of this widget.
 |
 |  after(self, ms, func=None, *args)
 |      Call function once after given time.
 |
 |      MS specifies the time in milliseconds. FUNC gives the
 |      function which shall be called. Additional parameters
 |      are given as parameters to the function call.  Return
 |      identifier to cancel scheduling with after_cancel.
 |
 |  after_cancel(self, id)
 |      Cancel scheduling of function identified with ID.
 |
 |      Identifier returned by after or after_idle must be
 |      given as first parameter.
 |
 |  after_idle(self, func, *args)
 |      Call FUNC once if the Tcl main loop has no event to
 |      process.
 |
 |      Return an identifier to cancel the scheduling with
 |      after_cancel.
 |
 |  anchor = grid_anchor(self, anchor=None)
 |
 |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |
 |  bell(self, displayof=0)
 |      Ring a display's bell.
 |
 |  bind(self, sequence=None, func=None, add=None)
 |      Bind to this widget at event SEQUENCE a call to function FUNC.
 |
 |      SEQUENCE is a string of concatenated event
 |      patterns. An event pattern is of the form
 |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
 |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
 |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
 |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
 |      Mod1, M1. TYPE is one of Activate, Enter, Map,
 |      ButtonPress, Button, Expose, Motion, ButtonRelease
 |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
 |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
 |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
 |      Leave and DETAIL is the button number for ButtonPress,
 |      ButtonRelease and DETAIL is the Keysym for KeyPress and
 |      KeyRelease. Examples are
 |      <Control-Button-1> for pressing Control and mouse button 1 or
 |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
 |      An event pattern can also be a virtual event of the form
 |      <<AString>> where AString can be arbitrary. This
 |      event can be generated by event_generate.
 |      If events are concatenated they must appear shortly
 |      after each other.
 |
 |      FUNC will be called if the event sequence occurs with an
 |      instance of Event as argument. If the return value of FUNC is
 |      "break" no further bound function is invoked.
 |
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function.
 |
 |      Bind will return an identifier to allow deletion of the bound function with
 |      unbind without memory leak.
 |
 |      If FUNC or SEQUENCE is omitted the bound function or list
 |      of bound events are returned.
 |
 |  bind_all(self, sequence=None, func=None, add=None)
 |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function. See bind for the return value.
 |
 |  bind_class(self, className, sequence=None, func=None, add=None)
 |      Bind to widgets with bindtag CLASSNAME at event
 |      SEQUENCE a call of function FUNC. An additional
 |      boolean parameter ADD specifies whether FUNC will be
 |      called additionally to the other bound function or
 |      whether it will replace the previous function. See bind for
 |      the return value.
 |
 |  bindtags(self, tagList=None)
 |      Set or get the list of bindtags for this widget.
 |
 |      With no argument return the list of all bindtags associated with
 |      this widget. With a list of strings as argument the bindtags are
 |      set to this list. The bindtags determine in which order events are
 |      processed (see bind).
 |
 |  cget(self, key)
 |      Return the resource value for a KEY given as string.
 |
 |  clipboard_append(self, string, **kw)
 |      Append STRING to the Tk clipboard.
 |
 |      A widget specified at the optional displayof keyword
 |      argument specifies the target display. The clipboard
 |      can be retrieved with selection_get.
 |
 |  clipboard_clear(self, **kw)
 |      Clear the data in the Tk clipboard.
 |
 |      A widget specified for the optional displayof keyword
 |      argument specifies the target display.
 |
 |  clipboard_get(self, **kw)
 |      Retrieve data from the clipboard on window's display.
 |
 |      The window keyword defaults to the root window of the Tkinter
 |      application.
 |
 |      The type keyword specifies the form in which the data is
 |      to be returned and should be an atom name such as STRING
 |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
 |      is to try UTF8_STRING and fall back to STRING.
 |
 |      This command is equivalent to:
 |
 |      selection_get(CLIPBOARD)
 |
 |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
 |
 |  config = configure(self, cnf=None, **kw)
 |
 |  configure(self, cnf=None, **kw)
 |      Configure resources of a widget.
 |
 |      The values for resources are specified as keyword
 |      arguments. To get an overview about
 |      the allowed keyword arguments call the method keys.
 |
 |  deletecommand(self, name)
 |      Internal function.
 |
 |      Delete the Tcl command provided in NAME.
 |
 |  event_add(self, virtual, *sequences)
 |      Bind a virtual event VIRTUAL (of the form <<Name>>)
 |      to an event SEQUENCE such that the virtual event is triggered
 |      whenever SEQUENCE occurs.
 |
 |  event_delete(self, virtual, *sequences)
 |      Unbind a virtual event VIRTUAL from SEQUENCE.
 |
 |  event_generate(self, sequence, **kw)
 |      Generate an event SEQUENCE. Additional
 |      keyword arguments specify parameter of the event
 |      (e.g. x, y, rootx, rooty).
 |
 |  event_info(self, virtual=None)
 |      Return a list of all virtual events or the information
 |      about the SEQUENCE bound to the virtual event VIRTUAL.
 |
 |  focus = focus_set(self)
 |
 |  focus_displayof(self)
 |      Return the widget which has currently the focus on the
 |      display where this widget is located.
 |
 |      Return None if the application does not have the focus.
 |
 |  focus_force(self)
 |      Direct input focus to this widget even if the
 |      application does not have the focus. Use with
 |      caution!
 |
 |  focus_get(self)
 |      Return the widget which has currently the focus in the
 |      application.
 |
 |      Use focus_displayof to allow working with several
 |      displays. Return None if application does not have
 |      the focus.
 |
 |  focus_lastfor(self)
 |      Return the widget which would have the focus if top level
 |      for this widget gets the focus from the window manager.
 |
 |  focus_set(self)
 |      Direct input focus to this widget.
 |
 |      If the application currently does not have the focus
 |      this widget will get the focus if the application gets
 |      the focus through the window manager.
 |
 |  getboolean(self, s)
 |      Return a boolean value for Tcl boolean values true and false given as parameter.
 |
 |  getdouble(self, s)
 |
 |  getint(self, s)
 |
 |  getvar(self, name='PY_VAR')
 |      Return value of Tcl variable NAME.
 |
 |  grab_current(self)
 |      Return widget which has currently the grab in this application
 |      or None.
 |
 |  grab_release(self)
 |      Release grab for this widget if currently set.
 |
 |  grab_set(self)
 |      Set grab for this widget.
 |
 |      A grab directs all events to this and descendant
 |      widgets in the application.
 |
 |  grab_set_global(self)
 |      Set global grab for this widget.
 |
 |      A global grab directs all events to this and
 |      descendant widgets on the display. Use with caution -
 |      other applications do not get events anymore.
 |
 |  grab_status(self)
 |      Return None, "local" or "global" if this widget has
 |      no, a local or a global grab.
 |
 |  grid_anchor(self, anchor=None)
 |      The anchor value controls how to place the grid within the
 |      master when no row/column has any weight.
 |
 |      The default anchor is nw.
 |
 |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |      Return a tuple of integer coordinates for the bounding
 |      box of this widget controlled by the geometry manager grid.
 |
 |      If COLUMN, ROW is given the bounding box applies from
 |      the cell with row and column 0 to the specified
 |      cell. If COL2 and ROW2 are given the bounding box
 |      starts at that cell.
 |
 |      The returned integers specify the offset of the upper left
 |      corner in the master widget and the width and height.
 |
 |  grid_columnconfigure(self, index, cnf={}, **kw)
 |      Configure column INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the column),
 |      weight (how much does additional space propagate to this column)
 |      and pad (how much space to let additionally).
 |
 |  grid_location(self, x, y)
 |      Return a tuple of column and row which identify the cell
 |      at which the pixel at position X and Y inside the master
 |      widget is located.
 |
 |  grid_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given, the current setting will be returned.
 |
 |  grid_rowconfigure(self, index, cnf={}, **kw)
 |      Configure row INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the row),
 |      weight (how much does additional space propagate to this row)
 |      and pad (how much space to let additionally).
 |
 |  grid_size(self)
 |      Return a tuple of the number of column and rows in the grid.
 |
 |  grid_slaves(self, row=None, column=None)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  image_names(self)
 |      Return a list of all existing image names.
 |
 |  image_types(self)
 |      Return a list of all available image types (e.g. photo bitmap).
 |
 |  info_patchlevel(self)
 |      Returns the exact version of the Tcl library.
 |
 |  keys(self)
 |      Return a list of all resource names of this widget.
 |
 |  lift = tkraise(self, aboveThis=None)
 |
 |  lower(self, belowThis=None)
 |      Lower this widget in the stacking order.
 |
 |  mainloop(self, n=0)
 |      Call the mainloop of Tk.
 |
 |  nametowidget(self, name)
 |      Return the Tkinter instance of a widget identified by
 |      its Tcl name NAME.
 |
 |  option_add(self, pattern, value, priority=None)
 |      Set a VALUE (second parameter) for an option
 |      PATTERN (first parameter).
 |
 |      An optional third parameter gives the numeric priority
 |      (defaults to 80).
 |
 |  option_clear(self)
 |      Clear the option database.
 |
 |      It will be reloaded if option_add is called.
 |
 |  option_get(self, name, className)
 |      Return the value for an option NAME for this widget
 |      with CLASSNAME.
 |
 |      Values with higher priority override lower values.
 |
 |  option_readfile(self, fileName, priority=None)
 |      Read file FILENAME into the option database.
 |
 |      An optional second parameter gives the numeric
 |      priority.
 |
 |  pack_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given the current setting will be returned.
 |
 |  pack_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  place_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  propagate = pack_propagate(self, flag=['_noarg_'])
 |
 |  quit(self)
 |      Quit the Tcl interpreter. All widgets will be destroyed.
 |
 |  register = _register(self, func, subst=None, needcleanup=1)
 |
 |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
 |
 |  selection_clear(self, **kw)
 |      Clear the current X selection.
 |
 |  selection_get(self, **kw)
 |      Return the contents of the current X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection and defaults to PRIMARY.  A keyword
 |      parameter displayof specifies a widget on the display
 |      to use. A keyword parameter type specifies the form of data to be
 |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
 |      before STRING.
 |
 |  selection_handle(self, command, **kw)
 |      Specify a function COMMAND to call if the X
 |      selection owned by this widget is queried by another
 |      application.
 |
 |      This function must return the contents of the
 |      selection. The function will be called with the
 |      arguments OFFSET and LENGTH which allows the chunking
 |      of very long selections. The following keyword
 |      parameters can be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  selection_own(self, **kw)
 |      Become owner of X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection (default PRIMARY).
 |
 |  selection_own_get(self, **kw)
 |      Return owner of X selection.
 |
 |      The following keyword parameter can
 |      be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  send(self, interp, cmd, *args)
 |      Send Tcl command CMD to different interpreter INTERP to be executed.
 |
 |  setvar(self, name='PY_VAR', value='1')
 |      Set Tcl variable NAME to VALUE.
 |
 |  size = grid_size(self)
 |
 |  slaves = pack_slaves(self)
 |
 |  tk_bisque(self)
 |      Change the color scheme to light brown as used in Tk 3.6 and before.
 |
 |  tk_focusFollowsMouse(self)
 |      The widget under mouse will get automatically focus. Can not
 |      be disabled easily.
 |
 |  tk_focusNext(self)
 |      Return the next widget in the focus order which follows
 |      widget which has currently the focus.
 |
 |      The focus order first goes to the next child, then to
 |      the children of the child recursively and then to the
 |      next sibling which is higher in the stacking order.  A
 |      widget is omitted if it has the takefocus resource set
 |      to 0.
 |
 |  tk_focusPrev(self)
 |      Return previous widget in the focus order. See tk_focusNext for details.
 |
 |  tk_setPalette(self, *args, **kw)
 |      Set a new color scheme for all widget elements.
 |
 |      A single color as argument will cause that all colors of Tk
 |      widget elements are derived from this.
 |      Alternatively several keyword parameters and its associated
 |      colors can be given. The following keywords are valid:
 |      activeBackground, foreground, selectColor,
 |      activeForeground, highlightBackground, selectBackground,
 |      background, highlightColor, selectForeground,
 |      disabledForeground, insertBackground, troughColor.
 |
 |  tk_strictMotif(self, boolean=None)
 |      Set Tcl internal variable, whether the look and feel
 |      should adhere to Motif.
 |
 |      A parameter of 1 means adhere to Motif (e.g. no color
 |      change if mouse passes over slider).
 |      Returns the set value.
 |
 |  tkraise(self, aboveThis=None)
 |      Raise this widget in the stacking order.
 |
 |  unbind(self, sequence, funcid=None)
 |      Unbind for this widget the event SEQUENCE.
 |
 |      If FUNCID is given, only unbind the function identified with FUNCID
 |      and also delete the corresponding Tcl command.
 |
 |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
 |      unbound.
 |
 |  unbind_all(self, sequence)
 |      Unbind for all widgets for event SEQUENCE all functions.
 |
 |  unbind_class(self, className, sequence)
 |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
 |      all functions.
 |
 |  update(self)
 |      Enter event loop until all pending events have been processed by Tcl.
 |
 |  update_idletasks(self)
 |      Enter event loop until all idle callbacks have been called. This
 |      will update the display of windows but not process events caused by
 |      the user.
 |
 |  wait_variable(self, name='PY_VAR')
 |      Wait until the variable is modified.
 |
 |      A parameter of type IntVar, StringVar, DoubleVar or
 |      BooleanVar must be given.
 |
 |  wait_visibility(self, window=None)
 |      Wait until the visibility of a WIDGET changes
 |      (e.g. it appears).
 |
 |      If no parameter is given self is used.
 |
 |  wait_window(self, window=None)
 |      Wait until a WIDGET is destroyed.
 |
 |      If no parameter is given self is used.
 |
 |  waitvar = wait_variable(self, name='PY_VAR')
 |
 |  winfo_atom(self, name, displayof=0)
 |      Return integer which represents atom NAME.
 |
 |  winfo_atomname(self, id, displayof=0)
 |      Return name of atom with identifier ID.
 |
 |  winfo_cells(self)
 |      Return number of cells in the colormap for this widget.
 |
 |  winfo_children(self)
 |      Return a list of all widgets which are children of this widget.
 |
 |  winfo_class(self)
 |      Return window class name of this widget.
 |
 |  winfo_colormapfull(self)
 |      Return True if at the last color request the colormap was full.
 |
 |  winfo_containing(self, rootX, rootY, displayof=0)
 |      Return the widget which is at the root coordinates ROOTX, ROOTY.
 |
 |  winfo_depth(self)
 |      Return the number of bits per pixel.
 |
 |  winfo_exists(self)
 |      Return true if this widget exists.
 |
 |  winfo_fpixels(self, number)
 |      Return the number of pixels for the given distance NUMBER
 |      (e.g. "3c") as float.
 |
 |  winfo_geometry(self)
 |      Return geometry string for this widget in the form "widthxheight+X+Y".
 |
 |  winfo_height(self)
 |      Return height of this widget.
 |
 |  winfo_id(self)
 |      Return identifier ID for this widget.
 |
 |  winfo_interps(self, displayof=0)
 |      Return the name of all Tcl interpreters for this display.
 |
 |  winfo_ismapped(self)
 |      Return true if this widget is mapped.
 |
 |  winfo_manager(self)
 |      Return the window manager name for this widget.
 |
 |  winfo_name(self)
 |      Return the name of this widget.
 |
 |  winfo_parent(self)
 |      Return the name of the parent of this widget.
 |
 |  winfo_pathname(self, id, displayof=0)
 |      Return the pathname of the widget given by ID.
 |
 |  winfo_pixels(self, number)
 |      Rounded integer value of winfo_fpixels.
 |
 |  winfo_pointerx(self)
 |      Return the x coordinate of the pointer on the root window.
 |
 |  winfo_pointerxy(self)
 |      Return a tuple of x and y coordinates of the pointer on the root window.
 |
 |  winfo_pointery(self)
 |      Return the y coordinate of the pointer on the root window.
 |
 |  winfo_reqheight(self)
 |      Return requested height of this widget.
 |
 |  winfo_reqwidth(self)
 |      Return requested width of this widget.
 |
 |  winfo_rgb(self, color)
 |      Return a tuple of integer RGB values in range(65536) for color in this widget.
 |
 |  winfo_rootx(self)
 |      Return x coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_rooty(self)
 |      Return y coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_screen(self)
 |      Return the screen name of this widget.
 |
 |  winfo_screencells(self)
 |      Return the number of the cells in the colormap of the screen
 |      of this widget.
 |
 |  winfo_screendepth(self)
 |      Return the number of bits per pixel of the root window of the
 |      screen of this widget.
 |
 |  winfo_screenheight(self)
 |      Return the number of pixels of the height of the screen of this widget
 |      in pixel.
 |
 |  winfo_screenmmheight(self)
 |      Return the number of pixels of the height of the screen of
 |      this widget in mm.
 |
 |  winfo_screenmmwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in mm.
 |
 |  winfo_screenvisual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the default
 |      colormodel of this screen.
 |
 |  winfo_screenwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in pixel.
 |
 |  winfo_server(self)
 |      Return information of the X-Server of the screen of this widget in
 |      the form "XmajorRminor vendor vendorVersion".
 |
 |  winfo_toplevel(self)
 |      Return the toplevel widget of this widget.
 |
 |  winfo_viewable(self)
 |      Return true if the widget and all its higher ancestors are mapped.
 |
 |  winfo_visual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the
 |      colormodel of this widget.
 |
 |  winfo_visualid(self)
 |      Return the X identifier for the visual for this widget.
 |
 |  winfo_visualsavailable(self, includeids=False)
 |      Return a list of all visuals available for the screen
 |      of this widget.
 |
 |      Each item in the list consists of a visual name (see winfo_visual), a
 |      depth and if includeids is true is given also the X identifier.
 |
 |  winfo_vrootheight(self)
 |      Return the height of the virtual root window associated with this
 |      widget in pixels. If there is no virtual root window return the
 |      height of the screen.
 |
 |  winfo_vrootwidth(self)
 |      Return the width of the virtual root window associated with this
 |      widget in pixel. If there is no virtual root window return the
 |      width of the screen.
 |
 |  winfo_vrootx(self)
 |      Return the x offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_vrooty(self)
 |      Return the y offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_width(self)
 |      Return the width of this widget.
 |
 |  winfo_x(self)
 |      Return the x coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  winfo_y(self)
 |      Return the y coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from tkinter.Misc:
 |
 |  __dict__
 |      dictionary for instance variables
 |
 |  __weakref__
 |      list of weak references to the object
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Pack:
 |
 |  forget = pack_forget(self)
 |
 |  info = pack_info(self)
 |
 |  pack = pack_configure(self, cnf={}, **kw)
 |
 |  pack_configure(self, cnf={}, **kw)
 |      Pack a widget in the parent widget. Use as options:
 |      after=widget - pack it after you have packed widget
 |      anchor=NSEW (or subset) - position widget according to
 |                                given direction
 |      before=widget - pack it before you will pack widget
 |      expand=bool - expand widget if parent size grows
 |      fill=NONE or X or Y or BOTH - fill widget if widget grows
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
 |
 |  pack_forget(self)
 |      Unmap this widget and do not use it for the packing order.
 |
 |  pack_info(self)
 |      Return information about the packing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Place:
 |
 |  place = place_configure(self, cnf={}, **kw)
 |
 |  place_configure(self, cnf={}, **kw)
 |      Place a widget in the parent widget. Use as options:
 |      in=master - master relative to which the widget is placed
 |      in_=master - see 'in' option description
 |      x=amount - locate anchor of this widget at position x of master
 |      y=amount - locate anchor of this widget at position y of master
 |      relx=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to width of master (1.0 is right edge)
 |      rely=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to height of master (1.0 is bottom edge)
 |      anchor=NSEW (or subset) - position anchor according to given direction
 |      width=amount - width of this widget in pixel
 |      height=amount - height of this widget in pixel
 |      relwidth=amount - width of this widget between 0.0 and 1.0
 |                        relative to width of master (1.0 is the same width
 |                        as the master)
 |      relheight=amount - height of this widget between 0.0 and 1.0
 |                         relative to height of master (1.0 is the same
 |                         height as the master)
 |      bordermode="inside" or "outside" - whether to take border width of
 |                                         master widget into account
 |
 |  place_forget(self)
 |      Unmap this widget.
 |
 |  place_info(self)
 |      Return information about the placing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Grid:
 |
 |  grid = grid_configure(self, cnf={}, **kw)
 |
 |  grid_configure(self, cnf={}, **kw)
 |      Position a widget in the parent widget in a grid. Use as options:
 |      column=number - use cell identified with given column (starting with 0)
 |      columnspan=number - this widget will span several columns
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      row=number - use cell identified with given row (starting with 0)
 |      rowspan=number - this widget will span several rows
 |      sticky=NSEW - if cell is larger on which sides will this
 |                    widget stick to the cell boundary
 |
 |  grid_forget(self)
 |      Unmap this widget.
 |
 |  grid_info(self)
 |      Return information about the options
 |      for positioning this widget in a grid.
 |
 |  grid_remove(self)
 |      Unmap this widget but remember the grid options.
 |
 |  location = grid_location(self, x, y)

None
Help on class Checkbutton in module tkinter.ttk:

class Checkbutton(Widget)
 |  Checkbutton(master=None, **kw)
 |
 |  Ttk Checkbutton widget which is either in on- or off-state.
 |
 |  Method resolution order:
 |      Checkbutton
 |      Widget
 |      tkinter.Widget
 |      tkinter.BaseWidget
 |      tkinter.Misc
 |      tkinter.Pack
 |      tkinter.Place
 |      tkinter.Grid
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  __init__(self, master=None, **kw)
 |      Construct a Ttk Checkbutton widget with the parent master.
 |
 |      STANDARD OPTIONS
 |
 |          class, compound, cursor, image, state, style, takefocus,
 |          text, textvariable, underline, width
 |
 |      WIDGET-SPECIFIC OPTIONS
 |
 |          command, offvalue, onvalue, variable
 |
 |  invoke(self)
 |      Toggles between the selected and deselected states and
 |      invokes the associated command. If the widget is currently
 |      selected, sets the option variable to the offvalue option
 |      and deselects the widget; otherwise, sets the option variable
 |      to the option onvalue.
 |
 |      Returns the result of the associated command.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from Widget:
 |
 |  identify(self, x, y)
 |      Returns the name of the element at position x, y, or the empty
 |      string if the point does not lie within any element.
 |
 |      x and y are pixel coordinates relative to the widget.
 |
 |  instate(self, statespec, callback=None, *args, **kw)
 |      Test the widget's state.
 |
 |      If callback is not specified, returns True if the widget state
 |      matches statespec and False otherwise. If callback is specified,
 |      then it will be invoked with *args, **kw if the widget state
 |      matches statespec. statespec is expected to be a sequence.
 |
 |  state(self, statespec=None)
 |      Modify or inquire widget state.
 |
 |      Widget state is returned if statespec is None, otherwise it is
 |      set according to the statespec flags and then a new state spec
 |      is returned indicating which flags were changed. statespec is
 |      expected to be a sequence.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.BaseWidget:
 |
 |  destroy(self)
 |      Destroy this and all descendants widgets.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Misc:
 |
 |  __getitem__ = cget(self, key)
 |
 |  __repr__(self)
 |      Return repr(self).
 |
 |  __setitem__(self, key, value)
 |
 |  __str__(self)
 |      Return the window path name of this widget.
 |
 |  after(self, ms, func=None, *args)
 |      Call function once after given time.
 |
 |      MS specifies the time in milliseconds. FUNC gives the
 |      function which shall be called. Additional parameters
 |      are given as parameters to the function call.  Return
 |      identifier to cancel scheduling with after_cancel.
 |
 |  after_cancel(self, id)
 |      Cancel scheduling of function identified with ID.
 |
 |      Identifier returned by after or after_idle must be
 |      given as first parameter.
 |
 |  after_idle(self, func, *args)
 |      Call FUNC once if the Tcl main loop has no event to
 |      process.
 |
 |      Return an identifier to cancel the scheduling with
 |      after_cancel.
 |
 |  anchor = grid_anchor(self, anchor=None)
 |
 |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |
 |  bell(self, displayof=0)
 |      Ring a display's bell.
 |
 |  bind(self, sequence=None, func=None, add=None)
 |      Bind to this widget at event SEQUENCE a call to function FUNC.
 |
 |      SEQUENCE is a string of concatenated event
 |      patterns. An event pattern is of the form
 |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
 |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
 |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
 |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
 |      Mod1, M1. TYPE is one of Activate, Enter, Map,
 |      ButtonPress, Button, Expose, Motion, ButtonRelease
 |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
 |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
 |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
 |      Leave and DETAIL is the button number for ButtonPress,
 |      ButtonRelease and DETAIL is the Keysym for KeyPress and
 |      KeyRelease. Examples are
 |      <Control-Button-1> for pressing Control and mouse button 1 or
 |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
 |      An event pattern can also be a virtual event of the form
 |      <<AString>> where AString can be arbitrary. This
 |      event can be generated by event_generate.
 |      If events are concatenated they must appear shortly
 |      after each other.
 |
 |      FUNC will be called if the event sequence occurs with an
 |      instance of Event as argument. If the return value of FUNC is
 |      "break" no further bound function is invoked.
 |
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function.
 |
 |      Bind will return an identifier to allow deletion of the bound function with
 |      unbind without memory leak.
 |
 |      If FUNC or SEQUENCE is omitted the bound function or list
 |      of bound events are returned.
 |
 |  bind_all(self, sequence=None, func=None, add=None)
 |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function. See bind for the return value.
 |
 |  bind_class(self, className, sequence=None, func=None, add=None)
 |      Bind to widgets with bindtag CLASSNAME at event
 |      SEQUENCE a call of function FUNC. An additional
 |      boolean parameter ADD specifies whether FUNC will be
 |      called additionally to the other bound function or
 |      whether it will replace the previous function. See bind for
 |      the return value.
 |
 |  bindtags(self, tagList=None)
 |      Set or get the list of bindtags for this widget.
 |
 |      With no argument return the list of all bindtags associated with
 |      this widget. With a list of strings as argument the bindtags are
 |      set to this list. The bindtags determine in which order events are
 |      processed (see bind).
 |
 |  cget(self, key)
 |      Return the resource value for a KEY given as string.
 |
 |  clipboard_append(self, string, **kw)
 |      Append STRING to the Tk clipboard.
 |
 |      A widget specified at the optional displayof keyword
 |      argument specifies the target display. The clipboard
 |      can be retrieved with selection_get.
 |
 |  clipboard_clear(self, **kw)
 |      Clear the data in the Tk clipboard.
 |
 |      A widget specified for the optional displayof keyword
 |      argument specifies the target display.
 |
 |  clipboard_get(self, **kw)
 |      Retrieve data from the clipboard on window's display.
 |
 |      The window keyword defaults to the root window of the Tkinter
 |      application.
 |
 |      The type keyword specifies the form in which the data is
 |      to be returned and should be an atom name such as STRING
 |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
 |      is to try UTF8_STRING and fall back to STRING.
 |
 |      This command is equivalent to:
 |
 |      selection_get(CLIPBOARD)
 |
 |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
 |
 |  config = configure(self, cnf=None, **kw)
 |
 |  configure(self, cnf=None, **kw)
 |      Configure resources of a widget.
 |
 |      The values for resources are specified as keyword
 |      arguments. To get an overview about
 |      the allowed keyword arguments call the method keys.
 |
 |  deletecommand(self, name)
 |      Internal function.
 |
 |      Delete the Tcl command provided in NAME.
 |
 |  event_add(self, virtual, *sequences)
 |      Bind a virtual event VIRTUAL (of the form <<Name>>)
 |      to an event SEQUENCE such that the virtual event is triggered
 |      whenever SEQUENCE occurs.
 |
 |  event_delete(self, virtual, *sequences)
 |      Unbind a virtual event VIRTUAL from SEQUENCE.
 |
 |  event_generate(self, sequence, **kw)
 |      Generate an event SEQUENCE. Additional
 |      keyword arguments specify parameter of the event
 |      (e.g. x, y, rootx, rooty).
 |
 |  event_info(self, virtual=None)
 |      Return a list of all virtual events or the information
 |      about the SEQUENCE bound to the virtual event VIRTUAL.
 |
 |  focus = focus_set(self)
 |
 |  focus_displayof(self)
 |      Return the widget which has currently the focus on the
 |      display where this widget is located.
 |
 |      Return None if the application does not have the focus.
 |
 |  focus_force(self)
 |      Direct input focus to this widget even if the
 |      application does not have the focus. Use with
 |      caution!
 |
 |  focus_get(self)
 |      Return the widget which has currently the focus in the
 |      application.
 |
 |      Use focus_displayof to allow working with several
 |      displays. Return None if application does not have
 |      the focus.
 |
 |  focus_lastfor(self)
 |      Return the widget which would have the focus if top level
 |      for this widget gets the focus from the window manager.
 |
 |  focus_set(self)
 |      Direct input focus to this widget.
 |
 |      If the application currently does not have the focus
 |      this widget will get the focus if the application gets
 |      the focus through the window manager.
 |
 |  getboolean(self, s)
 |      Return a boolean value for Tcl boolean values true and false given as parameter.
 |
 |  getdouble(self, s)
 |
 |  getint(self, s)
 |
 |  getvar(self, name='PY_VAR')
 |      Return value of Tcl variable NAME.
 |
 |  grab_current(self)
 |      Return widget which has currently the grab in this application
 |      or None.
 |
 |  grab_release(self)
 |      Release grab for this widget if currently set.
 |
 |  grab_set(self)
 |      Set grab for this widget.
 |
 |      A grab directs all events to this and descendant
 |      widgets in the application.
 |
 |  grab_set_global(self)
 |      Set global grab for this widget.
 |
 |      A global grab directs all events to this and
 |      descendant widgets on the display. Use with caution -
 |      other applications do not get events anymore.
 |
 |  grab_status(self)
 |      Return None, "local" or "global" if this widget has
 |      no, a local or a global grab.
 |
 |  grid_anchor(self, anchor=None)
 |      The anchor value controls how to place the grid within the
 |      master when no row/column has any weight.
 |
 |      The default anchor is nw.
 |
 |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |      Return a tuple of integer coordinates for the bounding
 |      box of this widget controlled by the geometry manager grid.
 |
 |      If COLUMN, ROW is given the bounding box applies from
 |      the cell with row and column 0 to the specified
 |      cell. If COL2 and ROW2 are given the bounding box
 |      starts at that cell.
 |
 |      The returned integers specify the offset of the upper left
 |      corner in the master widget and the width and height.
 |
 |  grid_columnconfigure(self, index, cnf={}, **kw)
 |      Configure column INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the column),
 |      weight (how much does additional space propagate to this column)
 |      and pad (how much space to let additionally).
 |
 |  grid_location(self, x, y)
 |      Return a tuple of column and row which identify the cell
 |      at which the pixel at position X and Y inside the master
 |      widget is located.
 |
 |  grid_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given, the current setting will be returned.
 |
 |  grid_rowconfigure(self, index, cnf={}, **kw)
 |      Configure row INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the row),
 |      weight (how much does additional space propagate to this row)
 |      and pad (how much space to let additionally).
 |
 |  grid_size(self)
 |      Return a tuple of the number of column and rows in the grid.
 |
 |  grid_slaves(self, row=None, column=None)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  image_names(self)
 |      Return a list of all existing image names.
 |
 |  image_types(self)
 |      Return a list of all available image types (e.g. photo bitmap).
 |
 |  info_patchlevel(self)
 |      Returns the exact version of the Tcl library.
 |
 |  keys(self)
 |      Return a list of all resource names of this widget.
 |
 |  lift = tkraise(self, aboveThis=None)
 |
 |  lower(self, belowThis=None)
 |      Lower this widget in the stacking order.
 |
 |  mainloop(self, n=0)
 |      Call the mainloop of Tk.
 |
 |  nametowidget(self, name)
 |      Return the Tkinter instance of a widget identified by
 |      its Tcl name NAME.
 |
 |  option_add(self, pattern, value, priority=None)
 |      Set a VALUE (second parameter) for an option
 |      PATTERN (first parameter).
 |
 |      An optional third parameter gives the numeric priority
 |      (defaults to 80).
 |
 |  option_clear(self)
 |      Clear the option database.
 |
 |      It will be reloaded if option_add is called.
 |
 |  option_get(self, name, className)
 |      Return the value for an option NAME for this widget
 |      with CLASSNAME.
 |
 |      Values with higher priority override lower values.
 |
 |  option_readfile(self, fileName, priority=None)
 |      Read file FILENAME into the option database.
 |
 |      An optional second parameter gives the numeric
 |      priority.
 |
 |  pack_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given the current setting will be returned.
 |
 |  pack_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  place_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  propagate = pack_propagate(self, flag=['_noarg_'])
 |
 |  quit(self)
 |      Quit the Tcl interpreter. All widgets will be destroyed.
 |
 |  register = _register(self, func, subst=None, needcleanup=1)
 |
 |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
 |
 |  selection_clear(self, **kw)
 |      Clear the current X selection.
 |
 |  selection_get(self, **kw)
 |      Return the contents of the current X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection and defaults to PRIMARY.  A keyword
 |      parameter displayof specifies a widget on the display
 |      to use. A keyword parameter type specifies the form of data to be
 |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
 |      before STRING.
 |
 |  selection_handle(self, command, **kw)
 |      Specify a function COMMAND to call if the X
 |      selection owned by this widget is queried by another
 |      application.
 |
 |      This function must return the contents of the
 |      selection. The function will be called with the
 |      arguments OFFSET and LENGTH which allows the chunking
 |      of very long selections. The following keyword
 |      parameters can be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  selection_own(self, **kw)
 |      Become owner of X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection (default PRIMARY).
 |
 |  selection_own_get(self, **kw)
 |      Return owner of X selection.
 |
 |      The following keyword parameter can
 |      be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  send(self, interp, cmd, *args)
 |      Send Tcl command CMD to different interpreter INTERP to be executed.
 |
 |  setvar(self, name='PY_VAR', value='1')
 |      Set Tcl variable NAME to VALUE.
 |
 |  size = grid_size(self)
 |
 |  slaves = pack_slaves(self)
 |
 |  tk_bisque(self)
 |      Change the color scheme to light brown as used in Tk 3.6 and before.
 |
 |  tk_focusFollowsMouse(self)
 |      The widget under mouse will get automatically focus. Can not
 |      be disabled easily.
 |
 |  tk_focusNext(self)
 |      Return the next widget in the focus order which follows
 |      widget which has currently the focus.
 |
 |      The focus order first goes to the next child, then to
 |      the children of the child recursively and then to the
 |      next sibling which is higher in the stacking order.  A
 |      widget is omitted if it has the takefocus resource set
 |      to 0.
 |
 |  tk_focusPrev(self)
 |      Return previous widget in the focus order. See tk_focusNext for details.
 |
 |  tk_setPalette(self, *args, **kw)
 |      Set a new color scheme for all widget elements.
 |
 |      A single color as argument will cause that all colors of Tk
 |      widget elements are derived from this.
 |      Alternatively several keyword parameters and its associated
 |      colors can be given. The following keywords are valid:
 |      activeBackground, foreground, selectColor,
 |      activeForeground, highlightBackground, selectBackground,
 |      background, highlightColor, selectForeground,
 |      disabledForeground, insertBackground, troughColor.
 |
 |  tk_strictMotif(self, boolean=None)
 |      Set Tcl internal variable, whether the look and feel
 |      should adhere to Motif.
 |
 |      A parameter of 1 means adhere to Motif (e.g. no color
 |      change if mouse passes over slider).
 |      Returns the set value.
 |
 |  tkraise(self, aboveThis=None)
 |      Raise this widget in the stacking order.
 |
 |  unbind(self, sequence, funcid=None)
 |      Unbind for this widget the event SEQUENCE.
 |
 |      If FUNCID is given, only unbind the function identified with FUNCID
 |      and also delete the corresponding Tcl command.
 |
 |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
 |      unbound.
 |
 |  unbind_all(self, sequence)
 |      Unbind for all widgets for event SEQUENCE all functions.
 |
 |  unbind_class(self, className, sequence)
 |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
 |      all functions.
 |
 |  update(self)
 |      Enter event loop until all pending events have been processed by Tcl.
 |
 |  update_idletasks(self)
 |      Enter event loop until all idle callbacks have been called. This
 |      will update the display of windows but not process events caused by
 |      the user.
 |
 |  wait_variable(self, name='PY_VAR')
 |      Wait until the variable is modified.
 |
 |      A parameter of type IntVar, StringVar, DoubleVar or
 |      BooleanVar must be given.
 |
 |  wait_visibility(self, window=None)
 |      Wait until the visibility of a WIDGET changes
 |      (e.g. it appears).
 |
 |      If no parameter is given self is used.
 |
 |  wait_window(self, window=None)
 |      Wait until a WIDGET is destroyed.
 |
 |      If no parameter is given self is used.
 |
 |  waitvar = wait_variable(self, name='PY_VAR')
 |
 |  winfo_atom(self, name, displayof=0)
 |      Return integer which represents atom NAME.
 |
 |  winfo_atomname(self, id, displayof=0)
 |      Return name of atom with identifier ID.
 |
 |  winfo_cells(self)
 |      Return number of cells in the colormap for this widget.
 |
 |  winfo_children(self)
 |      Return a list of all widgets which are children of this widget.
 |
 |  winfo_class(self)
 |      Return window class name of this widget.
 |
 |  winfo_colormapfull(self)
 |      Return True if at the last color request the colormap was full.
 |
 |  winfo_containing(self, rootX, rootY, displayof=0)
 |      Return the widget which is at the root coordinates ROOTX, ROOTY.
 |
 |  winfo_depth(self)
 |      Return the number of bits per pixel.
 |
 |  winfo_exists(self)
 |      Return true if this widget exists.
 |
 |  winfo_fpixels(self, number)
 |      Return the number of pixels for the given distance NUMBER
 |      (e.g. "3c") as float.
 |
 |  winfo_geometry(self)
 |      Return geometry string for this widget in the form "widthxheight+X+Y".
 |
 |  winfo_height(self)
 |      Return height of this widget.
 |
 |  winfo_id(self)
 |      Return identifier ID for this widget.
 |
 |  winfo_interps(self, displayof=0)
 |      Return the name of all Tcl interpreters for this display.
 |
 |  winfo_ismapped(self)
 |      Return true if this widget is mapped.
 |
 |  winfo_manager(self)
 |      Return the window manager name for this widget.
 |
 |  winfo_name(self)
 |      Return the name of this widget.
 |
 |  winfo_parent(self)
 |      Return the name of the parent of this widget.
 |
 |  winfo_pathname(self, id, displayof=0)
 |      Return the pathname of the widget given by ID.
 |
 |  winfo_pixels(self, number)
 |      Rounded integer value of winfo_fpixels.
 |
 |  winfo_pointerx(self)
 |      Return the x coordinate of the pointer on the root window.
 |
 |  winfo_pointerxy(self)
 |      Return a tuple of x and y coordinates of the pointer on the root window.
 |
 |  winfo_pointery(self)
 |      Return the y coordinate of the pointer on the root window.
 |
 |  winfo_reqheight(self)
 |      Return requested height of this widget.
 |
 |  winfo_reqwidth(self)
 |      Return requested width of this widget.
 |
 |  winfo_rgb(self, color)
 |      Return a tuple of integer RGB values in range(65536) for color in this widget.
 |
 |  winfo_rootx(self)
 |      Return x coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_rooty(self)
 |      Return y coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_screen(self)
 |      Return the screen name of this widget.
 |
 |  winfo_screencells(self)
 |      Return the number of the cells in the colormap of the screen
 |      of this widget.
 |
 |  winfo_screendepth(self)
 |      Return the number of bits per pixel of the root window of the
 |      screen of this widget.
 |
 |  winfo_screenheight(self)
 |      Return the number of pixels of the height of the screen of this widget
 |      in pixel.
 |
 |  winfo_screenmmheight(self)
 |      Return the number of pixels of the height of the screen of
 |      this widget in mm.
 |
 |  winfo_screenmmwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in mm.
 |
 |  winfo_screenvisual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the default
 |      colormodel of this screen.
 |
 |  winfo_screenwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in pixel.
 |
 |  winfo_server(self)
 |      Return information of the X-Server of the screen of this widget in
 |      the form "XmajorRminor vendor vendorVersion".
 |
 |  winfo_toplevel(self)
 |      Return the toplevel widget of this widget.
 |
 |  winfo_viewable(self)
 |      Return true if the widget and all its higher ancestors are mapped.
 |
 |  winfo_visual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the
 |      colormodel of this widget.
 |
 |  winfo_visualid(self)
 |      Return the X identifier for the visual for this widget.
 |
 |  winfo_visualsavailable(self, includeids=False)
 |      Return a list of all visuals available for the screen
 |      of this widget.
 |
 |      Each item in the list consists of a visual name (see winfo_visual), a
 |      depth and if includeids is true is given also the X identifier.
 |
 |  winfo_vrootheight(self)
 |      Return the height of the virtual root window associated with this
 |      widget in pixels. If there is no virtual root window return the
 |      height of the screen.
 |
 |  winfo_vrootwidth(self)
 |      Return the width of the virtual root window associated with this
 |      widget in pixel. If there is no virtual root window return the
 |      width of the screen.
 |
 |  winfo_vrootx(self)
 |      Return the x offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_vrooty(self)
 |      Return the y offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_width(self)
 |      Return the width of this widget.
 |
 |  winfo_x(self)
 |      Return the x coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  winfo_y(self)
 |      Return the y coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from tkinter.Misc:
 |
 |  __dict__
 |      dictionary for instance variables
 |
 |  __weakref__
 |      list of weak references to the object
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Pack:
 |
 |  forget = pack_forget(self)
 |
 |  info = pack_info(self)
 |
 |  pack = pack_configure(self, cnf={}, **kw)
 |
 |  pack_configure(self, cnf={}, **kw)
 |      Pack a widget in the parent widget. Use as options:
 |      after=widget - pack it after you have packed widget
 |      anchor=NSEW (or subset) - position widget according to
 |                                given direction
 |      before=widget - pack it before you will pack widget
 |      expand=bool - expand widget if parent size grows
 |      fill=NONE or X or Y or BOTH - fill widget if widget grows
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
 |
 |  pack_forget(self)
 |      Unmap this widget and do not use it for the packing order.
 |
 |  pack_info(self)
 |      Return information about the packing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Place:
 |
 |  place = place_configure(self, cnf={}, **kw)
 |
 |  place_configure(self, cnf={}, **kw)
 |      Place a widget in the parent widget. Use as options:
 |      in=master - master relative to which the widget is placed
 |      in_=master - see 'in' option description
 |      x=amount - locate anchor of this widget at position x of master
 |      y=amount - locate anchor of this widget at position y of master
 |      relx=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to width of master (1.0 is right edge)
 |      rely=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to height of master (1.0 is bottom edge)
 |      anchor=NSEW (or subset) - position anchor according to given direction
 |      width=amount - width of this widget in pixel
 |      height=amount - height of this widget in pixel
 |      relwidth=amount - width of this widget between 0.0 and 1.0
 |                        relative to width of master (1.0 is the same width
 |                        as the master)
 |      relheight=amount - height of this widget between 0.0 and 1.0
 |                         relative to height of master (1.0 is the same
 |                         height as the master)
 |      bordermode="inside" or "outside" - whether to take border width of
 |                                         master widget into account
 |
 |  place_forget(self)
 |      Unmap this widget.
 |
 |  place_info(self)
 |      Return information about the placing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Grid:
 |
 |  grid = grid_configure(self, cnf={}, **kw)
 |
 |  grid_configure(self, cnf={}, **kw)
 |      Position a widget in the parent widget in a grid. Use as options:
 |      column=number - use cell identified with given column (starting with 0)
 |      columnspan=number - this widget will span several columns
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      row=number - use cell identified with given row (starting with 0)
 |      rowspan=number - this widget will span several rows
 |      sticky=NSEW - if cell is larger on which sides will this
 |                    widget stick to the cell boundary
 |
 |  grid_forget(self)
 |      Unmap this widget.
 |
 |  grid_info(self)
 |      Return information about the options
 |      for positioning this widget in a grid.
 |
 |  grid_remove(self)
 |      Unmap this widget but remember the grid options.
 |
 |  location = grid_location(self, x, y)

None
Help on class Combobox in module tkinter.ttk:

class Combobox(Entry)
 |  Combobox(master=None, **kw)
 |
 |  Ttk Combobox widget combines a text field with a pop-down list of
 |  values.
 |
 |  Method resolution order:
 |      Combobox
 |      Entry
 |      Widget
 |      tkinter.Entry
 |      tkinter.Widget
 |      tkinter.BaseWidget
 |      tkinter.Misc
 |      tkinter.Pack
 |      tkinter.Place
 |      tkinter.Grid
 |      tkinter.XView
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  __init__(self, master=None, **kw)
 |      Construct a Ttk Combobox widget with the parent master.
 |
 |      STANDARD OPTIONS
 |
 |          class, cursor, style, takefocus
 |
 |      WIDGET-SPECIFIC OPTIONS
 |
 |          exportselection, justify, height, postcommand, state,
 |          textvariable, values, width
 |
 |  current(self, newindex=None)
 |      If newindex is supplied, sets the combobox value to the
 |      element at position newindex in the list of values. Otherwise,
 |      returns the index of the current value in the list of values
 |      or -1 if the current value does not appear in the list.
 |
 |  set(self, value)
 |      Sets the value of the combobox to value.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from Entry:
 |
 |  bbox(self, index)
 |      Return a tuple of (x, y, width, height) which describes the
 |      bounding box of the character given by index.
 |
 |  identify(self, x, y)
 |      Returns the name of the element at position x, y, or the
 |      empty string if the coordinates are outside the window.
 |
 |  validate(self)
 |      Force revalidation, independent of the conditions specified
 |      by the validate option. Returns False if validation fails, True
 |      if it succeeds. Sets or clears the invalid state accordingly.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from Widget:
 |
 |  instate(self, statespec, callback=None, *args, **kw)
 |      Test the widget's state.
 |
 |      If callback is not specified, returns True if the widget state
 |      matches statespec and False otherwise. If callback is specified,
 |      then it will be invoked with *args, **kw if the widget state
 |      matches statespec. statespec is expected to be a sequence.
 |
 |  state(self, statespec=None)
 |      Modify or inquire widget state.
 |
 |      Widget state is returned if statespec is None, otherwise it is
 |      set according to the statespec flags and then a new state spec
 |      is returned indicating which flags were changed. statespec is
 |      expected to be a sequence.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Entry:
 |
 |  delete(self, first, last=None)
 |      Delete text from FIRST to LAST (not included).
 |
 |  get(self)
 |      Return the text.
 |
 |  icursor(self, index)
 |      Insert cursor at INDEX.
 |
 |  index(self, index)
 |      Return position of cursor.
 |
 |  insert(self, index, string)
 |      Insert STRING at INDEX.
 |
 |  scan_dragto(self, x)
 |      Adjust the view of the canvas to 10 times the
 |      difference between X and Y and the coordinates given in
 |      scan_mark.
 |
 |  scan_mark(self, x)
 |      Remember the current X, Y coordinates.
 |
 |  select_adjust = selection_adjust(self, index)
 |
 |  select_clear = selection_clear(self)
 |
 |  select_from = selection_from(self, index)
 |
 |  select_present = selection_present(self)
 |
 |  select_range = selection_range(self, start, end)
 |
 |  select_to = selection_to(self, index)
 |
 |  selection_adjust(self, index)
 |      Adjust the end of the selection near the cursor to INDEX.
 |
 |  selection_clear(self)
 |      Clear the selection if it is in this widget.
 |
 |  selection_from(self, index)
 |      Set the fixed end of a selection to INDEX.
 |
 |  selection_present(self)
 |      Return True if there are characters selected in the entry, False
 |      otherwise.
 |
 |  selection_range(self, start, end)
 |      Set the selection from START to END (not included).
 |
 |  selection_to(self, index)
 |      Set the variable end of a selection to INDEX.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.BaseWidget:
 |
 |  destroy(self)
 |      Destroy this and all descendants widgets.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Misc:
 |
 |  __getitem__ = cget(self, key)
 |
 |  __repr__(self)
 |      Return repr(self).
 |
 |  __setitem__(self, key, value)
 |
 |  __str__(self)
 |      Return the window path name of this widget.
 |
 |  after(self, ms, func=None, *args)
 |      Call function once after given time.
 |
 |      MS specifies the time in milliseconds. FUNC gives the
 |      function which shall be called. Additional parameters
 |      are given as parameters to the function call.  Return
 |      identifier to cancel scheduling with after_cancel.
 |
 |  after_cancel(self, id)
 |      Cancel scheduling of function identified with ID.
 |
 |      Identifier returned by after or after_idle must be
 |      given as first parameter.
 |
 |  after_idle(self, func, *args)
 |      Call FUNC once if the Tcl main loop has no event to
 |      process.
 |
 |      Return an identifier to cancel the scheduling with
 |      after_cancel.
 |
 |  anchor = grid_anchor(self, anchor=None)
 |
 |  bell(self, displayof=0)
 |      Ring a display's bell.
 |
 |  bind(self, sequence=None, func=None, add=None)
 |      Bind to this widget at event SEQUENCE a call to function FUNC.
 |
 |      SEQUENCE is a string of concatenated event
 |      patterns. An event pattern is of the form
 |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
 |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
 |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
 |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
 |      Mod1, M1. TYPE is one of Activate, Enter, Map,
 |      ButtonPress, Button, Expose, Motion, ButtonRelease
 |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
 |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
 |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
 |      Leave and DETAIL is the button number for ButtonPress,
 |      ButtonRelease and DETAIL is the Keysym for KeyPress and
 |      KeyRelease. Examples are
 |      <Control-Button-1> for pressing Control and mouse button 1 or
 |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
 |      An event pattern can also be a virtual event of the form
 |      <<AString>> where AString can be arbitrary. This
 |      event can be generated by event_generate.
 |      If events are concatenated they must appear shortly
 |      after each other.
 |
 |      FUNC will be called if the event sequence occurs with an
 |      instance of Event as argument. If the return value of FUNC is
 |      "break" no further bound function is invoked.
 |
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function.
 |
 |      Bind will return an identifier to allow deletion of the bound function with
 |      unbind without memory leak.
 |
 |      If FUNC or SEQUENCE is omitted the bound function or list
 |      of bound events are returned.
 |
 |  bind_all(self, sequence=None, func=None, add=None)
 |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function. See bind for the return value.
 |
 |  bind_class(self, className, sequence=None, func=None, add=None)
 |      Bind to widgets with bindtag CLASSNAME at event
 |      SEQUENCE a call of function FUNC. An additional
 |      boolean parameter ADD specifies whether FUNC will be
 |      called additionally to the other bound function or
 |      whether it will replace the previous function. See bind for
 |      the return value.
 |
 |  bindtags(self, tagList=None)
 |      Set or get the list of bindtags for this widget.
 |
 |      With no argument return the list of all bindtags associated with
 |      this widget. With a list of strings as argument the bindtags are
 |      set to this list. The bindtags determine in which order events are
 |      processed (see bind).
 |
 |  cget(self, key)
 |      Return the resource value for a KEY given as string.
 |
 |  clipboard_append(self, string, **kw)
 |      Append STRING to the Tk clipboard.
 |
 |      A widget specified at the optional displayof keyword
 |      argument specifies the target display. The clipboard
 |      can be retrieved with selection_get.
 |
 |  clipboard_clear(self, **kw)
 |      Clear the data in the Tk clipboard.
 |
 |      A widget specified for the optional displayof keyword
 |      argument specifies the target display.
 |
 |  clipboard_get(self, **kw)
 |      Retrieve data from the clipboard on window's display.
 |
 |      The window keyword defaults to the root window of the Tkinter
 |      application.
 |
 |      The type keyword specifies the form in which the data is
 |      to be returned and should be an atom name such as STRING
 |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
 |      is to try UTF8_STRING and fall back to STRING.
 |
 |      This command is equivalent to:
 |
 |      selection_get(CLIPBOARD)
 |
 |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
 |
 |  config = configure(self, cnf=None, **kw)
 |
 |  configure(self, cnf=None, **kw)
 |      Configure resources of a widget.
 |
 |      The values for resources are specified as keyword
 |      arguments. To get an overview about
 |      the allowed keyword arguments call the method keys.
 |
 |  deletecommand(self, name)
 |      Internal function.
 |
 |      Delete the Tcl command provided in NAME.
 |
 |  event_add(self, virtual, *sequences)
 |      Bind a virtual event VIRTUAL (of the form <<Name>>)
 |      to an event SEQUENCE such that the virtual event is triggered
 |      whenever SEQUENCE occurs.
 |
 |  event_delete(self, virtual, *sequences)
 |      Unbind a virtual event VIRTUAL from SEQUENCE.
 |
 |  event_generate(self, sequence, **kw)
 |      Generate an event SEQUENCE. Additional
 |      keyword arguments specify parameter of the event
 |      (e.g. x, y, rootx, rooty).
 |
 |  event_info(self, virtual=None)
 |      Return a list of all virtual events or the information
 |      about the SEQUENCE bound to the virtual event VIRTUAL.
 |
 |  focus = focus_set(self)
 |
 |  focus_displayof(self)
 |      Return the widget which has currently the focus on the
 |      display where this widget is located.
 |
 |      Return None if the application does not have the focus.
 |
 |  focus_force(self)
 |      Direct input focus to this widget even if the
 |      application does not have the focus. Use with
 |      caution!
 |
 |  focus_get(self)
 |      Return the widget which has currently the focus in the
 |      application.
 |
 |      Use focus_displayof to allow working with several
 |      displays. Return None if application does not have
 |      the focus.
 |
 |  focus_lastfor(self)
 |      Return the widget which would have the focus if top level
 |      for this widget gets the focus from the window manager.
 |
 |  focus_set(self)
 |      Direct input focus to this widget.
 |
 |      If the application currently does not have the focus
 |      this widget will get the focus if the application gets
 |      the focus through the window manager.
 |
 |  getboolean(self, s)
 |      Return a boolean value for Tcl boolean values true and false given as parameter.
 |
 |  getdouble(self, s)
 |
 |  getint(self, s)
 |
 |  getvar(self, name='PY_VAR')
 |      Return value of Tcl variable NAME.
 |
 |  grab_current(self)
 |      Return widget which has currently the grab in this application
 |      or None.
 |
 |  grab_release(self)
 |      Release grab for this widget if currently set.
 |
 |  grab_set(self)
 |      Set grab for this widget.
 |
 |      A grab directs all events to this and descendant
 |      widgets in the application.
 |
 |  grab_set_global(self)
 |      Set global grab for this widget.
 |
 |      A global grab directs all events to this and
 |      descendant widgets on the display. Use with caution -
 |      other applications do not get events anymore.
 |
 |  grab_status(self)
 |      Return None, "local" or "global" if this widget has
 |      no, a local or a global grab.
 |
 |  grid_anchor(self, anchor=None)
 |      The anchor value controls how to place the grid within the
 |      master when no row/column has any weight.
 |
 |      The default anchor is nw.
 |
 |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |      Return a tuple of integer coordinates for the bounding
 |      box of this widget controlled by the geometry manager grid.
 |
 |      If COLUMN, ROW is given the bounding box applies from
 |      the cell with row and column 0 to the specified
 |      cell. If COL2 and ROW2 are given the bounding box
 |      starts at that cell.
 |
 |      The returned integers specify the offset of the upper left
 |      corner in the master widget and the width and height.
 |
 |  grid_columnconfigure(self, index, cnf={}, **kw)
 |      Configure column INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the column),
 |      weight (how much does additional space propagate to this column)
 |      and pad (how much space to let additionally).
 |
 |  grid_location(self, x, y)
 |      Return a tuple of column and row which identify the cell
 |      at which the pixel at position X and Y inside the master
 |      widget is located.
 |
 |  grid_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given, the current setting will be returned.
 |
 |  grid_rowconfigure(self, index, cnf={}, **kw)
 |      Configure row INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the row),
 |      weight (how much does additional space propagate to this row)
 |      and pad (how much space to let additionally).
 |
 |  grid_size(self)
 |      Return a tuple of the number of column and rows in the grid.
 |
 |  grid_slaves(self, row=None, column=None)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  image_names(self)
 |      Return a list of all existing image names.
 |
 |  image_types(self)
 |      Return a list of all available image types (e.g. photo bitmap).
 |
 |  info_patchlevel(self)
 |      Returns the exact version of the Tcl library.
 |
 |  keys(self)
 |      Return a list of all resource names of this widget.
 |
 |  lift = tkraise(self, aboveThis=None)
 |
 |  lower(self, belowThis=None)
 |      Lower this widget in the stacking order.
 |
 |  mainloop(self, n=0)
 |      Call the mainloop of Tk.
 |
 |  nametowidget(self, name)
 |      Return the Tkinter instance of a widget identified by
 |      its Tcl name NAME.
 |
 |  option_add(self, pattern, value, priority=None)
 |      Set a VALUE (second parameter) for an option
 |      PATTERN (first parameter).
 |
 |      An optional third parameter gives the numeric priority
 |      (defaults to 80).
 |
 |  option_clear(self)
 |      Clear the option database.
 |
 |      It will be reloaded if option_add is called.
 |
 |  option_get(self, name, className)
 |      Return the value for an option NAME for this widget
 |      with CLASSNAME.
 |
 |      Values with higher priority override lower values.
 |
 |  option_readfile(self, fileName, priority=None)
 |      Read file FILENAME into the option database.
 |
 |      An optional second parameter gives the numeric
 |      priority.
 |
 |  pack_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given the current setting will be returned.
 |
 |  pack_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  place_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  propagate = pack_propagate(self, flag=['_noarg_'])
 |
 |  quit(self)
 |      Quit the Tcl interpreter. All widgets will be destroyed.
 |
 |  register = _register(self, func, subst=None, needcleanup=1)
 |
 |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
 |
 |  selection_get(self, **kw)
 |      Return the contents of the current X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection and defaults to PRIMARY.  A keyword
 |      parameter displayof specifies a widget on the display
 |      to use. A keyword parameter type specifies the form of data to be
 |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
 |      before STRING.
 |
 |  selection_handle(self, command, **kw)
 |      Specify a function COMMAND to call if the X
 |      selection owned by this widget is queried by another
 |      application.
 |
 |      This function must return the contents of the
 |      selection. The function will be called with the
 |      arguments OFFSET and LENGTH which allows the chunking
 |      of very long selections. The following keyword
 |      parameters can be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  selection_own(self, **kw)
 |      Become owner of X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection (default PRIMARY).
 |
 |  selection_own_get(self, **kw)
 |      Return owner of X selection.
 |
 |      The following keyword parameter can
 |      be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  send(self, interp, cmd, *args)
 |      Send Tcl command CMD to different interpreter INTERP to be executed.
 |
 |  setvar(self, name='PY_VAR', value='1')
 |      Set Tcl variable NAME to VALUE.
 |
 |  size = grid_size(self)
 |
 |  slaves = pack_slaves(self)
 |
 |  tk_bisque(self)
 |      Change the color scheme to light brown as used in Tk 3.6 and before.
 |
 |  tk_focusFollowsMouse(self)
 |      The widget under mouse will get automatically focus. Can not
 |      be disabled easily.
 |
 |  tk_focusNext(self)
 |      Return the next widget in the focus order which follows
 |      widget which has currently the focus.
 |
 |      The focus order first goes to the next child, then to
 |      the children of the child recursively and then to the
 |      next sibling which is higher in the stacking order.  A
 |      widget is omitted if it has the takefocus resource set
 |      to 0.
 |
 |  tk_focusPrev(self)
 |      Return previous widget in the focus order. See tk_focusNext for details.
 |
 |  tk_setPalette(self, *args, **kw)
 |      Set a new color scheme for all widget elements.
 |
 |      A single color as argument will cause that all colors of Tk
 |      widget elements are derived from this.
 |      Alternatively several keyword parameters and its associated
 |      colors can be given. The following keywords are valid:
 |      activeBackground, foreground, selectColor,
 |      activeForeground, highlightBackground, selectBackground,
 |      background, highlightColor, selectForeground,
 |      disabledForeground, insertBackground, troughColor.
 |
 |  tk_strictMotif(self, boolean=None)
 |      Set Tcl internal variable, whether the look and feel
 |      should adhere to Motif.
 |
 |      A parameter of 1 means adhere to Motif (e.g. no color
 |      change if mouse passes over slider).
 |      Returns the set value.
 |
 |  tkraise(self, aboveThis=None)
 |      Raise this widget in the stacking order.
 |
 |  unbind(self, sequence, funcid=None)
 |      Unbind for this widget the event SEQUENCE.
 |
 |      If FUNCID is given, only unbind the function identified with FUNCID
 |      and also delete the corresponding Tcl command.
 |
 |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
 |      unbound.
 |
 |  unbind_all(self, sequence)
 |      Unbind for all widgets for event SEQUENCE all functions.
 |
 |  unbind_class(self, className, sequence)
 |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
 |      all functions.
 |
 |  update(self)
 |      Enter event loop until all pending events have been processed by Tcl.
 |
 |  update_idletasks(self)
 |      Enter event loop until all idle callbacks have been called. This
 |      will update the display of windows but not process events caused by
 |      the user.
 |
 |  wait_variable(self, name='PY_VAR')
 |      Wait until the variable is modified.
 |
 |      A parameter of type IntVar, StringVar, DoubleVar or
 |      BooleanVar must be given.
 |
 |  wait_visibility(self, window=None)
 |      Wait until the visibility of a WIDGET changes
 |      (e.g. it appears).
 |
 |      If no parameter is given self is used.
 |
 |  wait_window(self, window=None)
 |      Wait until a WIDGET is destroyed.
 |
 |      If no parameter is given self is used.
 |
 |  waitvar = wait_variable(self, name='PY_VAR')
 |
 |  winfo_atom(self, name, displayof=0)
 |      Return integer which represents atom NAME.
 |
 |  winfo_atomname(self, id, displayof=0)
 |      Return name of atom with identifier ID.
 |
 |  winfo_cells(self)
 |      Return number of cells in the colormap for this widget.
 |
 |  winfo_children(self)
 |      Return a list of all widgets which are children of this widget.
 |
 |  winfo_class(self)
 |      Return window class name of this widget.
 |
 |  winfo_colormapfull(self)
 |      Return True if at the last color request the colormap was full.
 |
 |  winfo_containing(self, rootX, rootY, displayof=0)
 |      Return the widget which is at the root coordinates ROOTX, ROOTY.
 |
 |  winfo_depth(self)
 |      Return the number of bits per pixel.
 |
 |  winfo_exists(self)
 |      Return true if this widget exists.
 |
 |  winfo_fpixels(self, number)
 |      Return the number of pixels for the given distance NUMBER
 |      (e.g. "3c") as float.
 |
 |  winfo_geometry(self)
 |      Return geometry string for this widget in the form "widthxheight+X+Y".
 |
 |  winfo_height(self)
 |      Return height of this widget.
 |
 |  winfo_id(self)
 |      Return identifier ID for this widget.
 |
 |  winfo_interps(self, displayof=0)
 |      Return the name of all Tcl interpreters for this display.
 |
 |  winfo_ismapped(self)
 |      Return true if this widget is mapped.
 |
 |  winfo_manager(self)
 |      Return the window manager name for this widget.
 |
 |  winfo_name(self)
 |      Return the name of this widget.
 |
 |  winfo_parent(self)
 |      Return the name of the parent of this widget.
 |
 |  winfo_pathname(self, id, displayof=0)
 |      Return the pathname of the widget given by ID.
 |
 |  winfo_pixels(self, number)
 |      Rounded integer value of winfo_fpixels.
 |
 |  winfo_pointerx(self)
 |      Return the x coordinate of the pointer on the root window.
 |
 |  winfo_pointerxy(self)
 |      Return a tuple of x and y coordinates of the pointer on the root window.
 |
 |  winfo_pointery(self)
 |      Return the y coordinate of the pointer on the root window.
 |
 |  winfo_reqheight(self)
 |      Return requested height of this widget.
 |
 |  winfo_reqwidth(self)
 |      Return requested width of this widget.
 |
 |  winfo_rgb(self, color)
 |      Return a tuple of integer RGB values in range(65536) for color in this widget.
 |
 |  winfo_rootx(self)
 |      Return x coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_rooty(self)
 |      Return y coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_screen(self)
 |      Return the screen name of this widget.
 |
 |  winfo_screencells(self)
 |      Return the number of the cells in the colormap of the screen
 |      of this widget.
 |
 |  winfo_screendepth(self)
 |      Return the number of bits per pixel of the root window of the
 |      screen of this widget.
 |
 |  winfo_screenheight(self)
 |      Return the number of pixels of the height of the screen of this widget
 |      in pixel.
 |
 |  winfo_screenmmheight(self)
 |      Return the number of pixels of the height of the screen of
 |      this widget in mm.
 |
 |  winfo_screenmmwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in mm.
 |
 |  winfo_screenvisual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the default
 |      colormodel of this screen.
 |
 |  winfo_screenwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in pixel.
 |
 |  winfo_server(self)
 |      Return information of the X-Server of the screen of this widget in
 |      the form "XmajorRminor vendor vendorVersion".
 |
 |  winfo_toplevel(self)
 |      Return the toplevel widget of this widget.
 |
 |  winfo_viewable(self)
 |      Return true if the widget and all its higher ancestors are mapped.
 |
 |  winfo_visual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the
 |      colormodel of this widget.
 |
 |  winfo_visualid(self)
 |      Return the X identifier for the visual for this widget.
 |
 |  winfo_visualsavailable(self, includeids=False)
 |      Return a list of all visuals available for the screen
 |      of this widget.
 |
 |      Each item in the list consists of a visual name (see winfo_visual), a
 |      depth and if includeids is true is given also the X identifier.
 |
 |  winfo_vrootheight(self)
 |      Return the height of the virtual root window associated with this
 |      widget in pixels. If there is no virtual root window return the
 |      height of the screen.
 |
 |  winfo_vrootwidth(self)
 |      Return the width of the virtual root window associated with this
 |      widget in pixel. If there is no virtual root window return the
 |      width of the screen.
 |
 |  winfo_vrootx(self)
 |      Return the x offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_vrooty(self)
 |      Return the y offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_width(self)
 |      Return the width of this widget.
 |
 |  winfo_x(self)
 |      Return the x coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  winfo_y(self)
 |      Return the y coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from tkinter.Misc:
 |
 |  __dict__
 |      dictionary for instance variables
 |
 |  __weakref__
 |      list of weak references to the object
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Pack:
 |
 |  forget = pack_forget(self)
 |
 |  info = pack_info(self)
 |
 |  pack = pack_configure(self, cnf={}, **kw)
 |
 |  pack_configure(self, cnf={}, **kw)
 |      Pack a widget in the parent widget. Use as options:
 |      after=widget - pack it after you have packed widget
 |      anchor=NSEW (or subset) - position widget according to
 |                                given direction
 |      before=widget - pack it before you will pack widget
 |      expand=bool - expand widget if parent size grows
 |      fill=NONE or X or Y or BOTH - fill widget if widget grows
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
 |
 |  pack_forget(self)
 |      Unmap this widget and do not use it for the packing order.
 |
 |  pack_info(self)
 |      Return information about the packing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Place:
 |
 |  place = place_configure(self, cnf={}, **kw)
 |
 |  place_configure(self, cnf={}, **kw)
 |      Place a widget in the parent widget. Use as options:
 |      in=master - master relative to which the widget is placed
 |      in_=master - see 'in' option description
 |      x=amount - locate anchor of this widget at position x of master
 |      y=amount - locate anchor of this widget at position y of master
 |      relx=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to width of master (1.0 is right edge)
 |      rely=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to height of master (1.0 is bottom edge)
 |      anchor=NSEW (or subset) - position anchor according to given direction
 |      width=amount - width of this widget in pixel
 |      height=amount - height of this widget in pixel
 |      relwidth=amount - width of this widget between 0.0 and 1.0
 |                        relative to width of master (1.0 is the same width
 |                        as the master)
 |      relheight=amount - height of this widget between 0.0 and 1.0
 |                         relative to height of master (1.0 is the same
 |                         height as the master)
 |      bordermode="inside" or "outside" - whether to take border width of
 |                                         master widget into account
 |
 |  place_forget(self)
 |      Unmap this widget.
 |
 |  place_info(self)
 |      Return information about the placing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Grid:
 |
 |  grid = grid_configure(self, cnf={}, **kw)
 |
 |  grid_configure(self, cnf={}, **kw)
 |      Position a widget in the parent widget in a grid. Use as options:
 |      column=number - use cell identified with given column (starting with 0)
 |      columnspan=number - this widget will span several columns
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      row=number - use cell identified with given row (starting with 0)
 |      rowspan=number - this widget will span several rows
 |      sticky=NSEW - if cell is larger on which sides will this
 |                    widget stick to the cell boundary
 |
 |  grid_forget(self)
 |      Unmap this widget.
 |
 |  grid_info(self)
 |      Return information about the options
 |      for positioning this widget in a grid.
 |
 |  grid_remove(self)
 |      Unmap this widget but remember the grid options.
 |
 |  location = grid_location(self, x, y)
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.XView:
 |
 |  xview(self, *args)
 |      Query and change the horizontal position of the view.
 |
 |  xview_moveto(self, fraction)
 |      Adjusts the view in the window so that FRACTION of the
 |      total width of the canvas is off-screen to the left.
 |
 |  xview_scroll(self, number, what)
 |      Shift the x-view according to NUMBER which is measured in "units"
 |      or "pages" (WHAT).

None
Help on class Entry in module tkinter.ttk:

class Entry(Widget, tkinter.Entry)
 |  Entry(master=None, widget=None, **kw)
 |
 |  Ttk Entry widget displays a one-line text string and allows that
 |  string to be edited by the user.
 |
 |  Method resolution order:
 |      Entry
 |      Widget
 |      tkinter.Entry
 |      tkinter.Widget
 |      tkinter.BaseWidget
 |      tkinter.Misc
 |      tkinter.Pack
 |      tkinter.Place
 |      tkinter.Grid
 |      tkinter.XView
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  __init__(self, master=None, widget=None, **kw)
 |      Constructs a Ttk Entry widget with the parent master.
 |
 |      STANDARD OPTIONS
 |
 |          class, cursor, style, takefocus, xscrollcommand
 |
 |      WIDGET-SPECIFIC OPTIONS
 |
 |          exportselection, invalidcommand, justify, show, state,
 |          textvariable, validate, validatecommand, width
 |
 |      VALIDATION MODES
 |
 |          none, key, focus, focusin, focusout, all
 |
 |  bbox(self, index)
 |      Return a tuple of (x, y, width, height) which describes the
 |      bounding box of the character given by index.
 |
 |  identify(self, x, y)
 |      Returns the name of the element at position x, y, or the
 |      empty string if the coordinates are outside the window.
 |
 |  validate(self)
 |      Force revalidation, independent of the conditions specified
 |      by the validate option. Returns False if validation fails, True
 |      if it succeeds. Sets or clears the invalid state accordingly.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from Widget:
 |
 |  instate(self, statespec, callback=None, *args, **kw)
 |      Test the widget's state.
 |
 |      If callback is not specified, returns True if the widget state
 |      matches statespec and False otherwise. If callback is specified,
 |      then it will be invoked with *args, **kw if the widget state
 |      matches statespec. statespec is expected to be a sequence.
 |
 |  state(self, statespec=None)
 |      Modify or inquire widget state.
 |
 |      Widget state is returned if statespec is None, otherwise it is
 |      set according to the statespec flags and then a new state spec
 |      is returned indicating which flags were changed. statespec is
 |      expected to be a sequence.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Entry:
 |
 |  delete(self, first, last=None)
 |      Delete text from FIRST to LAST (not included).
 |
 |  get(self)
 |      Return the text.
 |
 |  icursor(self, index)
 |      Insert cursor at INDEX.
 |
 |  index(self, index)
 |      Return position of cursor.
 |
 |  insert(self, index, string)
 |      Insert STRING at INDEX.
 |
 |  scan_dragto(self, x)
 |      Adjust the view of the canvas to 10 times the
 |      difference between X and Y and the coordinates given in
 |      scan_mark.
 |
 |  scan_mark(self, x)
 |      Remember the current X, Y coordinates.
 |
 |  select_adjust = selection_adjust(self, index)
 |
 |  select_clear = selection_clear(self)
 |
 |  select_from = selection_from(self, index)
 |
 |  select_present = selection_present(self)
 |
 |  select_range = selection_range(self, start, end)
 |
 |  select_to = selection_to(self, index)
 |
 |  selection_adjust(self, index)
 |      Adjust the end of the selection near the cursor to INDEX.
 |
 |  selection_clear(self)
 |      Clear the selection if it is in this widget.
 |
 |  selection_from(self, index)
 |      Set the fixed end of a selection to INDEX.
 |
 |  selection_present(self)
 |      Return True if there are characters selected in the entry, False
 |      otherwise.
 |
 |  selection_range(self, start, end)
 |      Set the selection from START to END (not included).
 |
 |  selection_to(self, index)
 |      Set the variable end of a selection to INDEX.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.BaseWidget:
 |
 |  destroy(self)
 |      Destroy this and all descendants widgets.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Misc:
 |
 |  __getitem__ = cget(self, key)
 |
 |  __repr__(self)
 |      Return repr(self).
 |
 |  __setitem__(self, key, value)
 |
 |  __str__(self)
 |      Return the window path name of this widget.
 |
 |  after(self, ms, func=None, *args)
 |      Call function once after given time.
 |
 |      MS specifies the time in milliseconds. FUNC gives the
 |      function which shall be called. Additional parameters
 |      are given as parameters to the function call.  Return
 |      identifier to cancel scheduling with after_cancel.
 |
 |  after_cancel(self, id)
 |      Cancel scheduling of function identified with ID.
 |
 |      Identifier returned by after or after_idle must be
 |      given as first parameter.
 |
 |  after_idle(self, func, *args)
 |      Call FUNC once if the Tcl main loop has no event to
 |      process.
 |
 |      Return an identifier to cancel the scheduling with
 |      after_cancel.
 |
 |  anchor = grid_anchor(self, anchor=None)
 |
 |  bell(self, displayof=0)
 |      Ring a display's bell.
 |
 |  bind(self, sequence=None, func=None, add=None)
 |      Bind to this widget at event SEQUENCE a call to function FUNC.
 |
 |      SEQUENCE is a string of concatenated event
 |      patterns. An event pattern is of the form
 |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
 |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
 |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
 |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
 |      Mod1, M1. TYPE is one of Activate, Enter, Map,
 |      ButtonPress, Button, Expose, Motion, ButtonRelease
 |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
 |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
 |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
 |      Leave and DETAIL is the button number for ButtonPress,
 |      ButtonRelease and DETAIL is the Keysym for KeyPress and
 |      KeyRelease. Examples are
 |      <Control-Button-1> for pressing Control and mouse button 1 or
 |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
 |      An event pattern can also be a virtual event of the form
 |      <<AString>> where AString can be arbitrary. This
 |      event can be generated by event_generate.
 |      If events are concatenated they must appear shortly
 |      after each other.
 |
 |      FUNC will be called if the event sequence occurs with an
 |      instance of Event as argument. If the return value of FUNC is
 |      "break" no further bound function is invoked.
 |
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function.
 |
 |      Bind will return an identifier to allow deletion of the bound function with
 |      unbind without memory leak.
 |
 |      If FUNC or SEQUENCE is omitted the bound function or list
 |      of bound events are returned.
 |
 |  bind_all(self, sequence=None, func=None, add=None)
 |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function. See bind for the return value.
 |
 |  bind_class(self, className, sequence=None, func=None, add=None)
 |      Bind to widgets with bindtag CLASSNAME at event
 |      SEQUENCE a call of function FUNC. An additional
 |      boolean parameter ADD specifies whether FUNC will be
 |      called additionally to the other bound function or
 |      whether it will replace the previous function. See bind for
 |      the return value.
 |
 |  bindtags(self, tagList=None)
 |      Set or get the list of bindtags for this widget.
 |
 |      With no argument return the list of all bindtags associated with
 |      this widget. With a list of strings as argument the bindtags are
 |      set to this list. The bindtags determine in which order events are
 |      processed (see bind).
 |
 |  cget(self, key)
 |      Return the resource value for a KEY given as string.
 |
 |  clipboard_append(self, string, **kw)
 |      Append STRING to the Tk clipboard.
 |
 |      A widget specified at the optional displayof keyword
 |      argument specifies the target display. The clipboard
 |      can be retrieved with selection_get.
 |
 |  clipboard_clear(self, **kw)
 |      Clear the data in the Tk clipboard.
 |
 |      A widget specified for the optional displayof keyword
 |      argument specifies the target display.
 |
 |  clipboard_get(self, **kw)
 |      Retrieve data from the clipboard on window's display.
 |
 |      The window keyword defaults to the root window of the Tkinter
 |      application.
 |
 |      The type keyword specifies the form in which the data is
 |      to be returned and should be an atom name such as STRING
 |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
 |      is to try UTF8_STRING and fall back to STRING.
 |
 |      This command is equivalent to:
 |
 |      selection_get(CLIPBOARD)
 |
 |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
 |
 |  config = configure(self, cnf=None, **kw)
 |
 |  configure(self, cnf=None, **kw)
 |      Configure resources of a widget.
 |
 |      The values for resources are specified as keyword
 |      arguments. To get an overview about
 |      the allowed keyword arguments call the method keys.
 |
 |  deletecommand(self, name)
 |      Internal function.
 |
 |      Delete the Tcl command provided in NAME.
 |
 |  event_add(self, virtual, *sequences)
 |      Bind a virtual event VIRTUAL (of the form <<Name>>)
 |      to an event SEQUENCE such that the virtual event is triggered
 |      whenever SEQUENCE occurs.
 |
 |  event_delete(self, virtual, *sequences)
 |      Unbind a virtual event VIRTUAL from SEQUENCE.
 |
 |  event_generate(self, sequence, **kw)
 |      Generate an event SEQUENCE. Additional
 |      keyword arguments specify parameter of the event
 |      (e.g. x, y, rootx, rooty).
 |
 |  event_info(self, virtual=None)
 |      Return a list of all virtual events or the information
 |      about the SEQUENCE bound to the virtual event VIRTUAL.
 |
 |  focus = focus_set(self)
 |
 |  focus_displayof(self)
 |      Return the widget which has currently the focus on the
 |      display where this widget is located.
 |
 |      Return None if the application does not have the focus.
 |
 |  focus_force(self)
 |      Direct input focus to this widget even if the
 |      application does not have the focus. Use with
 |      caution!
 |
 |  focus_get(self)
 |      Return the widget which has currently the focus in the
 |      application.
 |
 |      Use focus_displayof to allow working with several
 |      displays. Return None if application does not have
 |      the focus.
 |
 |  focus_lastfor(self)
 |      Return the widget which would have the focus if top level
 |      for this widget gets the focus from the window manager.
 |
 |  focus_set(self)
 |      Direct input focus to this widget.
 |
 |      If the application currently does not have the focus
 |      this widget will get the focus if the application gets
 |      the focus through the window manager.
 |
 |  getboolean(self, s)
 |      Return a boolean value for Tcl boolean values true and false given as parameter.
 |
 |  getdouble(self, s)
 |
 |  getint(self, s)
 |
 |  getvar(self, name='PY_VAR')
 |      Return value of Tcl variable NAME.
 |
 |  grab_current(self)
 |      Return widget which has currently the grab in this application
 |      or None.
 |
 |  grab_release(self)
 |      Release grab for this widget if currently set.
 |
 |  grab_set(self)
 |      Set grab for this widget.
 |
 |      A grab directs all events to this and descendant
 |      widgets in the application.
 |
 |  grab_set_global(self)
 |      Set global grab for this widget.
 |
 |      A global grab directs all events to this and
 |      descendant widgets on the display. Use with caution -
 |      other applications do not get events anymore.
 |
 |  grab_status(self)
 |      Return None, "local" or "global" if this widget has
 |      no, a local or a global grab.
 |
 |  grid_anchor(self, anchor=None)
 |      The anchor value controls how to place the grid within the
 |      master when no row/column has any weight.
 |
 |      The default anchor is nw.
 |
 |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |      Return a tuple of integer coordinates for the bounding
 |      box of this widget controlled by the geometry manager grid.
 |
 |      If COLUMN, ROW is given the bounding box applies from
 |      the cell with row and column 0 to the specified
 |      cell. If COL2 and ROW2 are given the bounding box
 |      starts at that cell.
 |
 |      The returned integers specify the offset of the upper left
 |      corner in the master widget and the width and height.
 |
 |  grid_columnconfigure(self, index, cnf={}, **kw)
 |      Configure column INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the column),
 |      weight (how much does additional space propagate to this column)
 |      and pad (how much space to let additionally).
 |
 |  grid_location(self, x, y)
 |      Return a tuple of column and row which identify the cell
 |      at which the pixel at position X and Y inside the master
 |      widget is located.
 |
 |  grid_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given, the current setting will be returned.
 |
 |  grid_rowconfigure(self, index, cnf={}, **kw)
 |      Configure row INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the row),
 |      weight (how much does additional space propagate to this row)
 |      and pad (how much space to let additionally).
 |
 |  grid_size(self)
 |      Return a tuple of the number of column and rows in the grid.
 |
 |  grid_slaves(self, row=None, column=None)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  image_names(self)
 |      Return a list of all existing image names.
 |
 |  image_types(self)
 |      Return a list of all available image types (e.g. photo bitmap).
 |
 |  info_patchlevel(self)
 |      Returns the exact version of the Tcl library.
 |
 |  keys(self)
 |      Return a list of all resource names of this widget.
 |
 |  lift = tkraise(self, aboveThis=None)
 |
 |  lower(self, belowThis=None)
 |      Lower this widget in the stacking order.
 |
 |  mainloop(self, n=0)
 |      Call the mainloop of Tk.
 |
 |  nametowidget(self, name)
 |      Return the Tkinter instance of a widget identified by
 |      its Tcl name NAME.
 |
 |  option_add(self, pattern, value, priority=None)
 |      Set a VALUE (second parameter) for an option
 |      PATTERN (first parameter).
 |
 |      An optional third parameter gives the numeric priority
 |      (defaults to 80).
 |
 |  option_clear(self)
 |      Clear the option database.
 |
 |      It will be reloaded if option_add is called.
 |
 |  option_get(self, name, className)
 |      Return the value for an option NAME for this widget
 |      with CLASSNAME.
 |
 |      Values with higher priority override lower values.
 |
 |  option_readfile(self, fileName, priority=None)
 |      Read file FILENAME into the option database.
 |
 |      An optional second parameter gives the numeric
 |      priority.
 |
 |  pack_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given the current setting will be returned.
 |
 |  pack_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  place_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  propagate = pack_propagate(self, flag=['_noarg_'])
 |
 |  quit(self)
 |      Quit the Tcl interpreter. All widgets will be destroyed.
 |
 |  register = _register(self, func, subst=None, needcleanup=1)
 |
 |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
 |
 |  selection_get(self, **kw)
 |      Return the contents of the current X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection and defaults to PRIMARY.  A keyword
 |      parameter displayof specifies a widget on the display
 |      to use. A keyword parameter type specifies the form of data to be
 |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
 |      before STRING.
 |
 |  selection_handle(self, command, **kw)
 |      Specify a function COMMAND to call if the X
 |      selection owned by this widget is queried by another
 |      application.
 |
 |      This function must return the contents of the
 |      selection. The function will be called with the
 |      arguments OFFSET and LENGTH which allows the chunking
 |      of very long selections. The following keyword
 |      parameters can be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  selection_own(self, **kw)
 |      Become owner of X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection (default PRIMARY).
 |
 |  selection_own_get(self, **kw)
 |      Return owner of X selection.
 |
 |      The following keyword parameter can
 |      be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  send(self, interp, cmd, *args)
 |      Send Tcl command CMD to different interpreter INTERP to be executed.
 |
 |  setvar(self, name='PY_VAR', value='1')
 |      Set Tcl variable NAME to VALUE.
 |
 |  size = grid_size(self)
 |
 |  slaves = pack_slaves(self)
 |
 |  tk_bisque(self)
 |      Change the color scheme to light brown as used in Tk 3.6 and before.
 |
 |  tk_focusFollowsMouse(self)
 |      The widget under mouse will get automatically focus. Can not
 |      be disabled easily.
 |
 |  tk_focusNext(self)
 |      Return the next widget in the focus order which follows
 |      widget which has currently the focus.
 |
 |      The focus order first goes to the next child, then to
 |      the children of the child recursively and then to the
 |      next sibling which is higher in the stacking order.  A
 |      widget is omitted if it has the takefocus resource set
 |      to 0.
 |
 |  tk_focusPrev(self)
 |      Return previous widget in the focus order. See tk_focusNext for details.
 |
 |  tk_setPalette(self, *args, **kw)
 |      Set a new color scheme for all widget elements.
 |
 |      A single color as argument will cause that all colors of Tk
 |      widget elements are derived from this.
 |      Alternatively several keyword parameters and its associated
 |      colors can be given. The following keywords are valid:
 |      activeBackground, foreground, selectColor,
 |      activeForeground, highlightBackground, selectBackground,
 |      background, highlightColor, selectForeground,
 |      disabledForeground, insertBackground, troughColor.
 |
 |  tk_strictMotif(self, boolean=None)
 |      Set Tcl internal variable, whether the look and feel
 |      should adhere to Motif.
 |
 |      A parameter of 1 means adhere to Motif (e.g. no color
 |      change if mouse passes over slider).
 |      Returns the set value.
 |
 |  tkraise(self, aboveThis=None)
 |      Raise this widget in the stacking order.
 |
 |  unbind(self, sequence, funcid=None)
 |      Unbind for this widget the event SEQUENCE.
 |
 |      If FUNCID is given, only unbind the function identified with FUNCID
 |      and also delete the corresponding Tcl command.
 |
 |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
 |      unbound.
 |
 |  unbind_all(self, sequence)
 |      Unbind for all widgets for event SEQUENCE all functions.
 |
 |  unbind_class(self, className, sequence)
 |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
 |      all functions.
 |
 |  update(self)
 |      Enter event loop until all pending events have been processed by Tcl.
 |
 |  update_idletasks(self)
 |      Enter event loop until all idle callbacks have been called. This
 |      will update the display of windows but not process events caused by
 |      the user.
 |
 |  wait_variable(self, name='PY_VAR')
 |      Wait until the variable is modified.
 |
 |      A parameter of type IntVar, StringVar, DoubleVar or
 |      BooleanVar must be given.
 |
 |  wait_visibility(self, window=None)
 |      Wait until the visibility of a WIDGET changes
 |      (e.g. it appears).
 |
 |      If no parameter is given self is used.
 |
 |  wait_window(self, window=None)
 |      Wait until a WIDGET is destroyed.
 |
 |      If no parameter is given self is used.
 |
 |  waitvar = wait_variable(self, name='PY_VAR')
 |
 |  winfo_atom(self, name, displayof=0)
 |      Return integer which represents atom NAME.
 |
 |  winfo_atomname(self, id, displayof=0)
 |      Return name of atom with identifier ID.
 |
 |  winfo_cells(self)
 |      Return number of cells in the colormap for this widget.
 |
 |  winfo_children(self)
 |      Return a list of all widgets which are children of this widget.
 |
 |  winfo_class(self)
 |      Return window class name of this widget.
 |
 |  winfo_colormapfull(self)
 |      Return True if at the last color request the colormap was full.
 |
 |  winfo_containing(self, rootX, rootY, displayof=0)
 |      Return the widget which is at the root coordinates ROOTX, ROOTY.
 |
 |  winfo_depth(self)
 |      Return the number of bits per pixel.
 |
 |  winfo_exists(self)
 |      Return true if this widget exists.
 |
 |  winfo_fpixels(self, number)
 |      Return the number of pixels for the given distance NUMBER
 |      (e.g. "3c") as float.
 |
 |  winfo_geometry(self)
 |      Return geometry string for this widget in the form "widthxheight+X+Y".
 |
 |  winfo_height(self)
 |      Return height of this widget.
 |
 |  winfo_id(self)
 |      Return identifier ID for this widget.
 |
 |  winfo_interps(self, displayof=0)
 |      Return the name of all Tcl interpreters for this display.
 |
 |  winfo_ismapped(self)
 |      Return true if this widget is mapped.
 |
 |  winfo_manager(self)
 |      Return the window manager name for this widget.
 |
 |  winfo_name(self)
 |      Return the name of this widget.
 |
 |  winfo_parent(self)
 |      Return the name of the parent of this widget.
 |
 |  winfo_pathname(self, id, displayof=0)
 |      Return the pathname of the widget given by ID.
 |
 |  winfo_pixels(self, number)
 |      Rounded integer value of winfo_fpixels.
 |
 |  winfo_pointerx(self)
 |      Return the x coordinate of the pointer on the root window.
 |
 |  winfo_pointerxy(self)
 |      Return a tuple of x and y coordinates of the pointer on the root window.
 |
 |  winfo_pointery(self)
 |      Return the y coordinate of the pointer on the root window.
 |
 |  winfo_reqheight(self)
 |      Return requested height of this widget.
 |
 |  winfo_reqwidth(self)
 |      Return requested width of this widget.
 |
 |  winfo_rgb(self, color)
 |      Return a tuple of integer RGB values in range(65536) for color in this widget.
 |
 |  winfo_rootx(self)
 |      Return x coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_rooty(self)
 |      Return y coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_screen(self)
 |      Return the screen name of this widget.
 |
 |  winfo_screencells(self)
 |      Return the number of the cells in the colormap of the screen
 |      of this widget.
 |
 |  winfo_screendepth(self)
 |      Return the number of bits per pixel of the root window of the
 |      screen of this widget.
 |
 |  winfo_screenheight(self)
 |      Return the number of pixels of the height of the screen of this widget
 |      in pixel.
 |
 |  winfo_screenmmheight(self)
 |      Return the number of pixels of the height of the screen of
 |      this widget in mm.
 |
 |  winfo_screenmmwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in mm.
 |
 |  winfo_screenvisual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the default
 |      colormodel of this screen.
 |
 |  winfo_screenwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in pixel.
 |
 |  winfo_server(self)
 |      Return information of the X-Server of the screen of this widget in
 |      the form "XmajorRminor vendor vendorVersion".
 |
 |  winfo_toplevel(self)
 |      Return the toplevel widget of this widget.
 |
 |  winfo_viewable(self)
 |      Return true if the widget and all its higher ancestors are mapped.
 |
 |  winfo_visual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the
 |      colormodel of this widget.
 |
 |  winfo_visualid(self)
 |      Return the X identifier for the visual for this widget.
 |
 |  winfo_visualsavailable(self, includeids=False)
 |      Return a list of all visuals available for the screen
 |      of this widget.
 |
 |      Each item in the list consists of a visual name (see winfo_visual), a
 |      depth and if includeids is true is given also the X identifier.
 |
 |  winfo_vrootheight(self)
 |      Return the height of the virtual root window associated with this
 |      widget in pixels. If there is no virtual root window return the
 |      height of the screen.
 |
 |  winfo_vrootwidth(self)
 |      Return the width of the virtual root window associated with this
 |      widget in pixel. If there is no virtual root window return the
 |      width of the screen.
 |
 |  winfo_vrootx(self)
 |      Return the x offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_vrooty(self)
 |      Return the y offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_width(self)
 |      Return the width of this widget.
 |
 |  winfo_x(self)
 |      Return the x coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  winfo_y(self)
 |      Return the y coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from tkinter.Misc:
 |
 |  __dict__
 |      dictionary for instance variables
 |
 |  __weakref__
 |      list of weak references to the object
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Pack:
 |
 |  forget = pack_forget(self)
 |
 |  info = pack_info(self)
 |
 |  pack = pack_configure(self, cnf={}, **kw)
 |
 |  pack_configure(self, cnf={}, **kw)
 |      Pack a widget in the parent widget. Use as options:
 |      after=widget - pack it after you have packed widget
 |      anchor=NSEW (or subset) - position widget according to
 |                                given direction
 |      before=widget - pack it before you will pack widget
 |      expand=bool - expand widget if parent size grows
 |      fill=NONE or X or Y or BOTH - fill widget if widget grows
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
 |
 |  pack_forget(self)
 |      Unmap this widget and do not use it for the packing order.
 |
 |  pack_info(self)
 |      Return information about the packing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Place:
 |
 |  place = place_configure(self, cnf={}, **kw)
 |
 |  place_configure(self, cnf={}, **kw)
 |      Place a widget in the parent widget. Use as options:
 |      in=master - master relative to which the widget is placed
 |      in_=master - see 'in' option description
 |      x=amount - locate anchor of this widget at position x of master
 |      y=amount - locate anchor of this widget at position y of master
 |      relx=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to width of master (1.0 is right edge)
 |      rely=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to height of master (1.0 is bottom edge)
 |      anchor=NSEW (or subset) - position anchor according to given direction
 |      width=amount - width of this widget in pixel
 |      height=amount - height of this widget in pixel
 |      relwidth=amount - width of this widget between 0.0 and 1.0
 |                        relative to width of master (1.0 is the same width
 |                        as the master)
 |      relheight=amount - height of this widget between 0.0 and 1.0
 |                         relative to height of master (1.0 is the same
 |                         height as the master)
 |      bordermode="inside" or "outside" - whether to take border width of
 |                                         master widget into account
 |
 |  place_forget(self)
 |      Unmap this widget.
 |
 |  place_info(self)
 |      Return information about the placing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Grid:
 |
 |  grid = grid_configure(self, cnf={}, **kw)
 |
 |  grid_configure(self, cnf={}, **kw)
 |      Position a widget in the parent widget in a grid. Use as options:
 |      column=number - use cell identified with given column (starting with 0)
 |      columnspan=number - this widget will span several columns
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      row=number - use cell identified with given row (starting with 0)
 |      rowspan=number - this widget will span several rows
 |      sticky=NSEW - if cell is larger on which sides will this
 |                    widget stick to the cell boundary
 |
 |  grid_forget(self)
 |      Unmap this widget.
 |
 |  grid_info(self)
 |      Return information about the options
 |      for positioning this widget in a grid.
 |
 |  grid_remove(self)
 |      Unmap this widget but remember the grid options.
 |
 |  location = grid_location(self, x, y)
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.XView:
 |
 |  xview(self, *args)
 |      Query and change the horizontal position of the view.
 |
 |  xview_moveto(self, fraction)
 |      Adjusts the view in the window so that FRACTION of the
 |      total width of the canvas is off-screen to the left.
 |
 |  xview_scroll(self, number, what)
 |      Shift the x-view according to NUMBER which is measured in "units"
 |      or "pages" (WHAT).

None
Help on class Frame in module tkinter.ttk:

class Frame(Widget)
 |  Frame(master=None, **kw)
 |
 |  Ttk Frame widget is a container, used to group other widgets
 |  together.
 |
 |  Method resolution order:
 |      Frame
 |      Widget
 |      tkinter.Widget
 |      tkinter.BaseWidget
 |      tkinter.Misc
 |      tkinter.Pack
 |      tkinter.Place
 |      tkinter.Grid
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  __init__(self, master=None, **kw)
 |      Construct a Ttk Frame with parent master.
 |
 |      STANDARD OPTIONS
 |
 |          class, cursor, style, takefocus
 |
 |      WIDGET-SPECIFIC OPTIONS
 |
 |          borderwidth, relief, padding, width, height
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from Widget:
 |
 |  identify(self, x, y)
 |      Returns the name of the element at position x, y, or the empty
 |      string if the point does not lie within any element.
 |
 |      x and y are pixel coordinates relative to the widget.
 |
 |  instate(self, statespec, callback=None, *args, **kw)
 |      Test the widget's state.
 |
 |      If callback is not specified, returns True if the widget state
 |      matches statespec and False otherwise. If callback is specified,
 |      then it will be invoked with *args, **kw if the widget state
 |      matches statespec. statespec is expected to be a sequence.
 |
 |  state(self, statespec=None)
 |      Modify or inquire widget state.
 |
 |      Widget state is returned if statespec is None, otherwise it is
 |      set according to the statespec flags and then a new state spec
 |      is returned indicating which flags were changed. statespec is
 |      expected to be a sequence.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.BaseWidget:
 |
 |  destroy(self)
 |      Destroy this and all descendants widgets.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Misc:
 |
 |  __getitem__ = cget(self, key)
 |
 |  __repr__(self)
 |      Return repr(self).
 |
 |  __setitem__(self, key, value)
 |
 |  __str__(self)
 |      Return the window path name of this widget.
 |
 |  after(self, ms, func=None, *args)
 |      Call function once after given time.
 |
 |      MS specifies the time in milliseconds. FUNC gives the
 |      function which shall be called. Additional parameters
 |      are given as parameters to the function call.  Return
 |      identifier to cancel scheduling with after_cancel.
 |
 |  after_cancel(self, id)
 |      Cancel scheduling of function identified with ID.
 |
 |      Identifier returned by after or after_idle must be
 |      given as first parameter.
 |
 |  after_idle(self, func, *args)
 |      Call FUNC once if the Tcl main loop has no event to
 |      process.
 |
 |      Return an identifier to cancel the scheduling with
 |      after_cancel.
 |
 |  anchor = grid_anchor(self, anchor=None)
 |
 |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |
 |  bell(self, displayof=0)
 |      Ring a display's bell.
 |
 |  bind(self, sequence=None, func=None, add=None)
 |      Bind to this widget at event SEQUENCE a call to function FUNC.
 |
 |      SEQUENCE is a string of concatenated event
 |      patterns. An event pattern is of the form
 |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
 |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
 |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
 |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
 |      Mod1, M1. TYPE is one of Activate, Enter, Map,
 |      ButtonPress, Button, Expose, Motion, ButtonRelease
 |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
 |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
 |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
 |      Leave and DETAIL is the button number for ButtonPress,
 |      ButtonRelease and DETAIL is the Keysym for KeyPress and
 |      KeyRelease. Examples are
 |      <Control-Button-1> for pressing Control and mouse button 1 or
 |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
 |      An event pattern can also be a virtual event of the form
 |      <<AString>> where AString can be arbitrary. This
 |      event can be generated by event_generate.
 |      If events are concatenated they must appear shortly
 |      after each other.
 |
 |      FUNC will be called if the event sequence occurs with an
 |      instance of Event as argument. If the return value of FUNC is
 |      "break" no further bound function is invoked.
 |
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function.
 |
 |      Bind will return an identifier to allow deletion of the bound function with
 |      unbind without memory leak.
 |
 |      If FUNC or SEQUENCE is omitted the bound function or list
 |      of bound events are returned.
 |
 |  bind_all(self, sequence=None, func=None, add=None)
 |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function. See bind for the return value.
 |
 |  bind_class(self, className, sequence=None, func=None, add=None)
 |      Bind to widgets with bindtag CLASSNAME at event
 |      SEQUENCE a call of function FUNC. An additional
 |      boolean parameter ADD specifies whether FUNC will be
 |      called additionally to the other bound function or
 |      whether it will replace the previous function. See bind for
 |      the return value.
 |
 |  bindtags(self, tagList=None)
 |      Set or get the list of bindtags for this widget.
 |
 |      With no argument return the list of all bindtags associated with
 |      this widget. With a list of strings as argument the bindtags are
 |      set to this list. The bindtags determine in which order events are
 |      processed (see bind).
 |
 |  cget(self, key)
 |      Return the resource value for a KEY given as string.
 |
 |  clipboard_append(self, string, **kw)
 |      Append STRING to the Tk clipboard.
 |
 |      A widget specified at the optional displayof keyword
 |      argument specifies the target display. The clipboard
 |      can be retrieved with selection_get.
 |
 |  clipboard_clear(self, **kw)
 |      Clear the data in the Tk clipboard.
 |
 |      A widget specified for the optional displayof keyword
 |      argument specifies the target display.
 |
 |  clipboard_get(self, **kw)
 |      Retrieve data from the clipboard on window's display.
 |
 |      The window keyword defaults to the root window of the Tkinter
 |      application.
 |
 |      The type keyword specifies the form in which the data is
 |      to be returned and should be an atom name such as STRING
 |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
 |      is to try UTF8_STRING and fall back to STRING.
 |
 |      This command is equivalent to:
 |
 |      selection_get(CLIPBOARD)
 |
 |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
 |
 |  config = configure(self, cnf=None, **kw)
 |
 |  configure(self, cnf=None, **kw)
 |      Configure resources of a widget.
 |
 |      The values for resources are specified as keyword
 |      arguments. To get an overview about
 |      the allowed keyword arguments call the method keys.
 |
 |  deletecommand(self, name)
 |      Internal function.
 |
 |      Delete the Tcl command provided in NAME.
 |
 |  event_add(self, virtual, *sequences)
 |      Bind a virtual event VIRTUAL (of the form <<Name>>)
 |      to an event SEQUENCE such that the virtual event is triggered
 |      whenever SEQUENCE occurs.
 |
 |  event_delete(self, virtual, *sequences)
 |      Unbind a virtual event VIRTUAL from SEQUENCE.
 |
 |  event_generate(self, sequence, **kw)
 |      Generate an event SEQUENCE. Additional
 |      keyword arguments specify parameter of the event
 |      (e.g. x, y, rootx, rooty).
 |
 |  event_info(self, virtual=None)
 |      Return a list of all virtual events or the information
 |      about the SEQUENCE bound to the virtual event VIRTUAL.
 |
 |  focus = focus_set(self)
 |
 |  focus_displayof(self)
 |      Return the widget which has currently the focus on the
 |      display where this widget is located.
 |
 |      Return None if the application does not have the focus.
 |
 |  focus_force(self)
 |      Direct input focus to this widget even if the
 |      application does not have the focus. Use with
 |      caution!
 |
 |  focus_get(self)
 |      Return the widget which has currently the focus in the
 |      application.
 |
 |      Use focus_displayof to allow working with several
 |      displays. Return None if application does not have
 |      the focus.
 |
 |  focus_lastfor(self)
 |      Return the widget which would have the focus if top level
 |      for this widget gets the focus from the window manager.
 |
 |  focus_set(self)
 |      Direct input focus to this widget.
 |
 |      If the application currently does not have the focus
 |      this widget will get the focus if the application gets
 |      the focus through the window manager.
 |
 |  getboolean(self, s)
 |      Return a boolean value for Tcl boolean values true and false given as parameter.
 |
 |  getdouble(self, s)
 |
 |  getint(self, s)
 |
 |  getvar(self, name='PY_VAR')
 |      Return value of Tcl variable NAME.
 |
 |  grab_current(self)
 |      Return widget which has currently the grab in this application
 |      or None.
 |
 |  grab_release(self)
 |      Release grab for this widget if currently set.
 |
 |  grab_set(self)
 |      Set grab for this widget.
 |
 |      A grab directs all events to this and descendant
 |      widgets in the application.
 |
 |  grab_set_global(self)
 |      Set global grab for this widget.
 |
 |      A global grab directs all events to this and
 |      descendant widgets on the display. Use with caution -
 |      other applications do not get events anymore.
 |
 |  grab_status(self)
 |      Return None, "local" or "global" if this widget has
 |      no, a local or a global grab.
 |
 |  grid_anchor(self, anchor=None)
 |      The anchor value controls how to place the grid within the
 |      master when no row/column has any weight.
 |
 |      The default anchor is nw.
 |
 |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |      Return a tuple of integer coordinates for the bounding
 |      box of this widget controlled by the geometry manager grid.
 |
 |      If COLUMN, ROW is given the bounding box applies from
 |      the cell with row and column 0 to the specified
 |      cell. If COL2 and ROW2 are given the bounding box
 |      starts at that cell.
 |
 |      The returned integers specify the offset of the upper left
 |      corner in the master widget and the width and height.
 |
 |  grid_columnconfigure(self, index, cnf={}, **kw)
 |      Configure column INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the column),
 |      weight (how much does additional space propagate to this column)
 |      and pad (how much space to let additionally).
 |
 |  grid_location(self, x, y)
 |      Return a tuple of column and row which identify the cell
 |      at which the pixel at position X and Y inside the master
 |      widget is located.
 |
 |  grid_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given, the current setting will be returned.
 |
 |  grid_rowconfigure(self, index, cnf={}, **kw)
 |      Configure row INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the row),
 |      weight (how much does additional space propagate to this row)
 |      and pad (how much space to let additionally).
 |
 |  grid_size(self)
 |      Return a tuple of the number of column and rows in the grid.
 |
 |  grid_slaves(self, row=None, column=None)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  image_names(self)
 |      Return a list of all existing image names.
 |
 |  image_types(self)
 |      Return a list of all available image types (e.g. photo bitmap).
 |
 |  info_patchlevel(self)
 |      Returns the exact version of the Tcl library.
 |
 |  keys(self)
 |      Return a list of all resource names of this widget.
 |
 |  lift = tkraise(self, aboveThis=None)
 |
 |  lower(self, belowThis=None)
 |      Lower this widget in the stacking order.
 |
 |  mainloop(self, n=0)
 |      Call the mainloop of Tk.
 |
 |  nametowidget(self, name)
 |      Return the Tkinter instance of a widget identified by
 |      its Tcl name NAME.
 |
 |  option_add(self, pattern, value, priority=None)
 |      Set a VALUE (second parameter) for an option
 |      PATTERN (first parameter).
 |
 |      An optional third parameter gives the numeric priority
 |      (defaults to 80).
 |
 |  option_clear(self)
 |      Clear the option database.
 |
 |      It will be reloaded if option_add is called.
 |
 |  option_get(self, name, className)
 |      Return the value for an option NAME for this widget
 |      with CLASSNAME.
 |
 |      Values with higher priority override lower values.
 |
 |  option_readfile(self, fileName, priority=None)
 |      Read file FILENAME into the option database.
 |
 |      An optional second parameter gives the numeric
 |      priority.
 |
 |  pack_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given the current setting will be returned.
 |
 |  pack_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  place_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  propagate = pack_propagate(self, flag=['_noarg_'])
 |
 |  quit(self)
 |      Quit the Tcl interpreter. All widgets will be destroyed.
 |
 |  register = _register(self, func, subst=None, needcleanup=1)
 |
 |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
 |
 |  selection_clear(self, **kw)
 |      Clear the current X selection.
 |
 |  selection_get(self, **kw)
 |      Return the contents of the current X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection and defaults to PRIMARY.  A keyword
 |      parameter displayof specifies a widget on the display
 |      to use. A keyword parameter type specifies the form of data to be
 |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
 |      before STRING.
 |
 |  selection_handle(self, command, **kw)
 |      Specify a function COMMAND to call if the X
 |      selection owned by this widget is queried by another
 |      application.
 |
 |      This function must return the contents of the
 |      selection. The function will be called with the
 |      arguments OFFSET and LENGTH which allows the chunking
 |      of very long selections. The following keyword
 |      parameters can be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  selection_own(self, **kw)
 |      Become owner of X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection (default PRIMARY).
 |
 |  selection_own_get(self, **kw)
 |      Return owner of X selection.
 |
 |      The following keyword parameter can
 |      be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  send(self, interp, cmd, *args)
 |      Send Tcl command CMD to different interpreter INTERP to be executed.
 |
 |  setvar(self, name='PY_VAR', value='1')
 |      Set Tcl variable NAME to VALUE.
 |
 |  size = grid_size(self)
 |
 |  slaves = pack_slaves(self)
 |
 |  tk_bisque(self)
 |      Change the color scheme to light brown as used in Tk 3.6 and before.
 |
 |  tk_focusFollowsMouse(self)
 |      The widget under mouse will get automatically focus. Can not
 |      be disabled easily.
 |
 |  tk_focusNext(self)
 |      Return the next widget in the focus order which follows
 |      widget which has currently the focus.
 |
 |      The focus order first goes to the next child, then to
 |      the children of the child recursively and then to the
 |      next sibling which is higher in the stacking order.  A
 |      widget is omitted if it has the takefocus resource set
 |      to 0.
 |
 |  tk_focusPrev(self)
 |      Return previous widget in the focus order. See tk_focusNext for details.
 |
 |  tk_setPalette(self, *args, **kw)
 |      Set a new color scheme for all widget elements.
 |
 |      A single color as argument will cause that all colors of Tk
 |      widget elements are derived from this.
 |      Alternatively several keyword parameters and its associated
 |      colors can be given. The following keywords are valid:
 |      activeBackground, foreground, selectColor,
 |      activeForeground, highlightBackground, selectBackground,
 |      background, highlightColor, selectForeground,
 |      disabledForeground, insertBackground, troughColor.
 |
 |  tk_strictMotif(self, boolean=None)
 |      Set Tcl internal variable, whether the look and feel
 |      should adhere to Motif.
 |
 |      A parameter of 1 means adhere to Motif (e.g. no color
 |      change if mouse passes over slider).
 |      Returns the set value.
 |
 |  tkraise(self, aboveThis=None)
 |      Raise this widget in the stacking order.
 |
 |  unbind(self, sequence, funcid=None)
 |      Unbind for this widget the event SEQUENCE.
 |
 |      If FUNCID is given, only unbind the function identified with FUNCID
 |      and also delete the corresponding Tcl command.
 |
 |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
 |      unbound.
 |
 |  unbind_all(self, sequence)
 |      Unbind for all widgets for event SEQUENCE all functions.
 |
 |  unbind_class(self, className, sequence)
 |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
 |      all functions.
 |
 |  update(self)
 |      Enter event loop until all pending events have been processed by Tcl.
 |
 |  update_idletasks(self)
 |      Enter event loop until all idle callbacks have been called. This
 |      will update the display of windows but not process events caused by
 |      the user.
 |
 |  wait_variable(self, name='PY_VAR')
 |      Wait until the variable is modified.
 |
 |      A parameter of type IntVar, StringVar, DoubleVar or
 |      BooleanVar must be given.
 |
 |  wait_visibility(self, window=None)
 |      Wait until the visibility of a WIDGET changes
 |      (e.g. it appears).
 |
 |      If no parameter is given self is used.
 |
 |  wait_window(self, window=None)
 |      Wait until a WIDGET is destroyed.
 |
 |      If no parameter is given self is used.
 |
 |  waitvar = wait_variable(self, name='PY_VAR')
 |
 |  winfo_atom(self, name, displayof=0)
 |      Return integer which represents atom NAME.
 |
 |  winfo_atomname(self, id, displayof=0)
 |      Return name of atom with identifier ID.
 |
 |  winfo_cells(self)
 |      Return number of cells in the colormap for this widget.
 |
 |  winfo_children(self)
 |      Return a list of all widgets which are children of this widget.
 |
 |  winfo_class(self)
 |      Return window class name of this widget.
 |
 |  winfo_colormapfull(self)
 |      Return True if at the last color request the colormap was full.
 |
 |  winfo_containing(self, rootX, rootY, displayof=0)
 |      Return the widget which is at the root coordinates ROOTX, ROOTY.
 |
 |  winfo_depth(self)
 |      Return the number of bits per pixel.
 |
 |  winfo_exists(self)
 |      Return true if this widget exists.
 |
 |  winfo_fpixels(self, number)
 |      Return the number of pixels for the given distance NUMBER
 |      (e.g. "3c") as float.
 |
 |  winfo_geometry(self)
 |      Return geometry string for this widget in the form "widthxheight+X+Y".
 |
 |  winfo_height(self)
 |      Return height of this widget.
 |
 |  winfo_id(self)
 |      Return identifier ID for this widget.
 |
 |  winfo_interps(self, displayof=0)
 |      Return the name of all Tcl interpreters for this display.
 |
 |  winfo_ismapped(self)
 |      Return true if this widget is mapped.
 |
 |  winfo_manager(self)
 |      Return the window manager name for this widget.
 |
 |  winfo_name(self)
 |      Return the name of this widget.
 |
 |  winfo_parent(self)
 |      Return the name of the parent of this widget.
 |
 |  winfo_pathname(self, id, displayof=0)
 |      Return the pathname of the widget given by ID.
 |
 |  winfo_pixels(self, number)
 |      Rounded integer value of winfo_fpixels.
 |
 |  winfo_pointerx(self)
 |      Return the x coordinate of the pointer on the root window.
 |
 |  winfo_pointerxy(self)
 |      Return a tuple of x and y coordinates of the pointer on the root window.
 |
 |  winfo_pointery(self)
 |      Return the y coordinate of the pointer on the root window.
 |
 |  winfo_reqheight(self)
 |      Return requested height of this widget.
 |
 |  winfo_reqwidth(self)
 |      Return requested width of this widget.
 |
 |  winfo_rgb(self, color)
 |      Return a tuple of integer RGB values in range(65536) for color in this widget.
 |
 |  winfo_rootx(self)
 |      Return x coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_rooty(self)
 |      Return y coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_screen(self)
 |      Return the screen name of this widget.
 |
 |  winfo_screencells(self)
 |      Return the number of the cells in the colormap of the screen
 |      of this widget.
 |
 |  winfo_screendepth(self)
 |      Return the number of bits per pixel of the root window of the
 |      screen of this widget.
 |
 |  winfo_screenheight(self)
 |      Return the number of pixels of the height of the screen of this widget
 |      in pixel.
 |
 |  winfo_screenmmheight(self)
 |      Return the number of pixels of the height of the screen of
 |      this widget in mm.
 |
 |  winfo_screenmmwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in mm.
 |
 |  winfo_screenvisual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the default
 |      colormodel of this screen.
 |
 |  winfo_screenwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in pixel.
 |
 |  winfo_server(self)
 |      Return information of the X-Server of the screen of this widget in
 |      the form "XmajorRminor vendor vendorVersion".
 |
 |  winfo_toplevel(self)
 |      Return the toplevel widget of this widget.
 |
 |  winfo_viewable(self)
 |      Return true if the widget and all its higher ancestors are mapped.
 |
 |  winfo_visual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the
 |      colormodel of this widget.
 |
 |  winfo_visualid(self)
 |      Return the X identifier for the visual for this widget.
 |
 |  winfo_visualsavailable(self, includeids=False)
 |      Return a list of all visuals available for the screen
 |      of this widget.
 |
 |      Each item in the list consists of a visual name (see winfo_visual), a
 |      depth and if includeids is true is given also the X identifier.
 |
 |  winfo_vrootheight(self)
 |      Return the height of the virtual root window associated with this
 |      widget in pixels. If there is no virtual root window return the
 |      height of the screen.
 |
 |  winfo_vrootwidth(self)
 |      Return the width of the virtual root window associated with this
 |      widget in pixel. If there is no virtual root window return the
 |      width of the screen.
 |
 |  winfo_vrootx(self)
 |      Return the x offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_vrooty(self)
 |      Return the y offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_width(self)
 |      Return the width of this widget.
 |
 |  winfo_x(self)
 |      Return the x coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  winfo_y(self)
 |      Return the y coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from tkinter.Misc:
 |
 |  __dict__
 |      dictionary for instance variables
 |
 |  __weakref__
 |      list of weak references to the object
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Pack:
 |
 |  forget = pack_forget(self)
 |
 |  info = pack_info(self)
 |
 |  pack = pack_configure(self, cnf={}, **kw)
 |
 |  pack_configure(self, cnf={}, **kw)
 |      Pack a widget in the parent widget. Use as options:
 |      after=widget - pack it after you have packed widget
 |      anchor=NSEW (or subset) - position widget according to
 |                                given direction
 |      before=widget - pack it before you will pack widget
 |      expand=bool - expand widget if parent size grows
 |      fill=NONE or X or Y or BOTH - fill widget if widget grows
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
 |
 |  pack_forget(self)
 |      Unmap this widget and do not use it for the packing order.
 |
 |  pack_info(self)
 |      Return information about the packing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Place:
 |
 |  place = place_configure(self, cnf={}, **kw)
 |
 |  place_configure(self, cnf={}, **kw)
 |      Place a widget in the parent widget. Use as options:
 |      in=master - master relative to which the widget is placed
 |      in_=master - see 'in' option description
 |      x=amount - locate anchor of this widget at position x of master
 |      y=amount - locate anchor of this widget at position y of master
 |      relx=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to width of master (1.0 is right edge)
 |      rely=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to height of master (1.0 is bottom edge)
 |      anchor=NSEW (or subset) - position anchor according to given direction
 |      width=amount - width of this widget in pixel
 |      height=amount - height of this widget in pixel
 |      relwidth=amount - width of this widget between 0.0 and 1.0
 |                        relative to width of master (1.0 is the same width
 |                        as the master)
 |      relheight=amount - height of this widget between 0.0 and 1.0
 |                         relative to height of master (1.0 is the same
 |                         height as the master)
 |      bordermode="inside" or "outside" - whether to take border width of
 |                                         master widget into account
 |
 |  place_forget(self)
 |      Unmap this widget.
 |
 |  place_info(self)
 |      Return information about the placing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Grid:
 |
 |  grid = grid_configure(self, cnf={}, **kw)
 |
 |  grid_configure(self, cnf={}, **kw)
 |      Position a widget in the parent widget in a grid. Use as options:
 |      column=number - use cell identified with given column (starting with 0)
 |      columnspan=number - this widget will span several columns
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      row=number - use cell identified with given row (starting with 0)
 |      rowspan=number - this widget will span several rows
 |      sticky=NSEW - if cell is larger on which sides will this
 |                    widget stick to the cell boundary
 |
 |  grid_forget(self)
 |      Unmap this widget.
 |
 |  grid_info(self)
 |      Return information about the options
 |      for positioning this widget in a grid.
 |
 |  grid_remove(self)
 |      Unmap this widget but remember the grid options.
 |
 |  location = grid_location(self, x, y)

None
Help on class Label in module tkinter.ttk:

class Label(Widget)
 |  Label(master=None, **kw)
 |
 |  Ttk Label widget displays a textual label and/or image.
 |
 |  Method resolution order:
 |      Label
 |      Widget
 |      tkinter.Widget
 |      tkinter.BaseWidget
 |      tkinter.Misc
 |      tkinter.Pack
 |      tkinter.Place
 |      tkinter.Grid
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  __init__(self, master=None, **kw)
 |      Construct a Ttk Label with parent master.
 |
 |      STANDARD OPTIONS
 |
 |          class, compound, cursor, image, style, takefocus, text,
 |          textvariable, underline, width
 |
 |      WIDGET-SPECIFIC OPTIONS
 |
 |          anchor, background, font, foreground, justify, padding,
 |          relief, text, wraplength
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from Widget:
 |
 |  identify(self, x, y)
 |      Returns the name of the element at position x, y, or the empty
 |      string if the point does not lie within any element.
 |
 |      x and y are pixel coordinates relative to the widget.
 |
 |  instate(self, statespec, callback=None, *args, **kw)
 |      Test the widget's state.
 |
 |      If callback is not specified, returns True if the widget state
 |      matches statespec and False otherwise. If callback is specified,
 |      then it will be invoked with *args, **kw if the widget state
 |      matches statespec. statespec is expected to be a sequence.
 |
 |  state(self, statespec=None)
 |      Modify or inquire widget state.
 |
 |      Widget state is returned if statespec is None, otherwise it is
 |      set according to the statespec flags and then a new state spec
 |      is returned indicating which flags were changed. statespec is
 |      expected to be a sequence.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.BaseWidget:
 |
 |  destroy(self)
 |      Destroy this and all descendants widgets.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Misc:
 |
 |  __getitem__ = cget(self, key)
 |
 |  __repr__(self)
 |      Return repr(self).
 |
 |  __setitem__(self, key, value)
 |
 |  __str__(self)
 |      Return the window path name of this widget.
 |
 |  after(self, ms, func=None, *args)
 |      Call function once after given time.
 |
 |      MS specifies the time in milliseconds. FUNC gives the
 |      function which shall be called. Additional parameters
 |      are given as parameters to the function call.  Return
 |      identifier to cancel scheduling with after_cancel.
 |
 |  after_cancel(self, id)
 |      Cancel scheduling of function identified with ID.
 |
 |      Identifier returned by after or after_idle must be
 |      given as first parameter.
 |
 |  after_idle(self, func, *args)
 |      Call FUNC once if the Tcl main loop has no event to
 |      process.
 |
 |      Return an identifier to cancel the scheduling with
 |      after_cancel.
 |
 |  anchor = grid_anchor(self, anchor=None)
 |
 |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |
 |  bell(self, displayof=0)
 |      Ring a display's bell.
 |
 |  bind(self, sequence=None, func=None, add=None)
 |      Bind to this widget at event SEQUENCE a call to function FUNC.
 |
 |      SEQUENCE is a string of concatenated event
 |      patterns. An event pattern is of the form
 |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
 |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
 |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
 |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
 |      Mod1, M1. TYPE is one of Activate, Enter, Map,
 |      ButtonPress, Button, Expose, Motion, ButtonRelease
 |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
 |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
 |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
 |      Leave and DETAIL is the button number for ButtonPress,
 |      ButtonRelease and DETAIL is the Keysym for KeyPress and
 |      KeyRelease. Examples are
 |      <Control-Button-1> for pressing Control and mouse button 1 or
 |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
 |      An event pattern can also be a virtual event of the form
 |      <<AString>> where AString can be arbitrary. This
 |      event can be generated by event_generate.
 |      If events are concatenated they must appear shortly
 |      after each other.
 |
 |      FUNC will be called if the event sequence occurs with an
 |      instance of Event as argument. If the return value of FUNC is
 |      "break" no further bound function is invoked.
 |
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function.
 |
 |      Bind will return an identifier to allow deletion of the bound function with
 |      unbind without memory leak.
 |
 |      If FUNC or SEQUENCE is omitted the bound function or list
 |      of bound events are returned.
 |
 |  bind_all(self, sequence=None, func=None, add=None)
 |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function. See bind for the return value.
 |
 |  bind_class(self, className, sequence=None, func=None, add=None)
 |      Bind to widgets with bindtag CLASSNAME at event
 |      SEQUENCE a call of function FUNC. An additional
 |      boolean parameter ADD specifies whether FUNC will be
 |      called additionally to the other bound function or
 |      whether it will replace the previous function. See bind for
 |      the return value.
 |
 |  bindtags(self, tagList=None)
 |      Set or get the list of bindtags for this widget.
 |
 |      With no argument return the list of all bindtags associated with
 |      this widget. With a list of strings as argument the bindtags are
 |      set to this list. The bindtags determine in which order events are
 |      processed (see bind).
 |
 |  cget(self, key)
 |      Return the resource value for a KEY given as string.
 |
 |  clipboard_append(self, string, **kw)
 |      Append STRING to the Tk clipboard.
 |
 |      A widget specified at the optional displayof keyword
 |      argument specifies the target display. The clipboard
 |      can be retrieved with selection_get.
 |
 |  clipboard_clear(self, **kw)
 |      Clear the data in the Tk clipboard.
 |
 |      A widget specified for the optional displayof keyword
 |      argument specifies the target display.
 |
 |  clipboard_get(self, **kw)
 |      Retrieve data from the clipboard on window's display.
 |
 |      The window keyword defaults to the root window of the Tkinter
 |      application.
 |
 |      The type keyword specifies the form in which the data is
 |      to be returned and should be an atom name such as STRING
 |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
 |      is to try UTF8_STRING and fall back to STRING.
 |
 |      This command is equivalent to:
 |
 |      selection_get(CLIPBOARD)
 |
 |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
 |
 |  config = configure(self, cnf=None, **kw)
 |
 |  configure(self, cnf=None, **kw)
 |      Configure resources of a widget.
 |
 |      The values for resources are specified as keyword
 |      arguments. To get an overview about
 |      the allowed keyword arguments call the method keys.
 |
 |  deletecommand(self, name)
 |      Internal function.
 |
 |      Delete the Tcl command provided in NAME.
 |
 |  event_add(self, virtual, *sequences)
 |      Bind a virtual event VIRTUAL (of the form <<Name>>)
 |      to an event SEQUENCE such that the virtual event is triggered
 |      whenever SEQUENCE occurs.
 |
 |  event_delete(self, virtual, *sequences)
 |      Unbind a virtual event VIRTUAL from SEQUENCE.
 |
 |  event_generate(self, sequence, **kw)
 |      Generate an event SEQUENCE. Additional
 |      keyword arguments specify parameter of the event
 |      (e.g. x, y, rootx, rooty).
 |
 |  event_info(self, virtual=None)
 |      Return a list of all virtual events or the information
 |      about the SEQUENCE bound to the virtual event VIRTUAL.
 |
 |  focus = focus_set(self)
 |
 |  focus_displayof(self)
 |      Return the widget which has currently the focus on the
 |      display where this widget is located.
 |
 |      Return None if the application does not have the focus.
 |
 |  focus_force(self)
 |      Direct input focus to this widget even if the
 |      application does not have the focus. Use with
 |      caution!
 |
 |  focus_get(self)
 |      Return the widget which has currently the focus in the
 |      application.
 |
 |      Use focus_displayof to allow working with several
 |      displays. Return None if application does not have
 |      the focus.
 |
 |  focus_lastfor(self)
 |      Return the widget which would have the focus if top level
 |      for this widget gets the focus from the window manager.
 |
 |  focus_set(self)
 |      Direct input focus to this widget.
 |
 |      If the application currently does not have the focus
 |      this widget will get the focus if the application gets
 |      the focus through the window manager.
 |
 |  getboolean(self, s)
 |      Return a boolean value for Tcl boolean values true and false given as parameter.
 |
 |  getdouble(self, s)
 |
 |  getint(self, s)
 |
 |  getvar(self, name='PY_VAR')
 |      Return value of Tcl variable NAME.
 |
 |  grab_current(self)
 |      Return widget which has currently the grab in this application
 |      or None.
 |
 |  grab_release(self)
 |      Release grab for this widget if currently set.
 |
 |  grab_set(self)
 |      Set grab for this widget.
 |
 |      A grab directs all events to this and descendant
 |      widgets in the application.
 |
 |  grab_set_global(self)
 |      Set global grab for this widget.
 |
 |      A global grab directs all events to this and
 |      descendant widgets on the display. Use with caution -
 |      other applications do not get events anymore.
 |
 |  grab_status(self)
 |      Return None, "local" or "global" if this widget has
 |      no, a local or a global grab.
 |
 |  grid_anchor(self, anchor=None)
 |      The anchor value controls how to place the grid within the
 |      master when no row/column has any weight.
 |
 |      The default anchor is nw.
 |
 |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |      Return a tuple of integer coordinates for the bounding
 |      box of this widget controlled by the geometry manager grid.
 |
 |      If COLUMN, ROW is given the bounding box applies from
 |      the cell with row and column 0 to the specified
 |      cell. If COL2 and ROW2 are given the bounding box
 |      starts at that cell.
 |
 |      The returned integers specify the offset of the upper left
 |      corner in the master widget and the width and height.
 |
 |  grid_columnconfigure(self, index, cnf={}, **kw)
 |      Configure column INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the column),
 |      weight (how much does additional space propagate to this column)
 |      and pad (how much space to let additionally).
 |
 |  grid_location(self, x, y)
 |      Return a tuple of column and row which identify the cell
 |      at which the pixel at position X and Y inside the master
 |      widget is located.
 |
 |  grid_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given, the current setting will be returned.
 |
 |  grid_rowconfigure(self, index, cnf={}, **kw)
 |      Configure row INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the row),
 |      weight (how much does additional space propagate to this row)
 |      and pad (how much space to let additionally).
 |
 |  grid_size(self)
 |      Return a tuple of the number of column and rows in the grid.
 |
 |  grid_slaves(self, row=None, column=None)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  image_names(self)
 |      Return a list of all existing image names.
 |
 |  image_types(self)
 |      Return a list of all available image types (e.g. photo bitmap).
 |
 |  info_patchlevel(self)
 |      Returns the exact version of the Tcl library.
 |
 |  keys(self)
 |      Return a list of all resource names of this widget.
 |
 |  lift = tkraise(self, aboveThis=None)
 |
 |  lower(self, belowThis=None)
 |      Lower this widget in the stacking order.
 |
 |  mainloop(self, n=0)
 |      Call the mainloop of Tk.
 |
 |  nametowidget(self, name)
 |      Return the Tkinter instance of a widget identified by
 |      its Tcl name NAME.
 |
 |  option_add(self, pattern, value, priority=None)
 |      Set a VALUE (second parameter) for an option
 |      PATTERN (first parameter).
 |
 |      An optional third parameter gives the numeric priority
 |      (defaults to 80).
 |
 |  option_clear(self)
 |      Clear the option database.
 |
 |      It will be reloaded if option_add is called.
 |
 |  option_get(self, name, className)
 |      Return the value for an option NAME for this widget
 |      with CLASSNAME.
 |
 |      Values with higher priority override lower values.
 |
 |  option_readfile(self, fileName, priority=None)
 |      Read file FILENAME into the option database.
 |
 |      An optional second parameter gives the numeric
 |      priority.
 |
 |  pack_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given the current setting will be returned.
 |
 |  pack_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  place_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  propagate = pack_propagate(self, flag=['_noarg_'])
 |
 |  quit(self)
 |      Quit the Tcl interpreter. All widgets will be destroyed.
 |
 |  register = _register(self, func, subst=None, needcleanup=1)
 |
 |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
 |
 |  selection_clear(self, **kw)
 |      Clear the current X selection.
 |
 |  selection_get(self, **kw)
 |      Return the contents of the current X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection and defaults to PRIMARY.  A keyword
 |      parameter displayof specifies a widget on the display
 |      to use. A keyword parameter type specifies the form of data to be
 |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
 |      before STRING.
 |
 |  selection_handle(self, command, **kw)
 |      Specify a function COMMAND to call if the X
 |      selection owned by this widget is queried by another
 |      application.
 |
 |      This function must return the contents of the
 |      selection. The function will be called with the
 |      arguments OFFSET and LENGTH which allows the chunking
 |      of very long selections. The following keyword
 |      parameters can be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  selection_own(self, **kw)
 |      Become owner of X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection (default PRIMARY).
 |
 |  selection_own_get(self, **kw)
 |      Return owner of X selection.
 |
 |      The following keyword parameter can
 |      be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  send(self, interp, cmd, *args)
 |      Send Tcl command CMD to different interpreter INTERP to be executed.
 |
 |  setvar(self, name='PY_VAR', value='1')
 |      Set Tcl variable NAME to VALUE.
 |
 |  size = grid_size(self)
 |
 |  slaves = pack_slaves(self)
 |
 |  tk_bisque(self)
 |      Change the color scheme to light brown as used in Tk 3.6 and before.
 |
 |  tk_focusFollowsMouse(self)
 |      The widget under mouse will get automatically focus. Can not
 |      be disabled easily.
 |
 |  tk_focusNext(self)
 |      Return the next widget in the focus order which follows
 |      widget which has currently the focus.
 |
 |      The focus order first goes to the next child, then to
 |      the children of the child recursively and then to the
 |      next sibling which is higher in the stacking order.  A
 |      widget is omitted if it has the takefocus resource set
 |      to 0.
 |
 |  tk_focusPrev(self)
 |      Return previous widget in the focus order. See tk_focusNext for details.
 |
 |  tk_setPalette(self, *args, **kw)
 |      Set a new color scheme for all widget elements.
 |
 |      A single color as argument will cause that all colors of Tk
 |      widget elements are derived from this.
 |      Alternatively several keyword parameters and its associated
 |      colors can be given. The following keywords are valid:
 |      activeBackground, foreground, selectColor,
 |      activeForeground, highlightBackground, selectBackground,
 |      background, highlightColor, selectForeground,
 |      disabledForeground, insertBackground, troughColor.
 |
 |  tk_strictMotif(self, boolean=None)
 |      Set Tcl internal variable, whether the look and feel
 |      should adhere to Motif.
 |
 |      A parameter of 1 means adhere to Motif (e.g. no color
 |      change if mouse passes over slider).
 |      Returns the set value.
 |
 |  tkraise(self, aboveThis=None)
 |      Raise this widget in the stacking order.
 |
 |  unbind(self, sequence, funcid=None)
 |      Unbind for this widget the event SEQUENCE.
 |
 |      If FUNCID is given, only unbind the function identified with FUNCID
 |      and also delete the corresponding Tcl command.
 |
 |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
 |      unbound.
 |
 |  unbind_all(self, sequence)
 |      Unbind for all widgets for event SEQUENCE all functions.
 |
 |  unbind_class(self, className, sequence)
 |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
 |      all functions.
 |
 |  update(self)
 |      Enter event loop until all pending events have been processed by Tcl.
 |
 |  update_idletasks(self)
 |      Enter event loop until all idle callbacks have been called. This
 |      will update the display of windows but not process events caused by
 |      the user.
 |
 |  wait_variable(self, name='PY_VAR')
 |      Wait until the variable is modified.
 |
 |      A parameter of type IntVar, StringVar, DoubleVar or
 |      BooleanVar must be given.
 |
 |  wait_visibility(self, window=None)
 |      Wait until the visibility of a WIDGET changes
 |      (e.g. it appears).
 |
 |      If no parameter is given self is used.
 |
 |  wait_window(self, window=None)
 |      Wait until a WIDGET is destroyed.
 |
 |      If no parameter is given self is used.
 |
 |  waitvar = wait_variable(self, name='PY_VAR')
 |
 |  winfo_atom(self, name, displayof=0)
 |      Return integer which represents atom NAME.
 |
 |  winfo_atomname(self, id, displayof=0)
 |      Return name of atom with identifier ID.
 |
 |  winfo_cells(self)
 |      Return number of cells in the colormap for this widget.
 |
 |  winfo_children(self)
 |      Return a list of all widgets which are children of this widget.
 |
 |  winfo_class(self)
 |      Return window class name of this widget.
 |
 |  winfo_colormapfull(self)
 |      Return True if at the last color request the colormap was full.
 |
 |  winfo_containing(self, rootX, rootY, displayof=0)
 |      Return the widget which is at the root coordinates ROOTX, ROOTY.
 |
 |  winfo_depth(self)
 |      Return the number of bits per pixel.
 |
 |  winfo_exists(self)
 |      Return true if this widget exists.
 |
 |  winfo_fpixels(self, number)
 |      Return the number of pixels for the given distance NUMBER
 |      (e.g. "3c") as float.
 |
 |  winfo_geometry(self)
 |      Return geometry string for this widget in the form "widthxheight+X+Y".
 |
 |  winfo_height(self)
 |      Return height of this widget.
 |
 |  winfo_id(self)
 |      Return identifier ID for this widget.
 |
 |  winfo_interps(self, displayof=0)
 |      Return the name of all Tcl interpreters for this display.
 |
 |  winfo_ismapped(self)
 |      Return true if this widget is mapped.
 |
 |  winfo_manager(self)
 |      Return the window manager name for this widget.
 |
 |  winfo_name(self)
 |      Return the name of this widget.
 |
 |  winfo_parent(self)
 |      Return the name of the parent of this widget.
 |
 |  winfo_pathname(self, id, displayof=0)
 |      Return the pathname of the widget given by ID.
 |
 |  winfo_pixels(self, number)
 |      Rounded integer value of winfo_fpixels.
 |
 |  winfo_pointerx(self)
 |      Return the x coordinate of the pointer on the root window.
 |
 |  winfo_pointerxy(self)
 |      Return a tuple of x and y coordinates of the pointer on the root window.
 |
 |  winfo_pointery(self)
 |      Return the y coordinate of the pointer on the root window.
 |
 |  winfo_reqheight(self)
 |      Return requested height of this widget.
 |
 |  winfo_reqwidth(self)
 |      Return requested width of this widget.
 |
 |  winfo_rgb(self, color)
 |      Return a tuple of integer RGB values in range(65536) for color in this widget.
 |
 |  winfo_rootx(self)
 |      Return x coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_rooty(self)
 |      Return y coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_screen(self)
 |      Return the screen name of this widget.
 |
 |  winfo_screencells(self)
 |      Return the number of the cells in the colormap of the screen
 |      of this widget.
 |
 |  winfo_screendepth(self)
 |      Return the number of bits per pixel of the root window of the
 |      screen of this widget.
 |
 |  winfo_screenheight(self)
 |      Return the number of pixels of the height of the screen of this widget
 |      in pixel.
 |
 |  winfo_screenmmheight(self)
 |      Return the number of pixels of the height of the screen of
 |      this widget in mm.
 |
 |  winfo_screenmmwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in mm.
 |
 |  winfo_screenvisual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the default
 |      colormodel of this screen.
 |
 |  winfo_screenwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in pixel.
 |
 |  winfo_server(self)
 |      Return information of the X-Server of the screen of this widget in
 |      the form "XmajorRminor vendor vendorVersion".
 |
 |  winfo_toplevel(self)
 |      Return the toplevel widget of this widget.
 |
 |  winfo_viewable(self)
 |      Return true if the widget and all its higher ancestors are mapped.
 |
 |  winfo_visual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the
 |      colormodel of this widget.
 |
 |  winfo_visualid(self)
 |      Return the X identifier for the visual for this widget.
 |
 |  winfo_visualsavailable(self, includeids=False)
 |      Return a list of all visuals available for the screen
 |      of this widget.
 |
 |      Each item in the list consists of a visual name (see winfo_visual), a
 |      depth and if includeids is true is given also the X identifier.
 |
 |  winfo_vrootheight(self)
 |      Return the height of the virtual root window associated with this
 |      widget in pixels. If there is no virtual root window return the
 |      height of the screen.
 |
 |  winfo_vrootwidth(self)
 |      Return the width of the virtual root window associated with this
 |      widget in pixel. If there is no virtual root window return the
 |      width of the screen.
 |
 |  winfo_vrootx(self)
 |      Return the x offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_vrooty(self)
 |      Return the y offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_width(self)
 |      Return the width of this widget.
 |
 |  winfo_x(self)
 |      Return the x coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  winfo_y(self)
 |      Return the y coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from tkinter.Misc:
 |
 |  __dict__
 |      dictionary for instance variables
 |
 |  __weakref__
 |      list of weak references to the object
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Pack:
 |
 |  forget = pack_forget(self)
 |
 |  info = pack_info(self)
 |
 |  pack = pack_configure(self, cnf={}, **kw)
 |
 |  pack_configure(self, cnf={}, **kw)
 |      Pack a widget in the parent widget. Use as options:
 |      after=widget - pack it after you have packed widget
 |      anchor=NSEW (or subset) - position widget according to
 |                                given direction
 |      before=widget - pack it before you will pack widget
 |      expand=bool - expand widget if parent size grows
 |      fill=NONE or X or Y or BOTH - fill widget if widget grows
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
 |
 |  pack_forget(self)
 |      Unmap this widget and do not use it for the packing order.
 |
 |  pack_info(self)
 |      Return information about the packing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Place:
 |
 |  place = place_configure(self, cnf={}, **kw)
 |
 |  place_configure(self, cnf={}, **kw)
 |      Place a widget in the parent widget. Use as options:
 |      in=master - master relative to which the widget is placed
 |      in_=master - see 'in' option description
 |      x=amount - locate anchor of this widget at position x of master
 |      y=amount - locate anchor of this widget at position y of master
 |      relx=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to width of master (1.0 is right edge)
 |      rely=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to height of master (1.0 is bottom edge)
 |      anchor=NSEW (or subset) - position anchor according to given direction
 |      width=amount - width of this widget in pixel
 |      height=amount - height of this widget in pixel
 |      relwidth=amount - width of this widget between 0.0 and 1.0
 |                        relative to width of master (1.0 is the same width
 |                        as the master)
 |      relheight=amount - height of this widget between 0.0 and 1.0
 |                         relative to height of master (1.0 is the same
 |                         height as the master)
 |      bordermode="inside" or "outside" - whether to take border width of
 |                                         master widget into account
 |
 |  place_forget(self)
 |      Unmap this widget.
 |
 |  place_info(self)
 |      Return information about the placing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Grid:
 |
 |  grid = grid_configure(self, cnf={}, **kw)
 |
 |  grid_configure(self, cnf={}, **kw)
 |      Position a widget in the parent widget in a grid. Use as options:
 |      column=number - use cell identified with given column (starting with 0)
 |      columnspan=number - this widget will span several columns
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      row=number - use cell identified with given row (starting with 0)
 |      rowspan=number - this widget will span several rows
 |      sticky=NSEW - if cell is larger on which sides will this
 |                    widget stick to the cell boundary
 |
 |  grid_forget(self)
 |      Unmap this widget.
 |
 |  grid_info(self)
 |      Return information about the options
 |      for positioning this widget in a grid.
 |
 |  grid_remove(self)
 |      Unmap this widget but remember the grid options.
 |
 |  location = grid_location(self, x, y)

None
Help on class Labelframe in module tkinter.ttk:

class Labelframe(Widget)
 |  Labelframe(master=None, **kw)
 |
 |  Ttk Labelframe widget is a container used to group other widgets
 |  together. It has an optional label, which may be a plain text string
 |  or another widget.
 |
 |  Method resolution order:
 |      Labelframe
 |      Widget
 |      tkinter.Widget
 |      tkinter.BaseWidget
 |      tkinter.Misc
 |      tkinter.Pack
 |      tkinter.Place
 |      tkinter.Grid
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  __init__(self, master=None, **kw)
 |      Construct a Ttk Labelframe with parent master.
 |
 |      STANDARD OPTIONS
 |
 |          class, cursor, style, takefocus
 |
 |      WIDGET-SPECIFIC OPTIONS
 |          labelanchor, text, underline, padding, labelwidget, width,
 |          height
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from Widget:
 |
 |  identify(self, x, y)
 |      Returns the name of the element at position x, y, or the empty
 |      string if the point does not lie within any element.
 |
 |      x and y are pixel coordinates relative to the widget.
 |
 |  instate(self, statespec, callback=None, *args, **kw)
 |      Test the widget's state.
 |
 |      If callback is not specified, returns True if the widget state
 |      matches statespec and False otherwise. If callback is specified,
 |      then it will be invoked with *args, **kw if the widget state
 |      matches statespec. statespec is expected to be a sequence.
 |
 |  state(self, statespec=None)
 |      Modify or inquire widget state.
 |
 |      Widget state is returned if statespec is None, otherwise it is
 |      set according to the statespec flags and then a new state spec
 |      is returned indicating which flags were changed. statespec is
 |      expected to be a sequence.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.BaseWidget:
 |
 |  destroy(self)
 |      Destroy this and all descendants widgets.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Misc:
 |
 |  __getitem__ = cget(self, key)
 |
 |  __repr__(self)
 |      Return repr(self).
 |
 |  __setitem__(self, key, value)
 |
 |  __str__(self)
 |      Return the window path name of this widget.
 |
 |  after(self, ms, func=None, *args)
 |      Call function once after given time.
 |
 |      MS specifies the time in milliseconds. FUNC gives the
 |      function which shall be called. Additional parameters
 |      are given as parameters to the function call.  Return
 |      identifier to cancel scheduling with after_cancel.
 |
 |  after_cancel(self, id)
 |      Cancel scheduling of function identified with ID.
 |
 |      Identifier returned by after or after_idle must be
 |      given as first parameter.
 |
 |  after_idle(self, func, *args)
 |      Call FUNC once if the Tcl main loop has no event to
 |      process.
 |
 |      Return an identifier to cancel the scheduling with
 |      after_cancel.
 |
 |  anchor = grid_anchor(self, anchor=None)
 |
 |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |
 |  bell(self, displayof=0)
 |      Ring a display's bell.
 |
 |  bind(self, sequence=None, func=None, add=None)
 |      Bind to this widget at event SEQUENCE a call to function FUNC.
 |
 |      SEQUENCE is a string of concatenated event
 |      patterns. An event pattern is of the form
 |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
 |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
 |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
 |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
 |      Mod1, M1. TYPE is one of Activate, Enter, Map,
 |      ButtonPress, Button, Expose, Motion, ButtonRelease
 |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
 |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
 |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
 |      Leave and DETAIL is the button number for ButtonPress,
 |      ButtonRelease and DETAIL is the Keysym for KeyPress and
 |      KeyRelease. Examples are
 |      <Control-Button-1> for pressing Control and mouse button 1 or
 |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
 |      An event pattern can also be a virtual event of the form
 |      <<AString>> where AString can be arbitrary. This
 |      event can be generated by event_generate.
 |      If events are concatenated they must appear shortly
 |      after each other.
 |
 |      FUNC will be called if the event sequence occurs with an
 |      instance of Event as argument. If the return value of FUNC is
 |      "break" no further bound function is invoked.
 |
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function.
 |
 |      Bind will return an identifier to allow deletion of the bound function with
 |      unbind without memory leak.
 |
 |      If FUNC or SEQUENCE is omitted the bound function or list
 |      of bound events are returned.
 |
 |  bind_all(self, sequence=None, func=None, add=None)
 |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function. See bind for the return value.
 |
 |  bind_class(self, className, sequence=None, func=None, add=None)
 |      Bind to widgets with bindtag CLASSNAME at event
 |      SEQUENCE a call of function FUNC. An additional
 |      boolean parameter ADD specifies whether FUNC will be
 |      called additionally to the other bound function or
 |      whether it will replace the previous function. See bind for
 |      the return value.
 |
 |  bindtags(self, tagList=None)
 |      Set or get the list of bindtags for this widget.
 |
 |      With no argument return the list of all bindtags associated with
 |      this widget. With a list of strings as argument the bindtags are
 |      set to this list. The bindtags determine in which order events are
 |      processed (see bind).
 |
 |  cget(self, key)
 |      Return the resource value for a KEY given as string.
 |
 |  clipboard_append(self, string, **kw)
 |      Append STRING to the Tk clipboard.
 |
 |      A widget specified at the optional displayof keyword
 |      argument specifies the target display. The clipboard
 |      can be retrieved with selection_get.
 |
 |  clipboard_clear(self, **kw)
 |      Clear the data in the Tk clipboard.
 |
 |      A widget specified for the optional displayof keyword
 |      argument specifies the target display.
 |
 |  clipboard_get(self, **kw)
 |      Retrieve data from the clipboard on window's display.
 |
 |      The window keyword defaults to the root window of the Tkinter
 |      application.
 |
 |      The type keyword specifies the form in which the data is
 |      to be returned and should be an atom name such as STRING
 |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
 |      is to try UTF8_STRING and fall back to STRING.
 |
 |      This command is equivalent to:
 |
 |      selection_get(CLIPBOARD)
 |
 |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
 |
 |  config = configure(self, cnf=None, **kw)
 |
 |  configure(self, cnf=None, **kw)
 |      Configure resources of a widget.
 |
 |      The values for resources are specified as keyword
 |      arguments. To get an overview about
 |      the allowed keyword arguments call the method keys.
 |
 |  deletecommand(self, name)
 |      Internal function.
 |
 |      Delete the Tcl command provided in NAME.
 |
 |  event_add(self, virtual, *sequences)
 |      Bind a virtual event VIRTUAL (of the form <<Name>>)
 |      to an event SEQUENCE such that the virtual event is triggered
 |      whenever SEQUENCE occurs.
 |
 |  event_delete(self, virtual, *sequences)
 |      Unbind a virtual event VIRTUAL from SEQUENCE.
 |
 |  event_generate(self, sequence, **kw)
 |      Generate an event SEQUENCE. Additional
 |      keyword arguments specify parameter of the event
 |      (e.g. x, y, rootx, rooty).
 |
 |  event_info(self, virtual=None)
 |      Return a list of all virtual events or the information
 |      about the SEQUENCE bound to the virtual event VIRTUAL.
 |
 |  focus = focus_set(self)
 |
 |  focus_displayof(self)
 |      Return the widget which has currently the focus on the
 |      display where this widget is located.
 |
 |      Return None if the application does not have the focus.
 |
 |  focus_force(self)
 |      Direct input focus to this widget even if the
 |      application does not have the focus. Use with
 |      caution!
 |
 |  focus_get(self)
 |      Return the widget which has currently the focus in the
 |      application.
 |
 |      Use focus_displayof to allow working with several
 |      displays. Return None if application does not have
 |      the focus.
 |
 |  focus_lastfor(self)
 |      Return the widget which would have the focus if top level
 |      for this widget gets the focus from the window manager.
 |
 |  focus_set(self)
 |      Direct input focus to this widget.
 |
 |      If the application currently does not have the focus
 |      this widget will get the focus if the application gets
 |      the focus through the window manager.
 |
 |  getboolean(self, s)
 |      Return a boolean value for Tcl boolean values true and false given as parameter.
 |
 |  getdouble(self, s)
 |
 |  getint(self, s)
 |
 |  getvar(self, name='PY_VAR')
 |      Return value of Tcl variable NAME.
 |
 |  grab_current(self)
 |      Return widget which has currently the grab in this application
 |      or None.
 |
 |  grab_release(self)
 |      Release grab for this widget if currently set.
 |
 |  grab_set(self)
 |      Set grab for this widget.
 |
 |      A grab directs all events to this and descendant
 |      widgets in the application.
 |
 |  grab_set_global(self)
 |      Set global grab for this widget.
 |
 |      A global grab directs all events to this and
 |      descendant widgets on the display. Use with caution -
 |      other applications do not get events anymore.
 |
 |  grab_status(self)
 |      Return None, "local" or "global" if this widget has
 |      no, a local or a global grab.
 |
 |  grid_anchor(self, anchor=None)
 |      The anchor value controls how to place the grid within the
 |      master when no row/column has any weight.
 |
 |      The default anchor is nw.
 |
 |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |      Return a tuple of integer coordinates for the bounding
 |      box of this widget controlled by the geometry manager grid.
 |
 |      If COLUMN, ROW is given the bounding box applies from
 |      the cell with row and column 0 to the specified
 |      cell. If COL2 and ROW2 are given the bounding box
 |      starts at that cell.
 |
 |      The returned integers specify the offset of the upper left
 |      corner in the master widget and the width and height.
 |
 |  grid_columnconfigure(self, index, cnf={}, **kw)
 |      Configure column INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the column),
 |      weight (how much does additional space propagate to this column)
 |      and pad (how much space to let additionally).
 |
 |  grid_location(self, x, y)
 |      Return a tuple of column and row which identify the cell
 |      at which the pixel at position X and Y inside the master
 |      widget is located.
 |
 |  grid_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given, the current setting will be returned.
 |
 |  grid_rowconfigure(self, index, cnf={}, **kw)
 |      Configure row INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the row),
 |      weight (how much does additional space propagate to this row)
 |      and pad (how much space to let additionally).
 |
 |  grid_size(self)
 |      Return a tuple of the number of column and rows in the grid.
 |
 |  grid_slaves(self, row=None, column=None)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  image_names(self)
 |      Return a list of all existing image names.
 |
 |  image_types(self)
 |      Return a list of all available image types (e.g. photo bitmap).
 |
 |  info_patchlevel(self)
 |      Returns the exact version of the Tcl library.
 |
 |  keys(self)
 |      Return a list of all resource names of this widget.
 |
 |  lift = tkraise(self, aboveThis=None)
 |
 |  lower(self, belowThis=None)
 |      Lower this widget in the stacking order.
 |
 |  mainloop(self, n=0)
 |      Call the mainloop of Tk.
 |
 |  nametowidget(self, name)
 |      Return the Tkinter instance of a widget identified by
 |      its Tcl name NAME.
 |
 |  option_add(self, pattern, value, priority=None)
 |      Set a VALUE (second parameter) for an option
 |      PATTERN (first parameter).
 |
 |      An optional third parameter gives the numeric priority
 |      (defaults to 80).
 |
 |  option_clear(self)
 |      Clear the option database.
 |
 |      It will be reloaded if option_add is called.
 |
 |  option_get(self, name, className)
 |      Return the value for an option NAME for this widget
 |      with CLASSNAME.
 |
 |      Values with higher priority override lower values.
 |
 |  option_readfile(self, fileName, priority=None)
 |      Read file FILENAME into the option database.
 |
 |      An optional second parameter gives the numeric
 |      priority.
 |
 |  pack_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given the current setting will be returned.
 |
 |  pack_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  place_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  propagate = pack_propagate(self, flag=['_noarg_'])
 |
 |  quit(self)
 |      Quit the Tcl interpreter. All widgets will be destroyed.
 |
 |  register = _register(self, func, subst=None, needcleanup=1)
 |
 |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
 |
 |  selection_clear(self, **kw)
 |      Clear the current X selection.
 |
 |  selection_get(self, **kw)
 |      Return the contents of the current X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection and defaults to PRIMARY.  A keyword
 |      parameter displayof specifies a widget on the display
 |      to use. A keyword parameter type specifies the form of data to be
 |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
 |      before STRING.
 |
 |  selection_handle(self, command, **kw)
 |      Specify a function COMMAND to call if the X
 |      selection owned by this widget is queried by another
 |      application.
 |
 |      This function must return the contents of the
 |      selection. The function will be called with the
 |      arguments OFFSET and LENGTH which allows the chunking
 |      of very long selections. The following keyword
 |      parameters can be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  selection_own(self, **kw)
 |      Become owner of X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection (default PRIMARY).
 |
 |  selection_own_get(self, **kw)
 |      Return owner of X selection.
 |
 |      The following keyword parameter can
 |      be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  send(self, interp, cmd, *args)
 |      Send Tcl command CMD to different interpreter INTERP to be executed.
 |
 |  setvar(self, name='PY_VAR', value='1')
 |      Set Tcl variable NAME to VALUE.
 |
 |  size = grid_size(self)
 |
 |  slaves = pack_slaves(self)
 |
 |  tk_bisque(self)
 |      Change the color scheme to light brown as used in Tk 3.6 and before.
 |
 |  tk_focusFollowsMouse(self)
 |      The widget under mouse will get automatically focus. Can not
 |      be disabled easily.
 |
 |  tk_focusNext(self)
 |      Return the next widget in the focus order which follows
 |      widget which has currently the focus.
 |
 |      The focus order first goes to the next child, then to
 |      the children of the child recursively and then to the
 |      next sibling which is higher in the stacking order.  A
 |      widget is omitted if it has the takefocus resource set
 |      to 0.
 |
 |  tk_focusPrev(self)
 |      Return previous widget in the focus order. See tk_focusNext for details.
 |
 |  tk_setPalette(self, *args, **kw)
 |      Set a new color scheme for all widget elements.
 |
 |      A single color as argument will cause that all colors of Tk
 |      widget elements are derived from this.
 |      Alternatively several keyword parameters and its associated
 |      colors can be given. The following keywords are valid:
 |      activeBackground, foreground, selectColor,
 |      activeForeground, highlightBackground, selectBackground,
 |      background, highlightColor, selectForeground,
 |      disabledForeground, insertBackground, troughColor.
 |
 |  tk_strictMotif(self, boolean=None)
 |      Set Tcl internal variable, whether the look and feel
 |      should adhere to Motif.
 |
 |      A parameter of 1 means adhere to Motif (e.g. no color
 |      change if mouse passes over slider).
 |      Returns the set value.
 |
 |  tkraise(self, aboveThis=None)
 |      Raise this widget in the stacking order.
 |
 |  unbind(self, sequence, funcid=None)
 |      Unbind for this widget the event SEQUENCE.
 |
 |      If FUNCID is given, only unbind the function identified with FUNCID
 |      and also delete the corresponding Tcl command.
 |
 |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
 |      unbound.
 |
 |  unbind_all(self, sequence)
 |      Unbind for all widgets for event SEQUENCE all functions.
 |
 |  unbind_class(self, className, sequence)
 |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
 |      all functions.
 |
 |  update(self)
 |      Enter event loop until all pending events have been processed by Tcl.
 |
 |  update_idletasks(self)
 |      Enter event loop until all idle callbacks have been called. This
 |      will update the display of windows but not process events caused by
 |      the user.
 |
 |  wait_variable(self, name='PY_VAR')
 |      Wait until the variable is modified.
 |
 |      A parameter of type IntVar, StringVar, DoubleVar or
 |      BooleanVar must be given.
 |
 |  wait_visibility(self, window=None)
 |      Wait until the visibility of a WIDGET changes
 |      (e.g. it appears).
 |
 |      If no parameter is given self is used.
 |
 |  wait_window(self, window=None)
 |      Wait until a WIDGET is destroyed.
 |
 |      If no parameter is given self is used.
 |
 |  waitvar = wait_variable(self, name='PY_VAR')
 |
 |  winfo_atom(self, name, displayof=0)
 |      Return integer which represents atom NAME.
 |
 |  winfo_atomname(self, id, displayof=0)
 |      Return name of atom with identifier ID.
 |
 |  winfo_cells(self)
 |      Return number of cells in the colormap for this widget.
 |
 |  winfo_children(self)
 |      Return a list of all widgets which are children of this widget.
 |
 |  winfo_class(self)
 |      Return window class name of this widget.
 |
 |  winfo_colormapfull(self)
 |      Return True if at the last color request the colormap was full.
 |
 |  winfo_containing(self, rootX, rootY, displayof=0)
 |      Return the widget which is at the root coordinates ROOTX, ROOTY.
 |
 |  winfo_depth(self)
 |      Return the number of bits per pixel.
 |
 |  winfo_exists(self)
 |      Return true if this widget exists.
 |
 |  winfo_fpixels(self, number)
 |      Return the number of pixels for the given distance NUMBER
 |      (e.g. "3c") as float.
 |
 |  winfo_geometry(self)
 |      Return geometry string for this widget in the form "widthxheight+X+Y".
 |
 |  winfo_height(self)
 |      Return height of this widget.
 |
 |  winfo_id(self)
 |      Return identifier ID for this widget.
 |
 |  winfo_interps(self, displayof=0)
 |      Return the name of all Tcl interpreters for this display.
 |
 |  winfo_ismapped(self)
 |      Return true if this widget is mapped.
 |
 |  winfo_manager(self)
 |      Return the window manager name for this widget.
 |
 |  winfo_name(self)
 |      Return the name of this widget.
 |
 |  winfo_parent(self)
 |      Return the name of the parent of this widget.
 |
 |  winfo_pathname(self, id, displayof=0)
 |      Return the pathname of the widget given by ID.
 |
 |  winfo_pixels(self, number)
 |      Rounded integer value of winfo_fpixels.
 |
 |  winfo_pointerx(self)
 |      Return the x coordinate of the pointer on the root window.
 |
 |  winfo_pointerxy(self)
 |      Return a tuple of x and y coordinates of the pointer on the root window.
 |
 |  winfo_pointery(self)
 |      Return the y coordinate of the pointer on the root window.
 |
 |  winfo_reqheight(self)
 |      Return requested height of this widget.
 |
 |  winfo_reqwidth(self)
 |      Return requested width of this widget.
 |
 |  winfo_rgb(self, color)
 |      Return a tuple of integer RGB values in range(65536) for color in this widget.
 |
 |  winfo_rootx(self)
 |      Return x coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_rooty(self)
 |      Return y coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_screen(self)
 |      Return the screen name of this widget.
 |
 |  winfo_screencells(self)
 |      Return the number of the cells in the colormap of the screen
 |      of this widget.
 |
 |  winfo_screendepth(self)
 |      Return the number of bits per pixel of the root window of the
 |      screen of this widget.
 |
 |  winfo_screenheight(self)
 |      Return the number of pixels of the height of the screen of this widget
 |      in pixel.
 |
 |  winfo_screenmmheight(self)
 |      Return the number of pixels of the height of the screen of
 |      this widget in mm.
 |
 |  winfo_screenmmwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in mm.
 |
 |  winfo_screenvisual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the default
 |      colormodel of this screen.
 |
 |  winfo_screenwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in pixel.
 |
 |  winfo_server(self)
 |      Return information of the X-Server of the screen of this widget in
 |      the form "XmajorRminor vendor vendorVersion".
 |
 |  winfo_toplevel(self)
 |      Return the toplevel widget of this widget.
 |
 |  winfo_viewable(self)
 |      Return true if the widget and all its higher ancestors are mapped.
 |
 |  winfo_visual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the
 |      colormodel of this widget.
 |
 |  winfo_visualid(self)
 |      Return the X identifier for the visual for this widget.
 |
 |  winfo_visualsavailable(self, includeids=False)
 |      Return a list of all visuals available for the screen
 |      of this widget.
 |
 |      Each item in the list consists of a visual name (see winfo_visual), a
 |      depth and if includeids is true is given also the X identifier.
 |
 |  winfo_vrootheight(self)
 |      Return the height of the virtual root window associated with this
 |      widget in pixels. If there is no virtual root window return the
 |      height of the screen.
 |
 |  winfo_vrootwidth(self)
 |      Return the width of the virtual root window associated with this
 |      widget in pixel. If there is no virtual root window return the
 |      width of the screen.
 |
 |  winfo_vrootx(self)
 |      Return the x offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_vrooty(self)
 |      Return the y offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_width(self)
 |      Return the width of this widget.
 |
 |  winfo_x(self)
 |      Return the x coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  winfo_y(self)
 |      Return the y coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from tkinter.Misc:
 |
 |  __dict__
 |      dictionary for instance variables
 |
 |  __weakref__
 |      list of weak references to the object
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Pack:
 |
 |  forget = pack_forget(self)
 |
 |  info = pack_info(self)
 |
 |  pack = pack_configure(self, cnf={}, **kw)
 |
 |  pack_configure(self, cnf={}, **kw)
 |      Pack a widget in the parent widget. Use as options:
 |      after=widget - pack it after you have packed widget
 |      anchor=NSEW (or subset) - position widget according to
 |                                given direction
 |      before=widget - pack it before you will pack widget
 |      expand=bool - expand widget if parent size grows
 |      fill=NONE or X or Y or BOTH - fill widget if widget grows
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
 |
 |  pack_forget(self)
 |      Unmap this widget and do not use it for the packing order.
 |
 |  pack_info(self)
 |      Return information about the packing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Place:
 |
 |  place = place_configure(self, cnf={}, **kw)
 |
 |  place_configure(self, cnf={}, **kw)
 |      Place a widget in the parent widget. Use as options:
 |      in=master - master relative to which the widget is placed
 |      in_=master - see 'in' option description
 |      x=amount - locate anchor of this widget at position x of master
 |      y=amount - locate anchor of this widget at position y of master
 |      relx=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to width of master (1.0 is right edge)
 |      rely=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to height of master (1.0 is bottom edge)
 |      anchor=NSEW (or subset) - position anchor according to given direction
 |      width=amount - width of this widget in pixel
 |      height=amount - height of this widget in pixel
 |      relwidth=amount - width of this widget between 0.0 and 1.0
 |                        relative to width of master (1.0 is the same width
 |                        as the master)
 |      relheight=amount - height of this widget between 0.0 and 1.0
 |                         relative to height of master (1.0 is the same
 |                         height as the master)
 |      bordermode="inside" or "outside" - whether to take border width of
 |                                         master widget into account
 |
 |  place_forget(self)
 |      Unmap this widget.
 |
 |  place_info(self)
 |      Return information about the placing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Grid:
 |
 |  grid = grid_configure(self, cnf={}, **kw)
 |
 |  grid_configure(self, cnf={}, **kw)
 |      Position a widget in the parent widget in a grid. Use as options:
 |      column=number - use cell identified with given column (starting with 0)
 |      columnspan=number - this widget will span several columns
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      row=number - use cell identified with given row (starting with 0)
 |      rowspan=number - this widget will span several rows
 |      sticky=NSEW - if cell is larger on which sides will this
 |                    widget stick to the cell boundary
 |
 |  grid_forget(self)
 |      Unmap this widget.
 |
 |  grid_info(self)
 |      Return information about the options
 |      for positioning this widget in a grid.
 |
 |  grid_remove(self)
 |      Unmap this widget but remember the grid options.
 |
 |  location = grid_location(self, x, y)

None
Help on class LabeledScale in module tkinter.ttk:

class LabeledScale(Frame)
 |  LabeledScale(master=None, variable=None, from_=0, to=10, **kw)
 |
 |  A Ttk Scale widget with a Ttk Label widget indicating its
 |  current value.
 |
 |  The Ttk Scale can be accessed through instance.scale, and Ttk Label
 |  can be accessed through instance.label
 |
 |  Method resolution order:
 |      LabeledScale
 |      Frame
 |      Widget
 |      tkinter.Widget
 |      tkinter.BaseWidget
 |      tkinter.Misc
 |      tkinter.Pack
 |      tkinter.Place
 |      tkinter.Grid
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  __init__(self, master=None, variable=None, from_=0, to=10, **kw)
 |      Construct a horizontal LabeledScale with parent master, a
 |      variable to be associated with the Ttk Scale widget and its range.
 |      If variable is not specified, a tkinter.IntVar is created.
 |
 |      WIDGET-SPECIFIC OPTIONS
 |
 |          compound: 'top' or 'bottom'
 |              Specifies how to display the label relative to the scale.
 |              Defaults to 'top'.
 |
 |  destroy(self)
 |      Destroy this widget and possibly its associated variable.
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |
 |  value
 |      Return current scale value.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from Widget:
 |
 |  identify(self, x, y)
 |      Returns the name of the element at position x, y, or the empty
 |      string if the point does not lie within any element.
 |
 |      x and y are pixel coordinates relative to the widget.
 |
 |  instate(self, statespec, callback=None, *args, **kw)
 |      Test the widget's state.
 |
 |      If callback is not specified, returns True if the widget state
 |      matches statespec and False otherwise. If callback is specified,
 |      then it will be invoked with *args, **kw if the widget state
 |      matches statespec. statespec is expected to be a sequence.
 |
 |  state(self, statespec=None)
 |      Modify or inquire widget state.
 |
 |      Widget state is returned if statespec is None, otherwise it is
 |      set according to the statespec flags and then a new state spec
 |      is returned indicating which flags were changed. statespec is
 |      expected to be a sequence.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Misc:
 |
 |  __getitem__ = cget(self, key)
 |
 |  __repr__(self)
 |      Return repr(self).
 |
 |  __setitem__(self, key, value)
 |
 |  __str__(self)
 |      Return the window path name of this widget.
 |
 |  after(self, ms, func=None, *args)
 |      Call function once after given time.
 |
 |      MS specifies the time in milliseconds. FUNC gives the
 |      function which shall be called. Additional parameters
 |      are given as parameters to the function call.  Return
 |      identifier to cancel scheduling with after_cancel.
 |
 |  after_cancel(self, id)
 |      Cancel scheduling of function identified with ID.
 |
 |      Identifier returned by after or after_idle must be
 |      given as first parameter.
 |
 |  after_idle(self, func, *args)
 |      Call FUNC once if the Tcl main loop has no event to
 |      process.
 |
 |      Return an identifier to cancel the scheduling with
 |      after_cancel.
 |
 |  anchor = grid_anchor(self, anchor=None)
 |
 |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |
 |  bell(self, displayof=0)
 |      Ring a display's bell.
 |
 |  bind(self, sequence=None, func=None, add=None)
 |      Bind to this widget at event SEQUENCE a call to function FUNC.
 |
 |      SEQUENCE is a string of concatenated event
 |      patterns. An event pattern is of the form
 |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
 |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
 |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
 |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
 |      Mod1, M1. TYPE is one of Activate, Enter, Map,
 |      ButtonPress, Button, Expose, Motion, ButtonRelease
 |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
 |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
 |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
 |      Leave and DETAIL is the button number for ButtonPress,
 |      ButtonRelease and DETAIL is the Keysym for KeyPress and
 |      KeyRelease. Examples are
 |      <Control-Button-1> for pressing Control and mouse button 1 or
 |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
 |      An event pattern can also be a virtual event of the form
 |      <<AString>> where AString can be arbitrary. This
 |      event can be generated by event_generate.
 |      If events are concatenated they must appear shortly
 |      after each other.
 |
 |      FUNC will be called if the event sequence occurs with an
 |      instance of Event as argument. If the return value of FUNC is
 |      "break" no further bound function is invoked.
 |
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function.
 |
 |      Bind will return an identifier to allow deletion of the bound function with
 |      unbind without memory leak.
 |
 |      If FUNC or SEQUENCE is omitted the bound function or list
 |      of bound events are returned.
 |
 |  bind_all(self, sequence=None, func=None, add=None)
 |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function. See bind for the return value.
 |
 |  bind_class(self, className, sequence=None, func=None, add=None)
 |      Bind to widgets with bindtag CLASSNAME at event
 |      SEQUENCE a call of function FUNC. An additional
 |      boolean parameter ADD specifies whether FUNC will be
 |      called additionally to the other bound function or
 |      whether it will replace the previous function. See bind for
 |      the return value.
 |
 |  bindtags(self, tagList=None)
 |      Set or get the list of bindtags for this widget.
 |
 |      With no argument return the list of all bindtags associated with
 |      this widget. With a list of strings as argument the bindtags are
 |      set to this list. The bindtags determine in which order events are
 |      processed (see bind).
 |
 |  cget(self, key)
 |      Return the resource value for a KEY given as string.
 |
 |  clipboard_append(self, string, **kw)
 |      Append STRING to the Tk clipboard.
 |
 |      A widget specified at the optional displayof keyword
 |      argument specifies the target display. The clipboard
 |      can be retrieved with selection_get.
 |
 |  clipboard_clear(self, **kw)
 |      Clear the data in the Tk clipboard.
 |
 |      A widget specified for the optional displayof keyword
 |      argument specifies the target display.
 |
 |  clipboard_get(self, **kw)
 |      Retrieve data from the clipboard on window's display.
 |
 |      The window keyword defaults to the root window of the Tkinter
 |      application.
 |
 |      The type keyword specifies the form in which the data is
 |      to be returned and should be an atom name such as STRING
 |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
 |      is to try UTF8_STRING and fall back to STRING.
 |
 |      This command is equivalent to:
 |
 |      selection_get(CLIPBOARD)
 |
 |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
 |
 |  config = configure(self, cnf=None, **kw)
 |
 |  configure(self, cnf=None, **kw)
 |      Configure resources of a widget.
 |
 |      The values for resources are specified as keyword
 |      arguments. To get an overview about
 |      the allowed keyword arguments call the method keys.
 |
 |  deletecommand(self, name)
 |      Internal function.
 |
 |      Delete the Tcl command provided in NAME.
 |
 |  event_add(self, virtual, *sequences)
 |      Bind a virtual event VIRTUAL (of the form <<Name>>)
 |      to an event SEQUENCE such that the virtual event is triggered
 |      whenever SEQUENCE occurs.
 |
 |  event_delete(self, virtual, *sequences)
 |      Unbind a virtual event VIRTUAL from SEQUENCE.
 |
 |  event_generate(self, sequence, **kw)
 |      Generate an event SEQUENCE. Additional
 |      keyword arguments specify parameter of the event
 |      (e.g. x, y, rootx, rooty).
 |
 |  event_info(self, virtual=None)
 |      Return a list of all virtual events or the information
 |      about the SEQUENCE bound to the virtual event VIRTUAL.
 |
 |  focus = focus_set(self)
 |
 |  focus_displayof(self)
 |      Return the widget which has currently the focus on the
 |      display where this widget is located.
 |
 |      Return None if the application does not have the focus.
 |
 |  focus_force(self)
 |      Direct input focus to this widget even if the
 |      application does not have the focus. Use with
 |      caution!
 |
 |  focus_get(self)
 |      Return the widget which has currently the focus in the
 |      application.
 |
 |      Use focus_displayof to allow working with several
 |      displays. Return None if application does not have
 |      the focus.
 |
 |  focus_lastfor(self)
 |      Return the widget which would have the focus if top level
 |      for this widget gets the focus from the window manager.
 |
 |  focus_set(self)
 |      Direct input focus to this widget.
 |
 |      If the application currently does not have the focus
 |      this widget will get the focus if the application gets
 |      the focus through the window manager.
 |
 |  getboolean(self, s)
 |      Return a boolean value for Tcl boolean values true and false given as parameter.
 |
 |  getdouble(self, s)
 |
 |  getint(self, s)
 |
 |  getvar(self, name='PY_VAR')
 |      Return value of Tcl variable NAME.
 |
 |  grab_current(self)
 |      Return widget which has currently the grab in this application
 |      or None.
 |
 |  grab_release(self)
 |      Release grab for this widget if currently set.
 |
 |  grab_set(self)
 |      Set grab for this widget.
 |
 |      A grab directs all events to this and descendant
 |      widgets in the application.
 |
 |  grab_set_global(self)
 |      Set global grab for this widget.
 |
 |      A global grab directs all events to this and
 |      descendant widgets on the display. Use with caution -
 |      other applications do not get events anymore.
 |
 |  grab_status(self)
 |      Return None, "local" or "global" if this widget has
 |      no, a local or a global grab.
 |
 |  grid_anchor(self, anchor=None)
 |      The anchor value controls how to place the grid within the
 |      master when no row/column has any weight.
 |
 |      The default anchor is nw.
 |
 |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |      Return a tuple of integer coordinates for the bounding
 |      box of this widget controlled by the geometry manager grid.
 |
 |      If COLUMN, ROW is given the bounding box applies from
 |      the cell with row and column 0 to the specified
 |      cell. If COL2 and ROW2 are given the bounding box
 |      starts at that cell.
 |
 |      The returned integers specify the offset of the upper left
 |      corner in the master widget and the width and height.
 |
 |  grid_columnconfigure(self, index, cnf={}, **kw)
 |      Configure column INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the column),
 |      weight (how much does additional space propagate to this column)
 |      and pad (how much space to let additionally).
 |
 |  grid_location(self, x, y)
 |      Return a tuple of column and row which identify the cell
 |      at which the pixel at position X and Y inside the master
 |      widget is located.
 |
 |  grid_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given, the current setting will be returned.
 |
 |  grid_rowconfigure(self, index, cnf={}, **kw)
 |      Configure row INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the row),
 |      weight (how much does additional space propagate to this row)
 |      and pad (how much space to let additionally).
 |
 |  grid_size(self)
 |      Return a tuple of the number of column and rows in the grid.
 |
 |  grid_slaves(self, row=None, column=None)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  image_names(self)
 |      Return a list of all existing image names.
 |
 |  image_types(self)
 |      Return a list of all available image types (e.g. photo bitmap).
 |
 |  info_patchlevel(self)
 |      Returns the exact version of the Tcl library.
 |
 |  keys(self)
 |      Return a list of all resource names of this widget.
 |
 |  lift = tkraise(self, aboveThis=None)
 |
 |  lower(self, belowThis=None)
 |      Lower this widget in the stacking order.
 |
 |  mainloop(self, n=0)
 |      Call the mainloop of Tk.
 |
 |  nametowidget(self, name)
 |      Return the Tkinter instance of a widget identified by
 |      its Tcl name NAME.
 |
 |  option_add(self, pattern, value, priority=None)
 |      Set a VALUE (second parameter) for an option
 |      PATTERN (first parameter).
 |
 |      An optional third parameter gives the numeric priority
 |      (defaults to 80).
 |
 |  option_clear(self)
 |      Clear the option database.
 |
 |      It will be reloaded if option_add is called.
 |
 |  option_get(self, name, className)
 |      Return the value for an option NAME for this widget
 |      with CLASSNAME.
 |
 |      Values with higher priority override lower values.
 |
 |  option_readfile(self, fileName, priority=None)
 |      Read file FILENAME into the option database.
 |
 |      An optional second parameter gives the numeric
 |      priority.
 |
 |  pack_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given the current setting will be returned.
 |
 |  pack_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  place_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  propagate = pack_propagate(self, flag=['_noarg_'])
 |
 |  quit(self)
 |      Quit the Tcl interpreter. All widgets will be destroyed.
 |
 |  register = _register(self, func, subst=None, needcleanup=1)
 |
 |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
 |
 |  selection_clear(self, **kw)
 |      Clear the current X selection.
 |
 |  selection_get(self, **kw)
 |      Return the contents of the current X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection and defaults to PRIMARY.  A keyword
 |      parameter displayof specifies a widget on the display
 |      to use. A keyword parameter type specifies the form of data to be
 |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
 |      before STRING.
 |
 |  selection_handle(self, command, **kw)
 |      Specify a function COMMAND to call if the X
 |      selection owned by this widget is queried by another
 |      application.
 |
 |      This function must return the contents of the
 |      selection. The function will be called with the
 |      arguments OFFSET and LENGTH which allows the chunking
 |      of very long selections. The following keyword
 |      parameters can be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  selection_own(self, **kw)
 |      Become owner of X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection (default PRIMARY).
 |
 |  selection_own_get(self, **kw)
 |      Return owner of X selection.
 |
 |      The following keyword parameter can
 |      be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  send(self, interp, cmd, *args)
 |      Send Tcl command CMD to different interpreter INTERP to be executed.
 |
 |  setvar(self, name='PY_VAR', value='1')
 |      Set Tcl variable NAME to VALUE.
 |
 |  size = grid_size(self)
 |
 |  slaves = pack_slaves(self)
 |
 |  tk_bisque(self)
 |      Change the color scheme to light brown as used in Tk 3.6 and before.
 |
 |  tk_focusFollowsMouse(self)
 |      The widget under mouse will get automatically focus. Can not
 |      be disabled easily.
 |
 |  tk_focusNext(self)
 |      Return the next widget in the focus order which follows
 |      widget which has currently the focus.
 |
 |      The focus order first goes to the next child, then to
 |      the children of the child recursively and then to the
 |      next sibling which is higher in the stacking order.  A
 |      widget is omitted if it has the takefocus resource set
 |      to 0.
 |
 |  tk_focusPrev(self)
 |      Return previous widget in the focus order. See tk_focusNext for details.
 |
 |  tk_setPalette(self, *args, **kw)
 |      Set a new color scheme for all widget elements.
 |
 |      A single color as argument will cause that all colors of Tk
 |      widget elements are derived from this.
 |      Alternatively several keyword parameters and its associated
 |      colors can be given. The following keywords are valid:
 |      activeBackground, foreground, selectColor,
 |      activeForeground, highlightBackground, selectBackground,
 |      background, highlightColor, selectForeground,
 |      disabledForeground, insertBackground, troughColor.
 |
 |  tk_strictMotif(self, boolean=None)
 |      Set Tcl internal variable, whether the look and feel
 |      should adhere to Motif.
 |
 |      A parameter of 1 means adhere to Motif (e.g. no color
 |      change if mouse passes over slider).
 |      Returns the set value.
 |
 |  tkraise(self, aboveThis=None)
 |      Raise this widget in the stacking order.
 |
 |  unbind(self, sequence, funcid=None)
 |      Unbind for this widget the event SEQUENCE.
 |
 |      If FUNCID is given, only unbind the function identified with FUNCID
 |      and also delete the corresponding Tcl command.
 |
 |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
 |      unbound.
 |
 |  unbind_all(self, sequence)
 |      Unbind for all widgets for event SEQUENCE all functions.
 |
 |  unbind_class(self, className, sequence)
 |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
 |      all functions.
 |
 |  update(self)
 |      Enter event loop until all pending events have been processed by Tcl.
 |
 |  update_idletasks(self)
 |      Enter event loop until all idle callbacks have been called. This
 |      will update the display of windows but not process events caused by
 |      the user.
 |
 |  wait_variable(self, name='PY_VAR')
 |      Wait until the variable is modified.
 |
 |      A parameter of type IntVar, StringVar, DoubleVar or
 |      BooleanVar must be given.
 |
 |  wait_visibility(self, window=None)
 |      Wait until the visibility of a WIDGET changes
 |      (e.g. it appears).
 |
 |      If no parameter is given self is used.
 |
 |  wait_window(self, window=None)
 |      Wait until a WIDGET is destroyed.
 |
 |      If no parameter is given self is used.
 |
 |  waitvar = wait_variable(self, name='PY_VAR')
 |
 |  winfo_atom(self, name, displayof=0)
 |      Return integer which represents atom NAME.
 |
 |  winfo_atomname(self, id, displayof=0)
 |      Return name of atom with identifier ID.
 |
 |  winfo_cells(self)
 |      Return number of cells in the colormap for this widget.
 |
 |  winfo_children(self)
 |      Return a list of all widgets which are children of this widget.
 |
 |  winfo_class(self)
 |      Return window class name of this widget.
 |
 |  winfo_colormapfull(self)
 |      Return True if at the last color request the colormap was full.
 |
 |  winfo_containing(self, rootX, rootY, displayof=0)
 |      Return the widget which is at the root coordinates ROOTX, ROOTY.
 |
 |  winfo_depth(self)
 |      Return the number of bits per pixel.
 |
 |  winfo_exists(self)
 |      Return true if this widget exists.
 |
 |  winfo_fpixels(self, number)
 |      Return the number of pixels for the given distance NUMBER
 |      (e.g. "3c") as float.
 |
 |  winfo_geometry(self)
 |      Return geometry string for this widget in the form "widthxheight+X+Y".
 |
 |  winfo_height(self)
 |      Return height of this widget.
 |
 |  winfo_id(self)
 |      Return identifier ID for this widget.
 |
 |  winfo_interps(self, displayof=0)
 |      Return the name of all Tcl interpreters for this display.
 |
 |  winfo_ismapped(self)
 |      Return true if this widget is mapped.
 |
 |  winfo_manager(self)
 |      Return the window manager name for this widget.
 |
 |  winfo_name(self)
 |      Return the name of this widget.
 |
 |  winfo_parent(self)
 |      Return the name of the parent of this widget.
 |
 |  winfo_pathname(self, id, displayof=0)
 |      Return the pathname of the widget given by ID.
 |
 |  winfo_pixels(self, number)
 |      Rounded integer value of winfo_fpixels.
 |
 |  winfo_pointerx(self)
 |      Return the x coordinate of the pointer on the root window.
 |
 |  winfo_pointerxy(self)
 |      Return a tuple of x and y coordinates of the pointer on the root window.
 |
 |  winfo_pointery(self)
 |      Return the y coordinate of the pointer on the root window.
 |
 |  winfo_reqheight(self)
 |      Return requested height of this widget.
 |
 |  winfo_reqwidth(self)
 |      Return requested width of this widget.
 |
 |  winfo_rgb(self, color)
 |      Return a tuple of integer RGB values in range(65536) for color in this widget.
 |
 |  winfo_rootx(self)
 |      Return x coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_rooty(self)
 |      Return y coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_screen(self)
 |      Return the screen name of this widget.
 |
 |  winfo_screencells(self)
 |      Return the number of the cells in the colormap of the screen
 |      of this widget.
 |
 |  winfo_screendepth(self)
 |      Return the number of bits per pixel of the root window of the
 |      screen of this widget.
 |
 |  winfo_screenheight(self)
 |      Return the number of pixels of the height of the screen of this widget
 |      in pixel.
 |
 |  winfo_screenmmheight(self)
 |      Return the number of pixels of the height of the screen of
 |      this widget in mm.
 |
 |  winfo_screenmmwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in mm.
 |
 |  winfo_screenvisual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the default
 |      colormodel of this screen.
 |
 |  winfo_screenwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in pixel.
 |
 |  winfo_server(self)
 |      Return information of the X-Server of the screen of this widget in
 |      the form "XmajorRminor vendor vendorVersion".
 |
 |  winfo_toplevel(self)
 |      Return the toplevel widget of this widget.
 |
 |  winfo_viewable(self)
 |      Return true if the widget and all its higher ancestors are mapped.
 |
 |  winfo_visual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the
 |      colormodel of this widget.
 |
 |  winfo_visualid(self)
 |      Return the X identifier for the visual for this widget.
 |
 |  winfo_visualsavailable(self, includeids=False)
 |      Return a list of all visuals available for the screen
 |      of this widget.
 |
 |      Each item in the list consists of a visual name (see winfo_visual), a
 |      depth and if includeids is true is given also the X identifier.
 |
 |  winfo_vrootheight(self)
 |      Return the height of the virtual root window associated with this
 |      widget in pixels. If there is no virtual root window return the
 |      height of the screen.
 |
 |  winfo_vrootwidth(self)
 |      Return the width of the virtual root window associated with this
 |      widget in pixel. If there is no virtual root window return the
 |      width of the screen.
 |
 |  winfo_vrootx(self)
 |      Return the x offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_vrooty(self)
 |      Return the y offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_width(self)
 |      Return the width of this widget.
 |
 |  winfo_x(self)
 |      Return the x coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  winfo_y(self)
 |      Return the y coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from tkinter.Misc:
 |
 |  __dict__
 |      dictionary for instance variables
 |
 |  __weakref__
 |      list of weak references to the object
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Pack:
 |
 |  forget = pack_forget(self)
 |
 |  info = pack_info(self)
 |
 |  pack = pack_configure(self, cnf={}, **kw)
 |
 |  pack_configure(self, cnf={}, **kw)
 |      Pack a widget in the parent widget. Use as options:
 |      after=widget - pack it after you have packed widget
 |      anchor=NSEW (or subset) - position widget according to
 |                                given direction
 |      before=widget - pack it before you will pack widget
 |      expand=bool - expand widget if parent size grows
 |      fill=NONE or X or Y or BOTH - fill widget if widget grows
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
 |
 |  pack_forget(self)
 |      Unmap this widget and do not use it for the packing order.
 |
 |  pack_info(self)
 |      Return information about the packing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Place:
 |
 |  place = place_configure(self, cnf={}, **kw)
 |
 |  place_configure(self, cnf={}, **kw)
 |      Place a widget in the parent widget. Use as options:
 |      in=master - master relative to which the widget is placed
 |      in_=master - see 'in' option description
 |      x=amount - locate anchor of this widget at position x of master
 |      y=amount - locate anchor of this widget at position y of master
 |      relx=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to width of master (1.0 is right edge)
 |      rely=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to height of master (1.0 is bottom edge)
 |      anchor=NSEW (or subset) - position anchor according to given direction
 |      width=amount - width of this widget in pixel
 |      height=amount - height of this widget in pixel
 |      relwidth=amount - width of this widget between 0.0 and 1.0
 |                        relative to width of master (1.0 is the same width
 |                        as the master)
 |      relheight=amount - height of this widget between 0.0 and 1.0
 |                         relative to height of master (1.0 is the same
 |                         height as the master)
 |      bordermode="inside" or "outside" - whether to take border width of
 |                                         master widget into account
 |
 |  place_forget(self)
 |      Unmap this widget.
 |
 |  place_info(self)
 |      Return information about the placing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Grid:
 |
 |  grid = grid_configure(self, cnf={}, **kw)
 |
 |  grid_configure(self, cnf={}, **kw)
 |      Position a widget in the parent widget in a grid. Use as options:
 |      column=number - use cell identified with given column (starting with 0)
 |      columnspan=number - this widget will span several columns
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      row=number - use cell identified with given row (starting with 0)
 |      rowspan=number - this widget will span several rows
 |      sticky=NSEW - if cell is larger on which sides will this
 |                    widget stick to the cell boundary
 |
 |  grid_forget(self)
 |      Unmap this widget.
 |
 |  grid_info(self)
 |      Return information about the options
 |      for positioning this widget in a grid.
 |
 |  grid_remove(self)
 |      Unmap this widget but remember the grid options.
 |
 |  location = grid_location(self, x, y)

None
Help on class Labelframe in module tkinter.ttk:

class Labelframe(Widget)
 |  Labelframe(master=None, **kw)
 |
 |  Ttk Labelframe widget is a container used to group other widgets
 |  together. It has an optional label, which may be a plain text string
 |  or another widget.
 |
 |  Method resolution order:
 |      Labelframe
 |      Widget
 |      tkinter.Widget
 |      tkinter.BaseWidget
 |      tkinter.Misc
 |      tkinter.Pack
 |      tkinter.Place
 |      tkinter.Grid
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  __init__(self, master=None, **kw)
 |      Construct a Ttk Labelframe with parent master.
 |
 |      STANDARD OPTIONS
 |
 |          class, cursor, style, takefocus
 |
 |      WIDGET-SPECIFIC OPTIONS
 |          labelanchor, text, underline, padding, labelwidget, width,
 |          height
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from Widget:
 |
 |  identify(self, x, y)
 |      Returns the name of the element at position x, y, or the empty
 |      string if the point does not lie within any element.
 |
 |      x and y are pixel coordinates relative to the widget.
 |
 |  instate(self, statespec, callback=None, *args, **kw)
 |      Test the widget's state.
 |
 |      If callback is not specified, returns True if the widget state
 |      matches statespec and False otherwise. If callback is specified,
 |      then it will be invoked with *args, **kw if the widget state
 |      matches statespec. statespec is expected to be a sequence.
 |
 |  state(self, statespec=None)
 |      Modify or inquire widget state.
 |
 |      Widget state is returned if statespec is None, otherwise it is
 |      set according to the statespec flags and then a new state spec
 |      is returned indicating which flags were changed. statespec is
 |      expected to be a sequence.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.BaseWidget:
 |
 |  destroy(self)
 |      Destroy this and all descendants widgets.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Misc:
 |
 |  __getitem__ = cget(self, key)
 |
 |  __repr__(self)
 |      Return repr(self).
 |
 |  __setitem__(self, key, value)
 |
 |  __str__(self)
 |      Return the window path name of this widget.
 |
 |  after(self, ms, func=None, *args)
 |      Call function once after given time.
 |
 |      MS specifies the time in milliseconds. FUNC gives the
 |      function which shall be called. Additional parameters
 |      are given as parameters to the function call.  Return
 |      identifier to cancel scheduling with after_cancel.
 |
 |  after_cancel(self, id)
 |      Cancel scheduling of function identified with ID.
 |
 |      Identifier returned by after or after_idle must be
 |      given as first parameter.
 |
 |  after_idle(self, func, *args)
 |      Call FUNC once if the Tcl main loop has no event to
 |      process.
 |
 |      Return an identifier to cancel the scheduling with
 |      after_cancel.
 |
 |  anchor = grid_anchor(self, anchor=None)
 |
 |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |
 |  bell(self, displayof=0)
 |      Ring a display's bell.
 |
 |  bind(self, sequence=None, func=None, add=None)
 |      Bind to this widget at event SEQUENCE a call to function FUNC.
 |
 |      SEQUENCE is a string of concatenated event
 |      patterns. An event pattern is of the form
 |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
 |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
 |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
 |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
 |      Mod1, M1. TYPE is one of Activate, Enter, Map,
 |      ButtonPress, Button, Expose, Motion, ButtonRelease
 |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
 |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
 |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
 |      Leave and DETAIL is the button number for ButtonPress,
 |      ButtonRelease and DETAIL is the Keysym for KeyPress and
 |      KeyRelease. Examples are
 |      <Control-Button-1> for pressing Control and mouse button 1 or
 |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
 |      An event pattern can also be a virtual event of the form
 |      <<AString>> where AString can be arbitrary. This
 |      event can be generated by event_generate.
 |      If events are concatenated they must appear shortly
 |      after each other.
 |
 |      FUNC will be called if the event sequence occurs with an
 |      instance of Event as argument. If the return value of FUNC is
 |      "break" no further bound function is invoked.
 |
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function.
 |
 |      Bind will return an identifier to allow deletion of the bound function with
 |      unbind without memory leak.
 |
 |      If FUNC or SEQUENCE is omitted the bound function or list
 |      of bound events are returned.
 |
 |  bind_all(self, sequence=None, func=None, add=None)
 |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function. See bind for the return value.
 |
 |  bind_class(self, className, sequence=None, func=None, add=None)
 |      Bind to widgets with bindtag CLASSNAME at event
 |      SEQUENCE a call of function FUNC. An additional
 |      boolean parameter ADD specifies whether FUNC will be
 |      called additionally to the other bound function or
 |      whether it will replace the previous function. See bind for
 |      the return value.
 |
 |  bindtags(self, tagList=None)
 |      Set or get the list of bindtags for this widget.
 |
 |      With no argument return the list of all bindtags associated with
 |      this widget. With a list of strings as argument the bindtags are
 |      set to this list. The bindtags determine in which order events are
 |      processed (see bind).
 |
 |  cget(self, key)
 |      Return the resource value for a KEY given as string.
 |
 |  clipboard_append(self, string, **kw)
 |      Append STRING to the Tk clipboard.
 |
 |      A widget specified at the optional displayof keyword
 |      argument specifies the target display. The clipboard
 |      can be retrieved with selection_get.
 |
 |  clipboard_clear(self, **kw)
 |      Clear the data in the Tk clipboard.
 |
 |      A widget specified for the optional displayof keyword
 |      argument specifies the target display.
 |
 |  clipboard_get(self, **kw)
 |      Retrieve data from the clipboard on window's display.
 |
 |      The window keyword defaults to the root window of the Tkinter
 |      application.
 |
 |      The type keyword specifies the form in which the data is
 |      to be returned and should be an atom name such as STRING
 |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
 |      is to try UTF8_STRING and fall back to STRING.
 |
 |      This command is equivalent to:
 |
 |      selection_get(CLIPBOARD)
 |
 |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
 |
 |  config = configure(self, cnf=None, **kw)
 |
 |  configure(self, cnf=None, **kw)
 |      Configure resources of a widget.
 |
 |      The values for resources are specified as keyword
 |      arguments. To get an overview about
 |      the allowed keyword arguments call the method keys.
 |
 |  deletecommand(self, name)
 |      Internal function.
 |
 |      Delete the Tcl command provided in NAME.
 |
 |  event_add(self, virtual, *sequences)
 |      Bind a virtual event VIRTUAL (of the form <<Name>>)
 |      to an event SEQUENCE such that the virtual event is triggered
 |      whenever SEQUENCE occurs.
 |
 |  event_delete(self, virtual, *sequences)
 |      Unbind a virtual event VIRTUAL from SEQUENCE.
 |
 |  event_generate(self, sequence, **kw)
 |      Generate an event SEQUENCE. Additional
 |      keyword arguments specify parameter of the event
 |      (e.g. x, y, rootx, rooty).
 |
 |  event_info(self, virtual=None)
 |      Return a list of all virtual events or the information
 |      about the SEQUENCE bound to the virtual event VIRTUAL.
 |
 |  focus = focus_set(self)
 |
 |  focus_displayof(self)
 |      Return the widget which has currently the focus on the
 |      display where this widget is located.
 |
 |      Return None if the application does not have the focus.
 |
 |  focus_force(self)
 |      Direct input focus to this widget even if the
 |      application does not have the focus. Use with
 |      caution!
 |
 |  focus_get(self)
 |      Return the widget which has currently the focus in the
 |      application.
 |
 |      Use focus_displayof to allow working with several
 |      displays. Return None if application does not have
 |      the focus.
 |
 |  focus_lastfor(self)
 |      Return the widget which would have the focus if top level
 |      for this widget gets the focus from the window manager.
 |
 |  focus_set(self)
 |      Direct input focus to this widget.
 |
 |      If the application currently does not have the focus
 |      this widget will get the focus if the application gets
 |      the focus through the window manager.
 |
 |  getboolean(self, s)
 |      Return a boolean value for Tcl boolean values true and false given as parameter.
 |
 |  getdouble(self, s)
 |
 |  getint(self, s)
 |
 |  getvar(self, name='PY_VAR')
 |      Return value of Tcl variable NAME.
 |
 |  grab_current(self)
 |      Return widget which has currently the grab in this application
 |      or None.
 |
 |  grab_release(self)
 |      Release grab for this widget if currently set.
 |
 |  grab_set(self)
 |      Set grab for this widget.
 |
 |      A grab directs all events to this and descendant
 |      widgets in the application.
 |
 |  grab_set_global(self)
 |      Set global grab for this widget.
 |
 |      A global grab directs all events to this and
 |      descendant widgets on the display. Use with caution -
 |      other applications do not get events anymore.
 |
 |  grab_status(self)
 |      Return None, "local" or "global" if this widget has
 |      no, a local or a global grab.
 |
 |  grid_anchor(self, anchor=None)
 |      The anchor value controls how to place the grid within the
 |      master when no row/column has any weight.
 |
 |      The default anchor is nw.
 |
 |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |      Return a tuple of integer coordinates for the bounding
 |      box of this widget controlled by the geometry manager grid.
 |
 |      If COLUMN, ROW is given the bounding box applies from
 |      the cell with row and column 0 to the specified
 |      cell. If COL2 and ROW2 are given the bounding box
 |      starts at that cell.
 |
 |      The returned integers specify the offset of the upper left
 |      corner in the master widget and the width and height.
 |
 |  grid_columnconfigure(self, index, cnf={}, **kw)
 |      Configure column INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the column),
 |      weight (how much does additional space propagate to this column)
 |      and pad (how much space to let additionally).
 |
 |  grid_location(self, x, y)
 |      Return a tuple of column and row which identify the cell
 |      at which the pixel at position X and Y inside the master
 |      widget is located.
 |
 |  grid_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given, the current setting will be returned.
 |
 |  grid_rowconfigure(self, index, cnf={}, **kw)
 |      Configure row INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the row),
 |      weight (how much does additional space propagate to this row)
 |      and pad (how much space to let additionally).
 |
 |  grid_size(self)
 |      Return a tuple of the number of column and rows in the grid.
 |
 |  grid_slaves(self, row=None, column=None)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  image_names(self)
 |      Return a list of all existing image names.
 |
 |  image_types(self)
 |      Return a list of all available image types (e.g. photo bitmap).
 |
 |  info_patchlevel(self)
 |      Returns the exact version of the Tcl library.
 |
 |  keys(self)
 |      Return a list of all resource names of this widget.
 |
 |  lift = tkraise(self, aboveThis=None)
 |
 |  lower(self, belowThis=None)
 |      Lower this widget in the stacking order.
 |
 |  mainloop(self, n=0)
 |      Call the mainloop of Tk.
 |
 |  nametowidget(self, name)
 |      Return the Tkinter instance of a widget identified by
 |      its Tcl name NAME.
 |
 |  option_add(self, pattern, value, priority=None)
 |      Set a VALUE (second parameter) for an option
 |      PATTERN (first parameter).
 |
 |      An optional third parameter gives the numeric priority
 |      (defaults to 80).
 |
 |  option_clear(self)
 |      Clear the option database.
 |
 |      It will be reloaded if option_add is called.
 |
 |  option_get(self, name, className)
 |      Return the value for an option NAME for this widget
 |      with CLASSNAME.
 |
 |      Values with higher priority override lower values.
 |
 |  option_readfile(self, fileName, priority=None)
 |      Read file FILENAME into the option database.
 |
 |      An optional second parameter gives the numeric
 |      priority.
 |
 |  pack_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given the current setting will be returned.
 |
 |  pack_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  place_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  propagate = pack_propagate(self, flag=['_noarg_'])
 |
 |  quit(self)
 |      Quit the Tcl interpreter. All widgets will be destroyed.
 |
 |  register = _register(self, func, subst=None, needcleanup=1)
 |
 |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
 |
 |  selection_clear(self, **kw)
 |      Clear the current X selection.
 |
 |  selection_get(self, **kw)
 |      Return the contents of the current X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection and defaults to PRIMARY.  A keyword
 |      parameter displayof specifies a widget on the display
 |      to use. A keyword parameter type specifies the form of data to be
 |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
 |      before STRING.
 |
 |  selection_handle(self, command, **kw)
 |      Specify a function COMMAND to call if the X
 |      selection owned by this widget is queried by another
 |      application.
 |
 |      This function must return the contents of the
 |      selection. The function will be called with the
 |      arguments OFFSET and LENGTH which allows the chunking
 |      of very long selections. The following keyword
 |      parameters can be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  selection_own(self, **kw)
 |      Become owner of X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection (default PRIMARY).
 |
 |  selection_own_get(self, **kw)
 |      Return owner of X selection.
 |
 |      The following keyword parameter can
 |      be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  send(self, interp, cmd, *args)
 |      Send Tcl command CMD to different interpreter INTERP to be executed.
 |
 |  setvar(self, name='PY_VAR', value='1')
 |      Set Tcl variable NAME to VALUE.
 |
 |  size = grid_size(self)
 |
 |  slaves = pack_slaves(self)
 |
 |  tk_bisque(self)
 |      Change the color scheme to light brown as used in Tk 3.6 and before.
 |
 |  tk_focusFollowsMouse(self)
 |      The widget under mouse will get automatically focus. Can not
 |      be disabled easily.
 |
 |  tk_focusNext(self)
 |      Return the next widget in the focus order which follows
 |      widget which has currently the focus.
 |
 |      The focus order first goes to the next child, then to
 |      the children of the child recursively and then to the
 |      next sibling which is higher in the stacking order.  A
 |      widget is omitted if it has the takefocus resource set
 |      to 0.
 |
 |  tk_focusPrev(self)
 |      Return previous widget in the focus order. See tk_focusNext for details.
 |
 |  tk_setPalette(self, *args, **kw)
 |      Set a new color scheme for all widget elements.
 |
 |      A single color as argument will cause that all colors of Tk
 |      widget elements are derived from this.
 |      Alternatively several keyword parameters and its associated
 |      colors can be given. The following keywords are valid:
 |      activeBackground, foreground, selectColor,
 |      activeForeground, highlightBackground, selectBackground,
 |      background, highlightColor, selectForeground,
 |      disabledForeground, insertBackground, troughColor.
 |
 |  tk_strictMotif(self, boolean=None)
 |      Set Tcl internal variable, whether the look and feel
 |      should adhere to Motif.
 |
 |      A parameter of 1 means adhere to Motif (e.g. no color
 |      change if mouse passes over slider).
 |      Returns the set value.
 |
 |  tkraise(self, aboveThis=None)
 |      Raise this widget in the stacking order.
 |
 |  unbind(self, sequence, funcid=None)
 |      Unbind for this widget the event SEQUENCE.
 |
 |      If FUNCID is given, only unbind the function identified with FUNCID
 |      and also delete the corresponding Tcl command.
 |
 |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
 |      unbound.
 |
 |  unbind_all(self, sequence)
 |      Unbind for all widgets for event SEQUENCE all functions.
 |
 |  unbind_class(self, className, sequence)
 |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
 |      all functions.
 |
 |  update(self)
 |      Enter event loop until all pending events have been processed by Tcl.
 |
 |  update_idletasks(self)
 |      Enter event loop until all idle callbacks have been called. This
 |      will update the display of windows but not process events caused by
 |      the user.
 |
 |  wait_variable(self, name='PY_VAR')
 |      Wait until the variable is modified.
 |
 |      A parameter of type IntVar, StringVar, DoubleVar or
 |      BooleanVar must be given.
 |
 |  wait_visibility(self, window=None)
 |      Wait until the visibility of a WIDGET changes
 |      (e.g. it appears).
 |
 |      If no parameter is given self is used.
 |
 |  wait_window(self, window=None)
 |      Wait until a WIDGET is destroyed.
 |
 |      If no parameter is given self is used.
 |
 |  waitvar = wait_variable(self, name='PY_VAR')
 |
 |  winfo_atom(self, name, displayof=0)
 |      Return integer which represents atom NAME.
 |
 |  winfo_atomname(self, id, displayof=0)
 |      Return name of atom with identifier ID.
 |
 |  winfo_cells(self)
 |      Return number of cells in the colormap for this widget.
 |
 |  winfo_children(self)
 |      Return a list of all widgets which are children of this widget.
 |
 |  winfo_class(self)
 |      Return window class name of this widget.
 |
 |  winfo_colormapfull(self)
 |      Return True if at the last color request the colormap was full.
 |
 |  winfo_containing(self, rootX, rootY, displayof=0)
 |      Return the widget which is at the root coordinates ROOTX, ROOTY.
 |
 |  winfo_depth(self)
 |      Return the number of bits per pixel.
 |
 |  winfo_exists(self)
 |      Return true if this widget exists.
 |
 |  winfo_fpixels(self, number)
 |      Return the number of pixels for the given distance NUMBER
 |      (e.g. "3c") as float.
 |
 |  winfo_geometry(self)
 |      Return geometry string for this widget in the form "widthxheight+X+Y".
 |
 |  winfo_height(self)
 |      Return height of this widget.
 |
 |  winfo_id(self)
 |      Return identifier ID for this widget.
 |
 |  winfo_interps(self, displayof=0)
 |      Return the name of all Tcl interpreters for this display.
 |
 |  winfo_ismapped(self)
 |      Return true if this widget is mapped.
 |
 |  winfo_manager(self)
 |      Return the window manager name for this widget.
 |
 |  winfo_name(self)
 |      Return the name of this widget.
 |
 |  winfo_parent(self)
 |      Return the name of the parent of this widget.
 |
 |  winfo_pathname(self, id, displayof=0)
 |      Return the pathname of the widget given by ID.
 |
 |  winfo_pixels(self, number)
 |      Rounded integer value of winfo_fpixels.
 |
 |  winfo_pointerx(self)
 |      Return the x coordinate of the pointer on the root window.
 |
 |  winfo_pointerxy(self)
 |      Return a tuple of x and y coordinates of the pointer on the root window.
 |
 |  winfo_pointery(self)
 |      Return the y coordinate of the pointer on the root window.
 |
 |  winfo_reqheight(self)
 |      Return requested height of this widget.
 |
 |  winfo_reqwidth(self)
 |      Return requested width of this widget.
 |
 |  winfo_rgb(self, color)
 |      Return a tuple of integer RGB values in range(65536) for color in this widget.
 |
 |  winfo_rootx(self)
 |      Return x coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_rooty(self)
 |      Return y coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_screen(self)
 |      Return the screen name of this widget.
 |
 |  winfo_screencells(self)
 |      Return the number of the cells in the colormap of the screen
 |      of this widget.
 |
 |  winfo_screendepth(self)
 |      Return the number of bits per pixel of the root window of the
 |      screen of this widget.
 |
 |  winfo_screenheight(self)
 |      Return the number of pixels of the height of the screen of this widget
 |      in pixel.
 |
 |  winfo_screenmmheight(self)
 |      Return the number of pixels of the height of the screen of
 |      this widget in mm.
 |
 |  winfo_screenmmwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in mm.
 |
 |  winfo_screenvisual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the default
 |      colormodel of this screen.
 |
 |  winfo_screenwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in pixel.
 |
 |  winfo_server(self)
 |      Return information of the X-Server of the screen of this widget in
 |      the form "XmajorRminor vendor vendorVersion".
 |
 |  winfo_toplevel(self)
 |      Return the toplevel widget of this widget.
 |
 |  winfo_viewable(self)
 |      Return true if the widget and all its higher ancestors are mapped.
 |
 |  winfo_visual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the
 |      colormodel of this widget.
 |
 |  winfo_visualid(self)
 |      Return the X identifier for the visual for this widget.
 |
 |  winfo_visualsavailable(self, includeids=False)
 |      Return a list of all visuals available for the screen
 |      of this widget.
 |
 |      Each item in the list consists of a visual name (see winfo_visual), a
 |      depth and if includeids is true is given also the X identifier.
 |
 |  winfo_vrootheight(self)
 |      Return the height of the virtual root window associated with this
 |      widget in pixels. If there is no virtual root window return the
 |      height of the screen.
 |
 |  winfo_vrootwidth(self)
 |      Return the width of the virtual root window associated with this
 |      widget in pixel. If there is no virtual root window return the
 |      width of the screen.
 |
 |  winfo_vrootx(self)
 |      Return the x offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_vrooty(self)
 |      Return the y offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_width(self)
 |      Return the width of this widget.
 |
 |  winfo_x(self)
 |      Return the x coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  winfo_y(self)
 |      Return the y coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from tkinter.Misc:
 |
 |  __dict__
 |      dictionary for instance variables
 |
 |  __weakref__
 |      list of weak references to the object
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Pack:
 |
 |  forget = pack_forget(self)
 |
 |  info = pack_info(self)
 |
 |  pack = pack_configure(self, cnf={}, **kw)
 |
 |  pack_configure(self, cnf={}, **kw)
 |      Pack a widget in the parent widget. Use as options:
 |      after=widget - pack it after you have packed widget
 |      anchor=NSEW (or subset) - position widget according to
 |                                given direction
 |      before=widget - pack it before you will pack widget
 |      expand=bool - expand widget if parent size grows
 |      fill=NONE or X or Y or BOTH - fill widget if widget grows
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
 |
 |  pack_forget(self)
 |      Unmap this widget and do not use it for the packing order.
 |
 |  pack_info(self)
 |      Return information about the packing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Place:
 |
 |  place = place_configure(self, cnf={}, **kw)
 |
 |  place_configure(self, cnf={}, **kw)
 |      Place a widget in the parent widget. Use as options:
 |      in=master - master relative to which the widget is placed
 |      in_=master - see 'in' option description
 |      x=amount - locate anchor of this widget at position x of master
 |      y=amount - locate anchor of this widget at position y of master
 |      relx=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to width of master (1.0 is right edge)
 |      rely=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to height of master (1.0 is bottom edge)
 |      anchor=NSEW (or subset) - position anchor according to given direction
 |      width=amount - width of this widget in pixel
 |      height=amount - height of this widget in pixel
 |      relwidth=amount - width of this widget between 0.0 and 1.0
 |                        relative to width of master (1.0 is the same width
 |                        as the master)
 |      relheight=amount - height of this widget between 0.0 and 1.0
 |                         relative to height of master (1.0 is the same
 |                         height as the master)
 |      bordermode="inside" or "outside" - whether to take border width of
 |                                         master widget into account
 |
 |  place_forget(self)
 |      Unmap this widget.
 |
 |  place_info(self)
 |      Return information about the placing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Grid:
 |
 |  grid = grid_configure(self, cnf={}, **kw)
 |
 |  grid_configure(self, cnf={}, **kw)
 |      Position a widget in the parent widget in a grid. Use as options:
 |      column=number - use cell identified with given column (starting with 0)
 |      columnspan=number - this widget will span several columns
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      row=number - use cell identified with given row (starting with 0)
 |      rowspan=number - this widget will span several rows
 |      sticky=NSEW - if cell is larger on which sides will this
 |                    widget stick to the cell boundary
 |
 |  grid_forget(self)
 |      Unmap this widget.
 |
 |  grid_info(self)
 |      Return information about the options
 |      for positioning this widget in a grid.
 |
 |  grid_remove(self)
 |      Unmap this widget but remember the grid options.
 |
 |  location = grid_location(self, x, y)

None
Help on class Menubutton in module tkinter.ttk:

class Menubutton(Widget)
 |  Menubutton(master=None, **kw)
 |
 |  Ttk Menubutton widget displays a textual label and/or image, and
 |  displays a menu when pressed.
 |
 |  Method resolution order:
 |      Menubutton
 |      Widget
 |      tkinter.Widget
 |      tkinter.BaseWidget
 |      tkinter.Misc
 |      tkinter.Pack
 |      tkinter.Place
 |      tkinter.Grid
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  __init__(self, master=None, **kw)
 |      Construct a Ttk Menubutton with parent master.
 |
 |      STANDARD OPTIONS
 |
 |          class, compound, cursor, image, state, style, takefocus,
 |          text, textvariable, underline, width
 |
 |      WIDGET-SPECIFIC OPTIONS
 |
 |          direction, menu
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from Widget:
 |
 |  identify(self, x, y)
 |      Returns the name of the element at position x, y, or the empty
 |      string if the point does not lie within any element.
 |
 |      x and y are pixel coordinates relative to the widget.
 |
 |  instate(self, statespec, callback=None, *args, **kw)
 |      Test the widget's state.
 |
 |      If callback is not specified, returns True if the widget state
 |      matches statespec and False otherwise. If callback is specified,
 |      then it will be invoked with *args, **kw if the widget state
 |      matches statespec. statespec is expected to be a sequence.
 |
 |  state(self, statespec=None)
 |      Modify or inquire widget state.
 |
 |      Widget state is returned if statespec is None, otherwise it is
 |      set according to the statespec flags and then a new state spec
 |      is returned indicating which flags were changed. statespec is
 |      expected to be a sequence.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.BaseWidget:
 |
 |  destroy(self)
 |      Destroy this and all descendants widgets.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Misc:
 |
 |  __getitem__ = cget(self, key)
 |
 |  __repr__(self)
 |      Return repr(self).
 |
 |  __setitem__(self, key, value)
 |
 |  __str__(self)
 |      Return the window path name of this widget.
 |
 |  after(self, ms, func=None, *args)
 |      Call function once after given time.
 |
 |      MS specifies the time in milliseconds. FUNC gives the
 |      function which shall be called. Additional parameters
 |      are given as parameters to the function call.  Return
 |      identifier to cancel scheduling with after_cancel.
 |
 |  after_cancel(self, id)
 |      Cancel scheduling of function identified with ID.
 |
 |      Identifier returned by after or after_idle must be
 |      given as first parameter.
 |
 |  after_idle(self, func, *args)
 |      Call FUNC once if the Tcl main loop has no event to
 |      process.
 |
 |      Return an identifier to cancel the scheduling with
 |      after_cancel.
 |
 |  anchor = grid_anchor(self, anchor=None)
 |
 |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |
 |  bell(self, displayof=0)
 |      Ring a display's bell.
 |
 |  bind(self, sequence=None, func=None, add=None)
 |      Bind to this widget at event SEQUENCE a call to function FUNC.
 |
 |      SEQUENCE is a string of concatenated event
 |      patterns. An event pattern is of the form
 |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
 |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
 |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
 |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
 |      Mod1, M1. TYPE is one of Activate, Enter, Map,
 |      ButtonPress, Button, Expose, Motion, ButtonRelease
 |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
 |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
 |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
 |      Leave and DETAIL is the button number for ButtonPress,
 |      ButtonRelease and DETAIL is the Keysym for KeyPress and
 |      KeyRelease. Examples are
 |      <Control-Button-1> for pressing Control and mouse button 1 or
 |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
 |      An event pattern can also be a virtual event of the form
 |      <<AString>> where AString can be arbitrary. This
 |      event can be generated by event_generate.
 |      If events are concatenated they must appear shortly
 |      after each other.
 |
 |      FUNC will be called if the event sequence occurs with an
 |      instance of Event as argument. If the return value of FUNC is
 |      "break" no further bound function is invoked.
 |
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function.
 |
 |      Bind will return an identifier to allow deletion of the bound function with
 |      unbind without memory leak.
 |
 |      If FUNC or SEQUENCE is omitted the bound function or list
 |      of bound events are returned.
 |
 |  bind_all(self, sequence=None, func=None, add=None)
 |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function. See bind for the return value.
 |
 |  bind_class(self, className, sequence=None, func=None, add=None)
 |      Bind to widgets with bindtag CLASSNAME at event
 |      SEQUENCE a call of function FUNC. An additional
 |      boolean parameter ADD specifies whether FUNC will be
 |      called additionally to the other bound function or
 |      whether it will replace the previous function. See bind for
 |      the return value.
 |
 |  bindtags(self, tagList=None)
 |      Set or get the list of bindtags for this widget.
 |
 |      With no argument return the list of all bindtags associated with
 |      this widget. With a list of strings as argument the bindtags are
 |      set to this list. The bindtags determine in which order events are
 |      processed (see bind).
 |
 |  cget(self, key)
 |      Return the resource value for a KEY given as string.
 |
 |  clipboard_append(self, string, **kw)
 |      Append STRING to the Tk clipboard.
 |
 |      A widget specified at the optional displayof keyword
 |      argument specifies the target display. The clipboard
 |      can be retrieved with selection_get.
 |
 |  clipboard_clear(self, **kw)
 |      Clear the data in the Tk clipboard.
 |
 |      A widget specified for the optional displayof keyword
 |      argument specifies the target display.
 |
 |  clipboard_get(self, **kw)
 |      Retrieve data from the clipboard on window's display.
 |
 |      The window keyword defaults to the root window of the Tkinter
 |      application.
 |
 |      The type keyword specifies the form in which the data is
 |      to be returned and should be an atom name such as STRING
 |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
 |      is to try UTF8_STRING and fall back to STRING.
 |
 |      This command is equivalent to:
 |
 |      selection_get(CLIPBOARD)
 |
 |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
 |
 |  config = configure(self, cnf=None, **kw)
 |
 |  configure(self, cnf=None, **kw)
 |      Configure resources of a widget.
 |
 |      The values for resources are specified as keyword
 |      arguments. To get an overview about
 |      the allowed keyword arguments call the method keys.
 |
 |  deletecommand(self, name)
 |      Internal function.
 |
 |      Delete the Tcl command provided in NAME.
 |
 |  event_add(self, virtual, *sequences)
 |      Bind a virtual event VIRTUAL (of the form <<Name>>)
 |      to an event SEQUENCE such that the virtual event is triggered
 |      whenever SEQUENCE occurs.
 |
 |  event_delete(self, virtual, *sequences)
 |      Unbind a virtual event VIRTUAL from SEQUENCE.
 |
 |  event_generate(self, sequence, **kw)
 |      Generate an event SEQUENCE. Additional
 |      keyword arguments specify parameter of the event
 |      (e.g. x, y, rootx, rooty).
 |
 |  event_info(self, virtual=None)
 |      Return a list of all virtual events or the information
 |      about the SEQUENCE bound to the virtual event VIRTUAL.
 |
 |  focus = focus_set(self)
 |
 |  focus_displayof(self)
 |      Return the widget which has currently the focus on the
 |      display where this widget is located.
 |
 |      Return None if the application does not have the focus.
 |
 |  focus_force(self)
 |      Direct input focus to this widget even if the
 |      application does not have the focus. Use with
 |      caution!
 |
 |  focus_get(self)
 |      Return the widget which has currently the focus in the
 |      application.
 |
 |      Use focus_displayof to allow working with several
 |      displays. Return None if application does not have
 |      the focus.
 |
 |  focus_lastfor(self)
 |      Return the widget which would have the focus if top level
 |      for this widget gets the focus from the window manager.
 |
 |  focus_set(self)
 |      Direct input focus to this widget.
 |
 |      If the application currently does not have the focus
 |      this widget will get the focus if the application gets
 |      the focus through the window manager.
 |
 |  getboolean(self, s)
 |      Return a boolean value for Tcl boolean values true and false given as parameter.
 |
 |  getdouble(self, s)
 |
 |  getint(self, s)
 |
 |  getvar(self, name='PY_VAR')
 |      Return value of Tcl variable NAME.
 |
 |  grab_current(self)
 |      Return widget which has currently the grab in this application
 |      or None.
 |
 |  grab_release(self)
 |      Release grab for this widget if currently set.
 |
 |  grab_set(self)
 |      Set grab for this widget.
 |
 |      A grab directs all events to this and descendant
 |      widgets in the application.
 |
 |  grab_set_global(self)
 |      Set global grab for this widget.
 |
 |      A global grab directs all events to this and
 |      descendant widgets on the display. Use with caution -
 |      other applications do not get events anymore.
 |
 |  grab_status(self)
 |      Return None, "local" or "global" if this widget has
 |      no, a local or a global grab.
 |
 |  grid_anchor(self, anchor=None)
 |      The anchor value controls how to place the grid within the
 |      master when no row/column has any weight.
 |
 |      The default anchor is nw.
 |
 |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |      Return a tuple of integer coordinates for the bounding
 |      box of this widget controlled by the geometry manager grid.
 |
 |      If COLUMN, ROW is given the bounding box applies from
 |      the cell with row and column 0 to the specified
 |      cell. If COL2 and ROW2 are given the bounding box
 |      starts at that cell.
 |
 |      The returned integers specify the offset of the upper left
 |      corner in the master widget and the width and height.
 |
 |  grid_columnconfigure(self, index, cnf={}, **kw)
 |      Configure column INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the column),
 |      weight (how much does additional space propagate to this column)
 |      and pad (how much space to let additionally).
 |
 |  grid_location(self, x, y)
 |      Return a tuple of column and row which identify the cell
 |      at which the pixel at position X and Y inside the master
 |      widget is located.
 |
 |  grid_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given, the current setting will be returned.
 |
 |  grid_rowconfigure(self, index, cnf={}, **kw)
 |      Configure row INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the row),
 |      weight (how much does additional space propagate to this row)
 |      and pad (how much space to let additionally).
 |
 |  grid_size(self)
 |      Return a tuple of the number of column and rows in the grid.
 |
 |  grid_slaves(self, row=None, column=None)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  image_names(self)
 |      Return a list of all existing image names.
 |
 |  image_types(self)
 |      Return a list of all available image types (e.g. photo bitmap).
 |
 |  info_patchlevel(self)
 |      Returns the exact version of the Tcl library.
 |
 |  keys(self)
 |      Return a list of all resource names of this widget.
 |
 |  lift = tkraise(self, aboveThis=None)
 |
 |  lower(self, belowThis=None)
 |      Lower this widget in the stacking order.
 |
 |  mainloop(self, n=0)
 |      Call the mainloop of Tk.
 |
 |  nametowidget(self, name)
 |      Return the Tkinter instance of a widget identified by
 |      its Tcl name NAME.
 |
 |  option_add(self, pattern, value, priority=None)
 |      Set a VALUE (second parameter) for an option
 |      PATTERN (first parameter).
 |
 |      An optional third parameter gives the numeric priority
 |      (defaults to 80).
 |
 |  option_clear(self)
 |      Clear the option database.
 |
 |      It will be reloaded if option_add is called.
 |
 |  option_get(self, name, className)
 |      Return the value for an option NAME for this widget
 |      with CLASSNAME.
 |
 |      Values with higher priority override lower values.
 |
 |  option_readfile(self, fileName, priority=None)
 |      Read file FILENAME into the option database.
 |
 |      An optional second parameter gives the numeric
 |      priority.
 |
 |  pack_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given the current setting will be returned.
 |
 |  pack_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  place_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  propagate = pack_propagate(self, flag=['_noarg_'])
 |
 |  quit(self)
 |      Quit the Tcl interpreter. All widgets will be destroyed.
 |
 |  register = _register(self, func, subst=None, needcleanup=1)
 |
 |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
 |
 |  selection_clear(self, **kw)
 |      Clear the current X selection.
 |
 |  selection_get(self, **kw)
 |      Return the contents of the current X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection and defaults to PRIMARY.  A keyword
 |      parameter displayof specifies a widget on the display
 |      to use. A keyword parameter type specifies the form of data to be
 |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
 |      before STRING.
 |
 |  selection_handle(self, command, **kw)
 |      Specify a function COMMAND to call if the X
 |      selection owned by this widget is queried by another
 |      application.
 |
 |      This function must return the contents of the
 |      selection. The function will be called with the
 |      arguments OFFSET and LENGTH which allows the chunking
 |      of very long selections. The following keyword
 |      parameters can be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  selection_own(self, **kw)
 |      Become owner of X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection (default PRIMARY).
 |
 |  selection_own_get(self, **kw)
 |      Return owner of X selection.
 |
 |      The following keyword parameter can
 |      be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  send(self, interp, cmd, *args)
 |      Send Tcl command CMD to different interpreter INTERP to be executed.
 |
 |  setvar(self, name='PY_VAR', value='1')
 |      Set Tcl variable NAME to VALUE.
 |
 |  size = grid_size(self)
 |
 |  slaves = pack_slaves(self)
 |
 |  tk_bisque(self)
 |      Change the color scheme to light brown as used in Tk 3.6 and before.
 |
 |  tk_focusFollowsMouse(self)
 |      The widget under mouse will get automatically focus. Can not
 |      be disabled easily.
 |
 |  tk_focusNext(self)
 |      Return the next widget in the focus order which follows
 |      widget which has currently the focus.
 |
 |      The focus order first goes to the next child, then to
 |      the children of the child recursively and then to the
 |      next sibling which is higher in the stacking order.  A
 |      widget is omitted if it has the takefocus resource set
 |      to 0.
 |
 |  tk_focusPrev(self)
 |      Return previous widget in the focus order. See tk_focusNext for details.
 |
 |  tk_setPalette(self, *args, **kw)
 |      Set a new color scheme for all widget elements.
 |
 |      A single color as argument will cause that all colors of Tk
 |      widget elements are derived from this.
 |      Alternatively several keyword parameters and its associated
 |      colors can be given. The following keywords are valid:
 |      activeBackground, foreground, selectColor,
 |      activeForeground, highlightBackground, selectBackground,
 |      background, highlightColor, selectForeground,
 |      disabledForeground, insertBackground, troughColor.
 |
 |  tk_strictMotif(self, boolean=None)
 |      Set Tcl internal variable, whether the look and feel
 |      should adhere to Motif.
 |
 |      A parameter of 1 means adhere to Motif (e.g. no color
 |      change if mouse passes over slider).
 |      Returns the set value.
 |
 |  tkraise(self, aboveThis=None)
 |      Raise this widget in the stacking order.
 |
 |  unbind(self, sequence, funcid=None)
 |      Unbind for this widget the event SEQUENCE.
 |
 |      If FUNCID is given, only unbind the function identified with FUNCID
 |      and also delete the corresponding Tcl command.
 |
 |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
 |      unbound.
 |
 |  unbind_all(self, sequence)
 |      Unbind for all widgets for event SEQUENCE all functions.
 |
 |  unbind_class(self, className, sequence)
 |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
 |      all functions.
 |
 |  update(self)
 |      Enter event loop until all pending events have been processed by Tcl.
 |
 |  update_idletasks(self)
 |      Enter event loop until all idle callbacks have been called. This
 |      will update the display of windows but not process events caused by
 |      the user.
 |
 |  wait_variable(self, name='PY_VAR')
 |      Wait until the variable is modified.
 |
 |      A parameter of type IntVar, StringVar, DoubleVar or
 |      BooleanVar must be given.
 |
 |  wait_visibility(self, window=None)
 |      Wait until the visibility of a WIDGET changes
 |      (e.g. it appears).
 |
 |      If no parameter is given self is used.
 |
 |  wait_window(self, window=None)
 |      Wait until a WIDGET is destroyed.
 |
 |      If no parameter is given self is used.
 |
 |  waitvar = wait_variable(self, name='PY_VAR')
 |
 |  winfo_atom(self, name, displayof=0)
 |      Return integer which represents atom NAME.
 |
 |  winfo_atomname(self, id, displayof=0)
 |      Return name of atom with identifier ID.
 |
 |  winfo_cells(self)
 |      Return number of cells in the colormap for this widget.
 |
 |  winfo_children(self)
 |      Return a list of all widgets which are children of this widget.
 |
 |  winfo_class(self)
 |      Return window class name of this widget.
 |
 |  winfo_colormapfull(self)
 |      Return True if at the last color request the colormap was full.
 |
 |  winfo_containing(self, rootX, rootY, displayof=0)
 |      Return the widget which is at the root coordinates ROOTX, ROOTY.
 |
 |  winfo_depth(self)
 |      Return the number of bits per pixel.
 |
 |  winfo_exists(self)
 |      Return true if this widget exists.
 |
 |  winfo_fpixels(self, number)
 |      Return the number of pixels for the given distance NUMBER
 |      (e.g. "3c") as float.
 |
 |  winfo_geometry(self)
 |      Return geometry string for this widget in the form "widthxheight+X+Y".
 |
 |  winfo_height(self)
 |      Return height of this widget.
 |
 |  winfo_id(self)
 |      Return identifier ID for this widget.
 |
 |  winfo_interps(self, displayof=0)
 |      Return the name of all Tcl interpreters for this display.
 |
 |  winfo_ismapped(self)
 |      Return true if this widget is mapped.
 |
 |  winfo_manager(self)
 |      Return the window manager name for this widget.
 |
 |  winfo_name(self)
 |      Return the name of this widget.
 |
 |  winfo_parent(self)
 |      Return the name of the parent of this widget.
 |
 |  winfo_pathname(self, id, displayof=0)
 |      Return the pathname of the widget given by ID.
 |
 |  winfo_pixels(self, number)
 |      Rounded integer value of winfo_fpixels.
 |
 |  winfo_pointerx(self)
 |      Return the x coordinate of the pointer on the root window.
 |
 |  winfo_pointerxy(self)
 |      Return a tuple of x and y coordinates of the pointer on the root window.
 |
 |  winfo_pointery(self)
 |      Return the y coordinate of the pointer on the root window.
 |
 |  winfo_reqheight(self)
 |      Return requested height of this widget.
 |
 |  winfo_reqwidth(self)
 |      Return requested width of this widget.
 |
 |  winfo_rgb(self, color)
 |      Return a tuple of integer RGB values in range(65536) for color in this widget.
 |
 |  winfo_rootx(self)
 |      Return x coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_rooty(self)
 |      Return y coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_screen(self)
 |      Return the screen name of this widget.
 |
 |  winfo_screencells(self)
 |      Return the number of the cells in the colormap of the screen
 |      of this widget.
 |
 |  winfo_screendepth(self)
 |      Return the number of bits per pixel of the root window of the
 |      screen of this widget.
 |
 |  winfo_screenheight(self)
 |      Return the number of pixels of the height of the screen of this widget
 |      in pixel.
 |
 |  winfo_screenmmheight(self)
 |      Return the number of pixels of the height of the screen of
 |      this widget in mm.
 |
 |  winfo_screenmmwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in mm.
 |
 |  winfo_screenvisual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the default
 |      colormodel of this screen.
 |
 |  winfo_screenwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in pixel.
 |
 |  winfo_server(self)
 |      Return information of the X-Server of the screen of this widget in
 |      the form "XmajorRminor vendor vendorVersion".
 |
 |  winfo_toplevel(self)
 |      Return the toplevel widget of this widget.
 |
 |  winfo_viewable(self)
 |      Return true if the widget and all its higher ancestors are mapped.
 |
 |  winfo_visual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the
 |      colormodel of this widget.
 |
 |  winfo_visualid(self)
 |      Return the X identifier for the visual for this widget.
 |
 |  winfo_visualsavailable(self, includeids=False)
 |      Return a list of all visuals available for the screen
 |      of this widget.
 |
 |      Each item in the list consists of a visual name (see winfo_visual), a
 |      depth and if includeids is true is given also the X identifier.
 |
 |  winfo_vrootheight(self)
 |      Return the height of the virtual root window associated with this
 |      widget in pixels. If there is no virtual root window return the
 |      height of the screen.
 |
 |  winfo_vrootwidth(self)
 |      Return the width of the virtual root window associated with this
 |      widget in pixel. If there is no virtual root window return the
 |      width of the screen.
 |
 |  winfo_vrootx(self)
 |      Return the x offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_vrooty(self)
 |      Return the y offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_width(self)
 |      Return the width of this widget.
 |
 |  winfo_x(self)
 |      Return the x coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  winfo_y(self)
 |      Return the y coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from tkinter.Misc:
 |
 |  __dict__
 |      dictionary for instance variables
 |
 |  __weakref__
 |      list of weak references to the object
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Pack:
 |
 |  forget = pack_forget(self)
 |
 |  info = pack_info(self)
 |
 |  pack = pack_configure(self, cnf={}, **kw)
 |
 |  pack_configure(self, cnf={}, **kw)
 |      Pack a widget in the parent widget. Use as options:
 |      after=widget - pack it after you have packed widget
 |      anchor=NSEW (or subset) - position widget according to
 |                                given direction
 |      before=widget - pack it before you will pack widget
 |      expand=bool - expand widget if parent size grows
 |      fill=NONE or X or Y or BOTH - fill widget if widget grows
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
 |
 |  pack_forget(self)
 |      Unmap this widget and do not use it for the packing order.
 |
 |  pack_info(self)
 |      Return information about the packing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Place:
 |
 |  place = place_configure(self, cnf={}, **kw)
 |
 |  place_configure(self, cnf={}, **kw)
 |      Place a widget in the parent widget. Use as options:
 |      in=master - master relative to which the widget is placed
 |      in_=master - see 'in' option description
 |      x=amount - locate anchor of this widget at position x of master
 |      y=amount - locate anchor of this widget at position y of master
 |      relx=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to width of master (1.0 is right edge)
 |      rely=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to height of master (1.0 is bottom edge)
 |      anchor=NSEW (or subset) - position anchor according to given direction
 |      width=amount - width of this widget in pixel
 |      height=amount - height of this widget in pixel
 |      relwidth=amount - width of this widget between 0.0 and 1.0
 |                        relative to width of master (1.0 is the same width
 |                        as the master)
 |      relheight=amount - height of this widget between 0.0 and 1.0
 |                         relative to height of master (1.0 is the same
 |                         height as the master)
 |      bordermode="inside" or "outside" - whether to take border width of
 |                                         master widget into account
 |
 |  place_forget(self)
 |      Unmap this widget.
 |
 |  place_info(self)
 |      Return information about the placing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Grid:
 |
 |  grid = grid_configure(self, cnf={}, **kw)
 |
 |  grid_configure(self, cnf={}, **kw)
 |      Position a widget in the parent widget in a grid. Use as options:
 |      column=number - use cell identified with given column (starting with 0)
 |      columnspan=number - this widget will span several columns
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      row=number - use cell identified with given row (starting with 0)
 |      rowspan=number - this widget will span several rows
 |      sticky=NSEW - if cell is larger on which sides will this
 |                    widget stick to the cell boundary
 |
 |  grid_forget(self)
 |      Unmap this widget.
 |
 |  grid_info(self)
 |      Return information about the options
 |      for positioning this widget in a grid.
 |
 |  grid_remove(self)
 |      Unmap this widget but remember the grid options.
 |
 |  location = grid_location(self, x, y)

None
Help on class Notebook in module tkinter.ttk:

class Notebook(Widget)
 |  Notebook(master=None, **kw)
 |
 |  Ttk Notebook widget manages a collection of windows and displays
 |  a single one at a time. Each child window is associated with a tab,
 |  which the user may select to change the currently-displayed window.
 |
 |  Method resolution order:
 |      Notebook
 |      Widget
 |      tkinter.Widget
 |      tkinter.BaseWidget
 |      tkinter.Misc
 |      tkinter.Pack
 |      tkinter.Place
 |      tkinter.Grid
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  __init__(self, master=None, **kw)
 |      Construct a Ttk Notebook with parent master.
 |
 |      STANDARD OPTIONS
 |
 |          class, cursor, style, takefocus
 |
 |      WIDGET-SPECIFIC OPTIONS
 |
 |          height, padding, width
 |
 |      TAB OPTIONS
 |
 |          state, sticky, padding, text, image, compound, underline
 |
 |      TAB IDENTIFIERS (tab_id)
 |
 |          The tab_id argument found in several methods may take any of
 |          the following forms:
 |
 |              * An integer between zero and the number of tabs
 |              * The name of a child window
 |              * A positional specification of the form "@x,y", which
 |                defines the tab
 |              * The string "current", which identifies the
 |                currently-selected tab
 |              * The string "end", which returns the number of tabs (only
 |                valid for method index)
 |
 |  add(self, child, **kw)
 |      Adds a new tab to the notebook.
 |
 |      If window is currently managed by the notebook but hidden, it is
 |      restored to its previous position.
 |
 |  enable_traversal(self)
 |      Enable keyboard traversal for a toplevel window containing
 |      this notebook.
 |
 |      This will extend the bindings for the toplevel window containing
 |      this notebook as follows:
 |
 |          Control-Tab: selects the tab following the currently selected
 |                       one
 |
 |          Shift-Control-Tab: selects the tab preceding the currently
 |                             selected one
 |
 |          Alt-K: where K is the mnemonic (underlined) character of any
 |                 tab, will select that tab.
 |
 |      Multiple notebooks in a single toplevel may be enabled for
 |      traversal, including nested notebooks. However, notebook traversal
 |      only works properly if all panes are direct children of the
 |      notebook.
 |
 |  forget(self, tab_id)
 |      Removes the tab specified by tab_id, unmaps and unmanages the
 |      associated window.
 |
 |  hide(self, tab_id)
 |      Hides the tab specified by tab_id.
 |
 |      The tab will not be displayed, but the associated window remains
 |      managed by the notebook and its configuration remembered. Hidden
 |      tabs may be restored with the add command.
 |
 |  identify(self, x, y)
 |      Returns the name of the tab element at position x, y, or the
 |      empty string if none.
 |
 |  index(self, tab_id)
 |      Returns the numeric index of the tab specified by tab_id, or
 |      the total number of tabs if tab_id is the string "end".
 |
 |  insert(self, pos, child, **kw)
 |      Inserts a pane at the specified position.
 |
 |      pos is either the string end, an integer index, or the name of
 |      a managed child. If child is already managed by the notebook,
 |      moves it to the specified position.
 |
 |  select(self, tab_id=None)
 |      Selects the specified tab.
 |
 |      The associated child window will be displayed, and the
 |      previously-selected window (if different) is unmapped. If tab_id
 |      is omitted, returns the widget name of the currently selected
 |      pane.
 |
 |  tab(self, tab_id, option=None, **kw)
 |      Query or modify the options of the specific tab_id.
 |
 |      If kw is not given, returns a dict of the tab option values. If option
 |      is specified, returns the value of that option. Otherwise, sets the
 |      options to the corresponding values.
 |
 |  tabs(self)
 |      Returns a list of windows managed by the notebook.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from Widget:
 |
 |  instate(self, statespec, callback=None, *args, **kw)
 |      Test the widget's state.
 |
 |      If callback is not specified, returns True if the widget state
 |      matches statespec and False otherwise. If callback is specified,
 |      then it will be invoked with *args, **kw if the widget state
 |      matches statespec. statespec is expected to be a sequence.
 |
 |  state(self, statespec=None)
 |      Modify or inquire widget state.
 |
 |      Widget state is returned if statespec is None, otherwise it is
 |      set according to the statespec flags and then a new state spec
 |      is returned indicating which flags were changed. statespec is
 |      expected to be a sequence.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.BaseWidget:
 |
 |  destroy(self)
 |      Destroy this and all descendants widgets.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Misc:
 |
 |  __getitem__ = cget(self, key)
 |
 |  __repr__(self)
 |      Return repr(self).
 |
 |  __setitem__(self, key, value)
 |
 |  __str__(self)
 |      Return the window path name of this widget.
 |
 |  after(self, ms, func=None, *args)
 |      Call function once after given time.
 |
 |      MS specifies the time in milliseconds. FUNC gives the
 |      function which shall be called. Additional parameters
 |      are given as parameters to the function call.  Return
 |      identifier to cancel scheduling with after_cancel.
 |
 |  after_cancel(self, id)
 |      Cancel scheduling of function identified with ID.
 |
 |      Identifier returned by after or after_idle must be
 |      given as first parameter.
 |
 |  after_idle(self, func, *args)
 |      Call FUNC once if the Tcl main loop has no event to
 |      process.
 |
 |      Return an identifier to cancel the scheduling with
 |      after_cancel.
 |
 |  anchor = grid_anchor(self, anchor=None)
 |
 |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |
 |  bell(self, displayof=0)
 |      Ring a display's bell.
 |
 |  bind(self, sequence=None, func=None, add=None)
 |      Bind to this widget at event SEQUENCE a call to function FUNC.
 |
 |      SEQUENCE is a string of concatenated event
 |      patterns. An event pattern is of the form
 |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
 |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
 |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
 |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
 |      Mod1, M1. TYPE is one of Activate, Enter, Map,
 |      ButtonPress, Button, Expose, Motion, ButtonRelease
 |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
 |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
 |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
 |      Leave and DETAIL is the button number for ButtonPress,
 |      ButtonRelease and DETAIL is the Keysym for KeyPress and
 |      KeyRelease. Examples are
 |      <Control-Button-1> for pressing Control and mouse button 1 or
 |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
 |      An event pattern can also be a virtual event of the form
 |      <<AString>> where AString can be arbitrary. This
 |      event can be generated by event_generate.
 |      If events are concatenated they must appear shortly
 |      after each other.
 |
 |      FUNC will be called if the event sequence occurs with an
 |      instance of Event as argument. If the return value of FUNC is
 |      "break" no further bound function is invoked.
 |
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function.
 |
 |      Bind will return an identifier to allow deletion of the bound function with
 |      unbind without memory leak.
 |
 |      If FUNC or SEQUENCE is omitted the bound function or list
 |      of bound events are returned.
 |
 |  bind_all(self, sequence=None, func=None, add=None)
 |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function. See bind for the return value.
 |
 |  bind_class(self, className, sequence=None, func=None, add=None)
 |      Bind to widgets with bindtag CLASSNAME at event
 |      SEQUENCE a call of function FUNC. An additional
 |      boolean parameter ADD specifies whether FUNC will be
 |      called additionally to the other bound function or
 |      whether it will replace the previous function. See bind for
 |      the return value.
 |
 |  bindtags(self, tagList=None)
 |      Set or get the list of bindtags for this widget.
 |
 |      With no argument return the list of all bindtags associated with
 |      this widget. With a list of strings as argument the bindtags are
 |      set to this list. The bindtags determine in which order events are
 |      processed (see bind).
 |
 |  cget(self, key)
 |      Return the resource value for a KEY given as string.
 |
 |  clipboard_append(self, string, **kw)
 |      Append STRING to the Tk clipboard.
 |
 |      A widget specified at the optional displayof keyword
 |      argument specifies the target display. The clipboard
 |      can be retrieved with selection_get.
 |
 |  clipboard_clear(self, **kw)
 |      Clear the data in the Tk clipboard.
 |
 |      A widget specified for the optional displayof keyword
 |      argument specifies the target display.
 |
 |  clipboard_get(self, **kw)
 |      Retrieve data from the clipboard on window's display.
 |
 |      The window keyword defaults to the root window of the Tkinter
 |      application.
 |
 |      The type keyword specifies the form in which the data is
 |      to be returned and should be an atom name such as STRING
 |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
 |      is to try UTF8_STRING and fall back to STRING.
 |
 |      This command is equivalent to:
 |
 |      selection_get(CLIPBOARD)
 |
 |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
 |
 |  config = configure(self, cnf=None, **kw)
 |
 |  configure(self, cnf=None, **kw)
 |      Configure resources of a widget.
 |
 |      The values for resources are specified as keyword
 |      arguments. To get an overview about
 |      the allowed keyword arguments call the method keys.
 |
 |  deletecommand(self, name)
 |      Internal function.
 |
 |      Delete the Tcl command provided in NAME.
 |
 |  event_add(self, virtual, *sequences)
 |      Bind a virtual event VIRTUAL (of the form <<Name>>)
 |      to an event SEQUENCE such that the virtual event is triggered
 |      whenever SEQUENCE occurs.
 |
 |  event_delete(self, virtual, *sequences)
 |      Unbind a virtual event VIRTUAL from SEQUENCE.
 |
 |  event_generate(self, sequence, **kw)
 |      Generate an event SEQUENCE. Additional
 |      keyword arguments specify parameter of the event
 |      (e.g. x, y, rootx, rooty).
 |
 |  event_info(self, virtual=None)
 |      Return a list of all virtual events or the information
 |      about the SEQUENCE bound to the virtual event VIRTUAL.
 |
 |  focus = focus_set(self)
 |
 |  focus_displayof(self)
 |      Return the widget which has currently the focus on the
 |      display where this widget is located.
 |
 |      Return None if the application does not have the focus.
 |
 |  focus_force(self)
 |      Direct input focus to this widget even if the
 |      application does not have the focus. Use with
 |      caution!
 |
 |  focus_get(self)
 |      Return the widget which has currently the focus in the
 |      application.
 |
 |      Use focus_displayof to allow working with several
 |      displays. Return None if application does not have
 |      the focus.
 |
 |  focus_lastfor(self)
 |      Return the widget which would have the focus if top level
 |      for this widget gets the focus from the window manager.
 |
 |  focus_set(self)
 |      Direct input focus to this widget.
 |
 |      If the application currently does not have the focus
 |      this widget will get the focus if the application gets
 |      the focus through the window manager.
 |
 |  getboolean(self, s)
 |      Return a boolean value for Tcl boolean values true and false given as parameter.
 |
 |  getdouble(self, s)
 |
 |  getint(self, s)
 |
 |  getvar(self, name='PY_VAR')
 |      Return value of Tcl variable NAME.
 |
 |  grab_current(self)
 |      Return widget which has currently the grab in this application
 |      or None.
 |
 |  grab_release(self)
 |      Release grab for this widget if currently set.
 |
 |  grab_set(self)
 |      Set grab for this widget.
 |
 |      A grab directs all events to this and descendant
 |      widgets in the application.
 |
 |  grab_set_global(self)
 |      Set global grab for this widget.
 |
 |      A global grab directs all events to this and
 |      descendant widgets on the display. Use with caution -
 |      other applications do not get events anymore.
 |
 |  grab_status(self)
 |      Return None, "local" or "global" if this widget has
 |      no, a local or a global grab.
 |
 |  grid_anchor(self, anchor=None)
 |      The anchor value controls how to place the grid within the
 |      master when no row/column has any weight.
 |
 |      The default anchor is nw.
 |
 |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |      Return a tuple of integer coordinates for the bounding
 |      box of this widget controlled by the geometry manager grid.
 |
 |      If COLUMN, ROW is given the bounding box applies from
 |      the cell with row and column 0 to the specified
 |      cell. If COL2 and ROW2 are given the bounding box
 |      starts at that cell.
 |
 |      The returned integers specify the offset of the upper left
 |      corner in the master widget and the width and height.
 |
 |  grid_columnconfigure(self, index, cnf={}, **kw)
 |      Configure column INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the column),
 |      weight (how much does additional space propagate to this column)
 |      and pad (how much space to let additionally).
 |
 |  grid_location(self, x, y)
 |      Return a tuple of column and row which identify the cell
 |      at which the pixel at position X and Y inside the master
 |      widget is located.
 |
 |  grid_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given, the current setting will be returned.
 |
 |  grid_rowconfigure(self, index, cnf={}, **kw)
 |      Configure row INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the row),
 |      weight (how much does additional space propagate to this row)
 |      and pad (how much space to let additionally).
 |
 |  grid_size(self)
 |      Return a tuple of the number of column and rows in the grid.
 |
 |  grid_slaves(self, row=None, column=None)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  image_names(self)
 |      Return a list of all existing image names.
 |
 |  image_types(self)
 |      Return a list of all available image types (e.g. photo bitmap).
 |
 |  info_patchlevel(self)
 |      Returns the exact version of the Tcl library.
 |
 |  keys(self)
 |      Return a list of all resource names of this widget.
 |
 |  lift = tkraise(self, aboveThis=None)
 |
 |  lower(self, belowThis=None)
 |      Lower this widget in the stacking order.
 |
 |  mainloop(self, n=0)
 |      Call the mainloop of Tk.
 |
 |  nametowidget(self, name)
 |      Return the Tkinter instance of a widget identified by
 |      its Tcl name NAME.
 |
 |  option_add(self, pattern, value, priority=None)
 |      Set a VALUE (second parameter) for an option
 |      PATTERN (first parameter).
 |
 |      An optional third parameter gives the numeric priority
 |      (defaults to 80).
 |
 |  option_clear(self)
 |      Clear the option database.
 |
 |      It will be reloaded if option_add is called.
 |
 |  option_get(self, name, className)
 |      Return the value for an option NAME for this widget
 |      with CLASSNAME.
 |
 |      Values with higher priority override lower values.
 |
 |  option_readfile(self, fileName, priority=None)
 |      Read file FILENAME into the option database.
 |
 |      An optional second parameter gives the numeric
 |      priority.
 |
 |  pack_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given the current setting will be returned.
 |
 |  pack_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  place_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  propagate = pack_propagate(self, flag=['_noarg_'])
 |
 |  quit(self)
 |      Quit the Tcl interpreter. All widgets will be destroyed.
 |
 |  register = _register(self, func, subst=None, needcleanup=1)
 |
 |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
 |
 |  selection_clear(self, **kw)
 |      Clear the current X selection.
 |
 |  selection_get(self, **kw)
 |      Return the contents of the current X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection and defaults to PRIMARY.  A keyword
 |      parameter displayof specifies a widget on the display
 |      to use. A keyword parameter type specifies the form of data to be
 |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
 |      before STRING.
 |
 |  selection_handle(self, command, **kw)
 |      Specify a function COMMAND to call if the X
 |      selection owned by this widget is queried by another
 |      application.
 |
 |      This function must return the contents of the
 |      selection. The function will be called with the
 |      arguments OFFSET and LENGTH which allows the chunking
 |      of very long selections. The following keyword
 |      parameters can be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  selection_own(self, **kw)
 |      Become owner of X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection (default PRIMARY).
 |
 |  selection_own_get(self, **kw)
 |      Return owner of X selection.
 |
 |      The following keyword parameter can
 |      be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  send(self, interp, cmd, *args)
 |      Send Tcl command CMD to different interpreter INTERP to be executed.
 |
 |  setvar(self, name='PY_VAR', value='1')
 |      Set Tcl variable NAME to VALUE.
 |
 |  size = grid_size(self)
 |
 |  slaves = pack_slaves(self)
 |
 |  tk_bisque(self)
 |      Change the color scheme to light brown as used in Tk 3.6 and before.
 |
 |  tk_focusFollowsMouse(self)
 |      The widget under mouse will get automatically focus. Can not
 |      be disabled easily.
 |
 |  tk_focusNext(self)
 |      Return the next widget in the focus order which follows
 |      widget which has currently the focus.
 |
 |      The focus order first goes to the next child, then to
 |      the children of the child recursively and then to the
 |      next sibling which is higher in the stacking order.  A
 |      widget is omitted if it has the takefocus resource set
 |      to 0.
 |
 |  tk_focusPrev(self)
 |      Return previous widget in the focus order. See tk_focusNext for details.
 |
 |  tk_setPalette(self, *args, **kw)
 |      Set a new color scheme for all widget elements.
 |
 |      A single color as argument will cause that all colors of Tk
 |      widget elements are derived from this.
 |      Alternatively several keyword parameters and its associated
 |      colors can be given. The following keywords are valid:
 |      activeBackground, foreground, selectColor,
 |      activeForeground, highlightBackground, selectBackground,
 |      background, highlightColor, selectForeground,
 |      disabledForeground, insertBackground, troughColor.
 |
 |  tk_strictMotif(self, boolean=None)
 |      Set Tcl internal variable, whether the look and feel
 |      should adhere to Motif.
 |
 |      A parameter of 1 means adhere to Motif (e.g. no color
 |      change if mouse passes over slider).
 |      Returns the set value.
 |
 |  tkraise(self, aboveThis=None)
 |      Raise this widget in the stacking order.
 |
 |  unbind(self, sequence, funcid=None)
 |      Unbind for this widget the event SEQUENCE.
 |
 |      If FUNCID is given, only unbind the function identified with FUNCID
 |      and also delete the corresponding Tcl command.
 |
 |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
 |      unbound.
 |
 |  unbind_all(self, sequence)
 |      Unbind for all widgets for event SEQUENCE all functions.
 |
 |  unbind_class(self, className, sequence)
 |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
 |      all functions.
 |
 |  update(self)
 |      Enter event loop until all pending events have been processed by Tcl.
 |
 |  update_idletasks(self)
 |      Enter event loop until all idle callbacks have been called. This
 |      will update the display of windows but not process events caused by
 |      the user.
 |
 |  wait_variable(self, name='PY_VAR')
 |      Wait until the variable is modified.
 |
 |      A parameter of type IntVar, StringVar, DoubleVar or
 |      BooleanVar must be given.
 |
 |  wait_visibility(self, window=None)
 |      Wait until the visibility of a WIDGET changes
 |      (e.g. it appears).
 |
 |      If no parameter is given self is used.
 |
 |  wait_window(self, window=None)
 |      Wait until a WIDGET is destroyed.
 |
 |      If no parameter is given self is used.
 |
 |  waitvar = wait_variable(self, name='PY_VAR')
 |
 |  winfo_atom(self, name, displayof=0)
 |      Return integer which represents atom NAME.
 |
 |  winfo_atomname(self, id, displayof=0)
 |      Return name of atom with identifier ID.
 |
 |  winfo_cells(self)
 |      Return number of cells in the colormap for this widget.
 |
 |  winfo_children(self)
 |      Return a list of all widgets which are children of this widget.
 |
 |  winfo_class(self)
 |      Return window class name of this widget.
 |
 |  winfo_colormapfull(self)
 |      Return True if at the last color request the colormap was full.
 |
 |  winfo_containing(self, rootX, rootY, displayof=0)
 |      Return the widget which is at the root coordinates ROOTX, ROOTY.
 |
 |  winfo_depth(self)
 |      Return the number of bits per pixel.
 |
 |  winfo_exists(self)
 |      Return true if this widget exists.
 |
 |  winfo_fpixels(self, number)
 |      Return the number of pixels for the given distance NUMBER
 |      (e.g. "3c") as float.
 |
 |  winfo_geometry(self)
 |      Return geometry string for this widget in the form "widthxheight+X+Y".
 |
 |  winfo_height(self)
 |      Return height of this widget.
 |
 |  winfo_id(self)
 |      Return identifier ID for this widget.
 |
 |  winfo_interps(self, displayof=0)
 |      Return the name of all Tcl interpreters for this display.
 |
 |  winfo_ismapped(self)
 |      Return true if this widget is mapped.
 |
 |  winfo_manager(self)
 |      Return the window manager name for this widget.
 |
 |  winfo_name(self)
 |      Return the name of this widget.
 |
 |  winfo_parent(self)
 |      Return the name of the parent of this widget.
 |
 |  winfo_pathname(self, id, displayof=0)
 |      Return the pathname of the widget given by ID.
 |
 |  winfo_pixels(self, number)
 |      Rounded integer value of winfo_fpixels.
 |
 |  winfo_pointerx(self)
 |      Return the x coordinate of the pointer on the root window.
 |
 |  winfo_pointerxy(self)
 |      Return a tuple of x and y coordinates of the pointer on the root window.
 |
 |  winfo_pointery(self)
 |      Return the y coordinate of the pointer on the root window.
 |
 |  winfo_reqheight(self)
 |      Return requested height of this widget.
 |
 |  winfo_reqwidth(self)
 |      Return requested width of this widget.
 |
 |  winfo_rgb(self, color)
 |      Return a tuple of integer RGB values in range(65536) for color in this widget.
 |
 |  winfo_rootx(self)
 |      Return x coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_rooty(self)
 |      Return y coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_screen(self)
 |      Return the screen name of this widget.
 |
 |  winfo_screencells(self)
 |      Return the number of the cells in the colormap of the screen
 |      of this widget.
 |
 |  winfo_screendepth(self)
 |      Return the number of bits per pixel of the root window of the
 |      screen of this widget.
 |
 |  winfo_screenheight(self)
 |      Return the number of pixels of the height of the screen of this widget
 |      in pixel.
 |
 |  winfo_screenmmheight(self)
 |      Return the number of pixels of the height of the screen of
 |      this widget in mm.
 |
 |  winfo_screenmmwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in mm.
 |
 |  winfo_screenvisual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the default
 |      colormodel of this screen.
 |
 |  winfo_screenwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in pixel.
 |
 |  winfo_server(self)
 |      Return information of the X-Server of the screen of this widget in
 |      the form "XmajorRminor vendor vendorVersion".
 |
 |  winfo_toplevel(self)
 |      Return the toplevel widget of this widget.
 |
 |  winfo_viewable(self)
 |      Return true if the widget and all its higher ancestors are mapped.
 |
 |  winfo_visual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the
 |      colormodel of this widget.
 |
 |  winfo_visualid(self)
 |      Return the X identifier for the visual for this widget.
 |
 |  winfo_visualsavailable(self, includeids=False)
 |      Return a list of all visuals available for the screen
 |      of this widget.
 |
 |      Each item in the list consists of a visual name (see winfo_visual), a
 |      depth and if includeids is true is given also the X identifier.
 |
 |  winfo_vrootheight(self)
 |      Return the height of the virtual root window associated with this
 |      widget in pixels. If there is no virtual root window return the
 |      height of the screen.
 |
 |  winfo_vrootwidth(self)
 |      Return the width of the virtual root window associated with this
 |      widget in pixel. If there is no virtual root window return the
 |      width of the screen.
 |
 |  winfo_vrootx(self)
 |      Return the x offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_vrooty(self)
 |      Return the y offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_width(self)
 |      Return the width of this widget.
 |
 |  winfo_x(self)
 |      Return the x coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  winfo_y(self)
 |      Return the y coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from tkinter.Misc:
 |
 |  __dict__
 |      dictionary for instance variables
 |
 |  __weakref__
 |      list of weak references to the object
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Pack:
 |
 |  info = pack_info(self)
 |
 |  pack = pack_configure(self, cnf={}, **kw)
 |
 |  pack_configure(self, cnf={}, **kw)
 |      Pack a widget in the parent widget. Use as options:
 |      after=widget - pack it after you have packed widget
 |      anchor=NSEW (or subset) - position widget according to
 |                                given direction
 |      before=widget - pack it before you will pack widget
 |      expand=bool - expand widget if parent size grows
 |      fill=NONE or X or Y or BOTH - fill widget if widget grows
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
 |
 |  pack_forget(self)
 |      Unmap this widget and do not use it for the packing order.
 |
 |  pack_info(self)
 |      Return information about the packing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Place:
 |
 |  place = place_configure(self, cnf={}, **kw)
 |
 |  place_configure(self, cnf={}, **kw)
 |      Place a widget in the parent widget. Use as options:
 |      in=master - master relative to which the widget is placed
 |      in_=master - see 'in' option description
 |      x=amount - locate anchor of this widget at position x of master
 |      y=amount - locate anchor of this widget at position y of master
 |      relx=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to width of master (1.0 is right edge)
 |      rely=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to height of master (1.0 is bottom edge)
 |      anchor=NSEW (or subset) - position anchor according to given direction
 |      width=amount - width of this widget in pixel
 |      height=amount - height of this widget in pixel
 |      relwidth=amount - width of this widget between 0.0 and 1.0
 |                        relative to width of master (1.0 is the same width
 |                        as the master)
 |      relheight=amount - height of this widget between 0.0 and 1.0
 |                         relative to height of master (1.0 is the same
 |                         height as the master)
 |      bordermode="inside" or "outside" - whether to take border width of
 |                                         master widget into account
 |
 |  place_forget(self)
 |      Unmap this widget.
 |
 |  place_info(self)
 |      Return information about the placing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Grid:
 |
 |  grid = grid_configure(self, cnf={}, **kw)
 |
 |  grid_configure(self, cnf={}, **kw)
 |      Position a widget in the parent widget in a grid. Use as options:
 |      column=number - use cell identified with given column (starting with 0)
 |      columnspan=number - this widget will span several columns
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      row=number - use cell identified with given row (starting with 0)
 |      rowspan=number - this widget will span several rows
 |      sticky=NSEW - if cell is larger on which sides will this
 |                    widget stick to the cell boundary
 |
 |  grid_forget(self)
 |      Unmap this widget.
 |
 |  grid_info(self)
 |      Return information about the options
 |      for positioning this widget in a grid.
 |
 |  grid_remove(self)
 |      Unmap this widget but remember the grid options.
 |
 |  location = grid_location(self, x, y)

None
Help on class OptionMenu in module tkinter.ttk:

class OptionMenu(Menubutton)
 |  OptionMenu(master, variable, default=None, *values, **kwargs)
 |
 |  Themed OptionMenu, based after tkinter's OptionMenu, which allows
 |  the user to select a value from a menu.
 |
 |  Method resolution order:
 |      OptionMenu
 |      Menubutton
 |      Widget
 |      tkinter.Widget
 |      tkinter.BaseWidget
 |      tkinter.Misc
 |      tkinter.Pack
 |      tkinter.Place
 |      tkinter.Grid
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  __getitem__(self, item)
 |      Return the resource value for a KEY given as string.
 |
 |  __init__(self, master, variable, default=None, *values, **kwargs)
 |      Construct a themed OptionMenu widget with master as the parent,
 |      the resource textvariable set to variable, the initially selected
 |      value specified by the default parameter, the menu values given by
 |      *values and additional keywords.
 |
 |      WIDGET-SPECIFIC OPTIONS
 |
 |          style: stylename
 |              Menubutton style.
 |          direction: 'above', 'below', 'left', 'right', or 'flush'
 |              Menubutton direction.
 |          command: callback
 |              A callback that will be invoked after selecting an item.
 |
 |  destroy(self)
 |      Destroy this widget and its associated variable.
 |
 |  set_menu(self, default=None, *values)
 |      Build a new menu of radiobuttons with *values and optionally
 |      a default value.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from Widget:
 |
 |  identify(self, x, y)
 |      Returns the name of the element at position x, y, or the empty
 |      string if the point does not lie within any element.
 |
 |      x and y are pixel coordinates relative to the widget.
 |
 |  instate(self, statespec, callback=None, *args, **kw)
 |      Test the widget's state.
 |
 |      If callback is not specified, returns True if the widget state
 |      matches statespec and False otherwise. If callback is specified,
 |      then it will be invoked with *args, **kw if the widget state
 |      matches statespec. statespec is expected to be a sequence.
 |
 |  state(self, statespec=None)
 |      Modify or inquire widget state.
 |
 |      Widget state is returned if statespec is None, otherwise it is
 |      set according to the statespec flags and then a new state spec
 |      is returned indicating which flags were changed. statespec is
 |      expected to be a sequence.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Misc:
 |
 |  __repr__(self)
 |      Return repr(self).
 |
 |  __setitem__(self, key, value)
 |
 |  __str__(self)
 |      Return the window path name of this widget.
 |
 |  after(self, ms, func=None, *args)
 |      Call function once after given time.
 |
 |      MS specifies the time in milliseconds. FUNC gives the
 |      function which shall be called. Additional parameters
 |      are given as parameters to the function call.  Return
 |      identifier to cancel scheduling with after_cancel.
 |
 |  after_cancel(self, id)
 |      Cancel scheduling of function identified with ID.
 |
 |      Identifier returned by after or after_idle must be
 |      given as first parameter.
 |
 |  after_idle(self, func, *args)
 |      Call FUNC once if the Tcl main loop has no event to
 |      process.
 |
 |      Return an identifier to cancel the scheduling with
 |      after_cancel.
 |
 |  anchor = grid_anchor(self, anchor=None)
 |
 |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |
 |  bell(self, displayof=0)
 |      Ring a display's bell.
 |
 |  bind(self, sequence=None, func=None, add=None)
 |      Bind to this widget at event SEQUENCE a call to function FUNC.
 |
 |      SEQUENCE is a string of concatenated event
 |      patterns. An event pattern is of the form
 |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
 |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
 |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
 |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
 |      Mod1, M1. TYPE is one of Activate, Enter, Map,
 |      ButtonPress, Button, Expose, Motion, ButtonRelease
 |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
 |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
 |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
 |      Leave and DETAIL is the button number for ButtonPress,
 |      ButtonRelease and DETAIL is the Keysym for KeyPress and
 |      KeyRelease. Examples are
 |      <Control-Button-1> for pressing Control and mouse button 1 or
 |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
 |      An event pattern can also be a virtual event of the form
 |      <<AString>> where AString can be arbitrary. This
 |      event can be generated by event_generate.
 |      If events are concatenated they must appear shortly
 |      after each other.
 |
 |      FUNC will be called if the event sequence occurs with an
 |      instance of Event as argument. If the return value of FUNC is
 |      "break" no further bound function is invoked.
 |
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function.
 |
 |      Bind will return an identifier to allow deletion of the bound function with
 |      unbind without memory leak.
 |
 |      If FUNC or SEQUENCE is omitted the bound function or list
 |      of bound events are returned.
 |
 |  bind_all(self, sequence=None, func=None, add=None)
 |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function. See bind for the return value.
 |
 |  bind_class(self, className, sequence=None, func=None, add=None)
 |      Bind to widgets with bindtag CLASSNAME at event
 |      SEQUENCE a call of function FUNC. An additional
 |      boolean parameter ADD specifies whether FUNC will be
 |      called additionally to the other bound function or
 |      whether it will replace the previous function. See bind for
 |      the return value.
 |
 |  bindtags(self, tagList=None)
 |      Set or get the list of bindtags for this widget.
 |
 |      With no argument return the list of all bindtags associated with
 |      this widget. With a list of strings as argument the bindtags are
 |      set to this list. The bindtags determine in which order events are
 |      processed (see bind).
 |
 |  cget(self, key)
 |      Return the resource value for a KEY given as string.
 |
 |  clipboard_append(self, string, **kw)
 |      Append STRING to the Tk clipboard.
 |
 |      A widget specified at the optional displayof keyword
 |      argument specifies the target display. The clipboard
 |      can be retrieved with selection_get.
 |
 |  clipboard_clear(self, **kw)
 |      Clear the data in the Tk clipboard.
 |
 |      A widget specified for the optional displayof keyword
 |      argument specifies the target display.
 |
 |  clipboard_get(self, **kw)
 |      Retrieve data from the clipboard on window's display.
 |
 |      The window keyword defaults to the root window of the Tkinter
 |      application.
 |
 |      The type keyword specifies the form in which the data is
 |      to be returned and should be an atom name such as STRING
 |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
 |      is to try UTF8_STRING and fall back to STRING.
 |
 |      This command is equivalent to:
 |
 |      selection_get(CLIPBOARD)
 |
 |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
 |
 |  config = configure(self, cnf=None, **kw)
 |
 |  configure(self, cnf=None, **kw)
 |      Configure resources of a widget.
 |
 |      The values for resources are specified as keyword
 |      arguments. To get an overview about
 |      the allowed keyword arguments call the method keys.
 |
 |  deletecommand(self, name)
 |      Internal function.
 |
 |      Delete the Tcl command provided in NAME.
 |
 |  event_add(self, virtual, *sequences)
 |      Bind a virtual event VIRTUAL (of the form <<Name>>)
 |      to an event SEQUENCE such that the virtual event is triggered
 |      whenever SEQUENCE occurs.
 |
 |  event_delete(self, virtual, *sequences)
 |      Unbind a virtual event VIRTUAL from SEQUENCE.
 |
 |  event_generate(self, sequence, **kw)
 |      Generate an event SEQUENCE. Additional
 |      keyword arguments specify parameter of the event
 |      (e.g. x, y, rootx, rooty).
 |
 |  event_info(self, virtual=None)
 |      Return a list of all virtual events or the information
 |      about the SEQUENCE bound to the virtual event VIRTUAL.
 |
 |  focus = focus_set(self)
 |
 |  focus_displayof(self)
 |      Return the widget which has currently the focus on the
 |      display where this widget is located.
 |
 |      Return None if the application does not have the focus.
 |
 |  focus_force(self)
 |      Direct input focus to this widget even if the
 |      application does not have the focus. Use with
 |      caution!
 |
 |  focus_get(self)
 |      Return the widget which has currently the focus in the
 |      application.
 |
 |      Use focus_displayof to allow working with several
 |      displays. Return None if application does not have
 |      the focus.
 |
 |  focus_lastfor(self)
 |      Return the widget which would have the focus if top level
 |      for this widget gets the focus from the window manager.
 |
 |  focus_set(self)
 |      Direct input focus to this widget.
 |
 |      If the application currently does not have the focus
 |      this widget will get the focus if the application gets
 |      the focus through the window manager.
 |
 |  getboolean(self, s)
 |      Return a boolean value for Tcl boolean values true and false given as parameter.
 |
 |  getdouble(self, s)
 |
 |  getint(self, s)
 |
 |  getvar(self, name='PY_VAR')
 |      Return value of Tcl variable NAME.
 |
 |  grab_current(self)
 |      Return widget which has currently the grab in this application
 |      or None.
 |
 |  grab_release(self)
 |      Release grab for this widget if currently set.
 |
 |  grab_set(self)
 |      Set grab for this widget.
 |
 |      A grab directs all events to this and descendant
 |      widgets in the application.
 |
 |  grab_set_global(self)
 |      Set global grab for this widget.
 |
 |      A global grab directs all events to this and
 |      descendant widgets on the display. Use with caution -
 |      other applications do not get events anymore.
 |
 |  grab_status(self)
 |      Return None, "local" or "global" if this widget has
 |      no, a local or a global grab.
 |
 |  grid_anchor(self, anchor=None)
 |      The anchor value controls how to place the grid within the
 |      master when no row/column has any weight.
 |
 |      The default anchor is nw.
 |
 |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |      Return a tuple of integer coordinates for the bounding
 |      box of this widget controlled by the geometry manager grid.
 |
 |      If COLUMN, ROW is given the bounding box applies from
 |      the cell with row and column 0 to the specified
 |      cell. If COL2 and ROW2 are given the bounding box
 |      starts at that cell.
 |
 |      The returned integers specify the offset of the upper left
 |      corner in the master widget and the width and height.
 |
 |  grid_columnconfigure(self, index, cnf={}, **kw)
 |      Configure column INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the column),
 |      weight (how much does additional space propagate to this column)
 |      and pad (how much space to let additionally).
 |
 |  grid_location(self, x, y)
 |      Return a tuple of column and row which identify the cell
 |      at which the pixel at position X and Y inside the master
 |      widget is located.
 |
 |  grid_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given, the current setting will be returned.
 |
 |  grid_rowconfigure(self, index, cnf={}, **kw)
 |      Configure row INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the row),
 |      weight (how much does additional space propagate to this row)
 |      and pad (how much space to let additionally).
 |
 |  grid_size(self)
 |      Return a tuple of the number of column and rows in the grid.
 |
 |  grid_slaves(self, row=None, column=None)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  image_names(self)
 |      Return a list of all existing image names.
 |
 |  image_types(self)
 |      Return a list of all available image types (e.g. photo bitmap).
 |
 |  info_patchlevel(self)
 |      Returns the exact version of the Tcl library.
 |
 |  keys(self)
 |      Return a list of all resource names of this widget.
 |
 |  lift = tkraise(self, aboveThis=None)
 |
 |  lower(self, belowThis=None)
 |      Lower this widget in the stacking order.
 |
 |  mainloop(self, n=0)
 |      Call the mainloop of Tk.
 |
 |  nametowidget(self, name)
 |      Return the Tkinter instance of a widget identified by
 |      its Tcl name NAME.
 |
 |  option_add(self, pattern, value, priority=None)
 |      Set a VALUE (second parameter) for an option
 |      PATTERN (first parameter).
 |
 |      An optional third parameter gives the numeric priority
 |      (defaults to 80).
 |
 |  option_clear(self)
 |      Clear the option database.
 |
 |      It will be reloaded if option_add is called.
 |
 |  option_get(self, name, className)
 |      Return the value for an option NAME for this widget
 |      with CLASSNAME.
 |
 |      Values with higher priority override lower values.
 |
 |  option_readfile(self, fileName, priority=None)
 |      Read file FILENAME into the option database.
 |
 |      An optional second parameter gives the numeric
 |      priority.
 |
 |  pack_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given the current setting will be returned.
 |
 |  pack_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  place_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  propagate = pack_propagate(self, flag=['_noarg_'])
 |
 |  quit(self)
 |      Quit the Tcl interpreter. All widgets will be destroyed.
 |
 |  register = _register(self, func, subst=None, needcleanup=1)
 |
 |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
 |
 |  selection_clear(self, **kw)
 |      Clear the current X selection.
 |
 |  selection_get(self, **kw)
 |      Return the contents of the current X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection and defaults to PRIMARY.  A keyword
 |      parameter displayof specifies a widget on the display
 |      to use. A keyword parameter type specifies the form of data to be
 |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
 |      before STRING.
 |
 |  selection_handle(self, command, **kw)
 |      Specify a function COMMAND to call if the X
 |      selection owned by this widget is queried by another
 |      application.
 |
 |      This function must return the contents of the
 |      selection. The function will be called with the
 |      arguments OFFSET and LENGTH which allows the chunking
 |      of very long selections. The following keyword
 |      parameters can be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  selection_own(self, **kw)
 |      Become owner of X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection (default PRIMARY).
 |
 |  selection_own_get(self, **kw)
 |      Return owner of X selection.
 |
 |      The following keyword parameter can
 |      be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  send(self, interp, cmd, *args)
 |      Send Tcl command CMD to different interpreter INTERP to be executed.
 |
 |  setvar(self, name='PY_VAR', value='1')
 |      Set Tcl variable NAME to VALUE.
 |
 |  size = grid_size(self)
 |
 |  slaves = pack_slaves(self)
 |
 |  tk_bisque(self)
 |      Change the color scheme to light brown as used in Tk 3.6 and before.
 |
 |  tk_focusFollowsMouse(self)
 |      The widget under mouse will get automatically focus. Can not
 |      be disabled easily.
 |
 |  tk_focusNext(self)
 |      Return the next widget in the focus order which follows
 |      widget which has currently the focus.
 |
 |      The focus order first goes to the next child, then to
 |      the children of the child recursively and then to the
 |      next sibling which is higher in the stacking order.  A
 |      widget is omitted if it has the takefocus resource set
 |      to 0.
 |
 |  tk_focusPrev(self)
 |      Return previous widget in the focus order. See tk_focusNext for details.
 |
 |  tk_setPalette(self, *args, **kw)
 |      Set a new color scheme for all widget elements.
 |
 |      A single color as argument will cause that all colors of Tk
 |      widget elements are derived from this.
 |      Alternatively several keyword parameters and its associated
 |      colors can be given. The following keywords are valid:
 |      activeBackground, foreground, selectColor,
 |      activeForeground, highlightBackground, selectBackground,
 |      background, highlightColor, selectForeground,
 |      disabledForeground, insertBackground, troughColor.
 |
 |  tk_strictMotif(self, boolean=None)
 |      Set Tcl internal variable, whether the look and feel
 |      should adhere to Motif.
 |
 |      A parameter of 1 means adhere to Motif (e.g. no color
 |      change if mouse passes over slider).
 |      Returns the set value.
 |
 |  tkraise(self, aboveThis=None)
 |      Raise this widget in the stacking order.
 |
 |  unbind(self, sequence, funcid=None)
 |      Unbind for this widget the event SEQUENCE.
 |
 |      If FUNCID is given, only unbind the function identified with FUNCID
 |      and also delete the corresponding Tcl command.
 |
 |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
 |      unbound.
 |
 |  unbind_all(self, sequence)
 |      Unbind for all widgets for event SEQUENCE all functions.
 |
 |  unbind_class(self, className, sequence)
 |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
 |      all functions.
 |
 |  update(self)
 |      Enter event loop until all pending events have been processed by Tcl.
 |
 |  update_idletasks(self)
 |      Enter event loop until all idle callbacks have been called. This
 |      will update the display of windows but not process events caused by
 |      the user.
 |
 |  wait_variable(self, name='PY_VAR')
 |      Wait until the variable is modified.
 |
 |      A parameter of type IntVar, StringVar, DoubleVar or
 |      BooleanVar must be given.
 |
 |  wait_visibility(self, window=None)
 |      Wait until the visibility of a WIDGET changes
 |      (e.g. it appears).
 |
 |      If no parameter is given self is used.
 |
 |  wait_window(self, window=None)
 |      Wait until a WIDGET is destroyed.
 |
 |      If no parameter is given self is used.
 |
 |  waitvar = wait_variable(self, name='PY_VAR')
 |
 |  winfo_atom(self, name, displayof=0)
 |      Return integer which represents atom NAME.
 |
 |  winfo_atomname(self, id, displayof=0)
 |      Return name of atom with identifier ID.
 |
 |  winfo_cells(self)
 |      Return number of cells in the colormap for this widget.
 |
 |  winfo_children(self)
 |      Return a list of all widgets which are children of this widget.
 |
 |  winfo_class(self)
 |      Return window class name of this widget.
 |
 |  winfo_colormapfull(self)
 |      Return True if at the last color request the colormap was full.
 |
 |  winfo_containing(self, rootX, rootY, displayof=0)
 |      Return the widget which is at the root coordinates ROOTX, ROOTY.
 |
 |  winfo_depth(self)
 |      Return the number of bits per pixel.
 |
 |  winfo_exists(self)
 |      Return true if this widget exists.
 |
 |  winfo_fpixels(self, number)
 |      Return the number of pixels for the given distance NUMBER
 |      (e.g. "3c") as float.
 |
 |  winfo_geometry(self)
 |      Return geometry string for this widget in the form "widthxheight+X+Y".
 |
 |  winfo_height(self)
 |      Return height of this widget.
 |
 |  winfo_id(self)
 |      Return identifier ID for this widget.
 |
 |  winfo_interps(self, displayof=0)
 |      Return the name of all Tcl interpreters for this display.
 |
 |  winfo_ismapped(self)
 |      Return true if this widget is mapped.
 |
 |  winfo_manager(self)
 |      Return the window manager name for this widget.
 |
 |  winfo_name(self)
 |      Return the name of this widget.
 |
 |  winfo_parent(self)
 |      Return the name of the parent of this widget.
 |
 |  winfo_pathname(self, id, displayof=0)
 |      Return the pathname of the widget given by ID.
 |
 |  winfo_pixels(self, number)
 |      Rounded integer value of winfo_fpixels.
 |
 |  winfo_pointerx(self)
 |      Return the x coordinate of the pointer on the root window.
 |
 |  winfo_pointerxy(self)
 |      Return a tuple of x and y coordinates of the pointer on the root window.
 |
 |  winfo_pointery(self)
 |      Return the y coordinate of the pointer on the root window.
 |
 |  winfo_reqheight(self)
 |      Return requested height of this widget.
 |
 |  winfo_reqwidth(self)
 |      Return requested width of this widget.
 |
 |  winfo_rgb(self, color)
 |      Return a tuple of integer RGB values in range(65536) for color in this widget.
 |
 |  winfo_rootx(self)
 |      Return x coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_rooty(self)
 |      Return y coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_screen(self)
 |      Return the screen name of this widget.
 |
 |  winfo_screencells(self)
 |      Return the number of the cells in the colormap of the screen
 |      of this widget.
 |
 |  winfo_screendepth(self)
 |      Return the number of bits per pixel of the root window of the
 |      screen of this widget.
 |
 |  winfo_screenheight(self)
 |      Return the number of pixels of the height of the screen of this widget
 |      in pixel.
 |
 |  winfo_screenmmheight(self)
 |      Return the number of pixels of the height of the screen of
 |      this widget in mm.
 |
 |  winfo_screenmmwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in mm.
 |
 |  winfo_screenvisual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the default
 |      colormodel of this screen.
 |
 |  winfo_screenwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in pixel.
 |
 |  winfo_server(self)
 |      Return information of the X-Server of the screen of this widget in
 |      the form "XmajorRminor vendor vendorVersion".
 |
 |  winfo_toplevel(self)
 |      Return the toplevel widget of this widget.
 |
 |  winfo_viewable(self)
 |      Return true if the widget and all its higher ancestors are mapped.
 |
 |  winfo_visual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the
 |      colormodel of this widget.
 |
 |  winfo_visualid(self)
 |      Return the X identifier for the visual for this widget.
 |
 |  winfo_visualsavailable(self, includeids=False)
 |      Return a list of all visuals available for the screen
 |      of this widget.
 |
 |      Each item in the list consists of a visual name (see winfo_visual), a
 |      depth and if includeids is true is given also the X identifier.
 |
 |  winfo_vrootheight(self)
 |      Return the height of the virtual root window associated with this
 |      widget in pixels. If there is no virtual root window return the
 |      height of the screen.
 |
 |  winfo_vrootwidth(self)
 |      Return the width of the virtual root window associated with this
 |      widget in pixel. If there is no virtual root window return the
 |      width of the screen.
 |
 |  winfo_vrootx(self)
 |      Return the x offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_vrooty(self)
 |      Return the y offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_width(self)
 |      Return the width of this widget.
 |
 |  winfo_x(self)
 |      Return the x coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  winfo_y(self)
 |      Return the y coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from tkinter.Misc:
 |
 |  __dict__
 |      dictionary for instance variables
 |
 |  __weakref__
 |      list of weak references to the object
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Pack:
 |
 |  forget = pack_forget(self)
 |
 |  info = pack_info(self)
 |
 |  pack = pack_configure(self, cnf={}, **kw)
 |
 |  pack_configure(self, cnf={}, **kw)
 |      Pack a widget in the parent widget. Use as options:
 |      after=widget - pack it after you have packed widget
 |      anchor=NSEW (or subset) - position widget according to
 |                                given direction
 |      before=widget - pack it before you will pack widget
 |      expand=bool - expand widget if parent size grows
 |      fill=NONE or X or Y or BOTH - fill widget if widget grows
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
 |
 |  pack_forget(self)
 |      Unmap this widget and do not use it for the packing order.
 |
 |  pack_info(self)
 |      Return information about the packing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Place:
 |
 |  place = place_configure(self, cnf={}, **kw)
 |
 |  place_configure(self, cnf={}, **kw)
 |      Place a widget in the parent widget. Use as options:
 |      in=master - master relative to which the widget is placed
 |      in_=master - see 'in' option description
 |      x=amount - locate anchor of this widget at position x of master
 |      y=amount - locate anchor of this widget at position y of master
 |      relx=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to width of master (1.0 is right edge)
 |      rely=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to height of master (1.0 is bottom edge)
 |      anchor=NSEW (or subset) - position anchor according to given direction
 |      width=amount - width of this widget in pixel
 |      height=amount - height of this widget in pixel
 |      relwidth=amount - width of this widget between 0.0 and 1.0
 |                        relative to width of master (1.0 is the same width
 |                        as the master)
 |      relheight=amount - height of this widget between 0.0 and 1.0
 |                         relative to height of master (1.0 is the same
 |                         height as the master)
 |      bordermode="inside" or "outside" - whether to take border width of
 |                                         master widget into account
 |
 |  place_forget(self)
 |      Unmap this widget.
 |
 |  place_info(self)
 |      Return information about the placing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Grid:
 |
 |  grid = grid_configure(self, cnf={}, **kw)
 |
 |  grid_configure(self, cnf={}, **kw)
 |      Position a widget in the parent widget in a grid. Use as options:
 |      column=number - use cell identified with given column (starting with 0)
 |      columnspan=number - this widget will span several columns
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      row=number - use cell identified with given row (starting with 0)
 |      rowspan=number - this widget will span several rows
 |      sticky=NSEW - if cell is larger on which sides will this
 |                    widget stick to the cell boundary
 |
 |  grid_forget(self)
 |      Unmap this widget.
 |
 |  grid_info(self)
 |      Return information about the options
 |      for positioning this widget in a grid.
 |
 |  grid_remove(self)
 |      Unmap this widget but remember the grid options.
 |
 |  location = grid_location(self, x, y)

None
Help on class Panedwindow in module tkinter.ttk:

class Panedwindow(Widget, tkinter.PanedWindow)
 |  Panedwindow(master=None, **kw)
 |
 |  Ttk Panedwindow widget displays a number of subwindows, stacked
 |  either vertically or horizontally.
 |
 |  Method resolution order:
 |      Panedwindow
 |      Widget
 |      tkinter.PanedWindow
 |      tkinter.Widget
 |      tkinter.BaseWidget
 |      tkinter.Misc
 |      tkinter.Pack
 |      tkinter.Place
 |      tkinter.Grid
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  __init__(self, master=None, **kw)
 |      Construct a Ttk Panedwindow with parent master.
 |
 |      STANDARD OPTIONS
 |
 |          class, cursor, style, takefocus
 |
 |      WIDGET-SPECIFIC OPTIONS
 |
 |          orient, width, height
 |
 |      PANE OPTIONS
 |
 |          weight
 |
 |  forget = remove(self, child)
 |
 |  insert(self, pos, child, **kw)
 |      Inserts a pane at the specified positions.
 |
 |      pos is either the string end, and integer index, or the name
 |      of a child. If child is already managed by the paned window,
 |      moves it to the specified position.
 |
 |  pane(self, pane, option=None, **kw)
 |      Query or modify the options of the specified pane.
 |
 |      pane is either an integer index or the name of a managed subwindow.
 |      If kw is not given, returns a dict of the pane option values. If
 |      option is specified then the value for that option is returned.
 |      Otherwise, sets the options to the corresponding values.
 |
 |  sashpos(self, index, newpos=None)
 |      If newpos is specified, sets the position of sash number index.
 |
 |      May adjust the positions of adjacent sashes to ensure that
 |      positions are monotonically increasing. Sash positions are further
 |      constrained to be between 0 and the total size of the widget.
 |
 |      Returns the new position of sash number index.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from Widget:
 |
 |  identify(self, x, y)
 |      Returns the name of the element at position x, y, or the empty
 |      string if the point does not lie within any element.
 |
 |      x and y are pixel coordinates relative to the widget.
 |
 |  instate(self, statespec, callback=None, *args, **kw)
 |      Test the widget's state.
 |
 |      If callback is not specified, returns True if the widget state
 |      matches statespec and False otherwise. If callback is specified,
 |      then it will be invoked with *args, **kw if the widget state
 |      matches statespec. statespec is expected to be a sequence.
 |
 |  state(self, statespec=None)
 |      Modify or inquire widget state.
 |
 |      Widget state is returned if statespec is None, otherwise it is
 |      set according to the statespec flags and then a new state spec
 |      is returned indicating which flags were changed. statespec is
 |      expected to be a sequence.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.PanedWindow:
 |
 |  add(self, child, **kw)
 |      Add a child widget to the panedwindow in a new pane.
 |
 |      The child argument is the name of the child widget
 |      followed by pairs of arguments that specify how to
 |      manage the windows. The possible options and values
 |      are the ones accepted by the paneconfigure method.
 |
 |  panecget(self, child, option)
 |      Query a management option for window.
 |
 |      Option may be any value allowed by the paneconfigure subcommand
 |
 |  paneconfig = paneconfigure(self, tagOrId, cnf=None, **kw)
 |
 |  paneconfigure(self, tagOrId, cnf=None, **kw)
 |      Query or modify the management options for window.
 |
 |      If no option is specified, returns a list describing all
 |      of the available options for pathName.  If option is
 |      specified with no value, then the command returns a list
 |      describing the one named option (this list will be identical
 |      to the corresponding sublist of the value returned if no
 |      option is specified). If one or more option-value pairs are
 |      specified, then the command modifies the given widget
 |      option(s) to have the given value(s); in this case the
 |      command returns an empty string. The following options
 |      are supported:
 |
 |      after window
 |          Insert the window after the window specified. window
 |          should be the name of a window already managed by pathName.
 |      before window
 |          Insert the window before the window specified. window
 |          should be the name of a window already managed by pathName.
 |      height size
 |          Specify a height for the window. The height will be the
 |          outer dimension of the window including its border, if
 |          any. If size is an empty string, or if -height is not
 |          specified, then the height requested internally by the
 |          window will be used initially; the height may later be
 |          adjusted by the movement of sashes in the panedwindow.
 |          Size may be any value accepted by Tk_GetPixels.
 |      minsize n
 |          Specifies that the size of the window cannot be made
 |          less than n. This constraint only affects the size of
 |          the widget in the paned dimension -- the x dimension
 |          for horizontal panedwindows, the y dimension for
 |          vertical panedwindows. May be any value accepted by
 |          Tk_GetPixels.
 |      padx n
 |          Specifies a non-negative value indicating how much
 |          extra space to leave on each side of the window in
 |          the X-direction. The value may have any of the forms
 |          accepted by Tk_GetPixels.
 |      pady n
 |          Specifies a non-negative value indicating how much
 |          extra space to leave on each side of the window in
 |          the Y-direction. The value may have any of the forms
 |          accepted by Tk_GetPixels.
 |      sticky style
 |          If a window's pane is larger than the requested
 |          dimensions of the window, this option may be used
 |          to position (or stretch) the window within its pane.
 |          Style is a string that contains zero or more of the
 |          characters n, s, e or w. The string can optionally
 |          contains spaces or commas, but they are ignored. Each
 |          letter refers to a side (north, south, east, or west)
 |          that the window will "stick" to. If both n and s
 |          (or e and w) are specified, the window will be
 |          stretched to fill the entire height (or width) of
 |          its cavity.
 |      width size
 |          Specify a width for the window. The width will be
 |          the outer dimension of the window including its
 |          border, if any. If size is an empty string, or
 |          if -width is not specified, then the width requested
 |          internally by the window will be used initially; the
 |          width may later be adjusted by the movement of sashes
 |          in the panedwindow. Size may be any value accepted by
 |          Tk_GetPixels.
 |
 |  panes(self)
 |      Returns an ordered list of the child panes.
 |
 |  proxy(self, *args)
 |      Internal function.
 |
 |  proxy_coord(self)
 |      Return the x and y pair of the most recent proxy location
 |
 |  proxy_forget(self)
 |      Remove the proxy from the display.
 |
 |  proxy_place(self, x, y)
 |      Place the proxy at the given x and y coordinates.
 |
 |  remove(self, child)
 |      Remove the pane containing child from the panedwindow
 |
 |      All geometry management options for child will be forgotten.
 |
 |  sash(self, *args)
 |      Internal function.
 |
 |  sash_coord(self, index)
 |      Return the current x and y pair for the sash given by index.
 |
 |      Index must be an integer between 0 and 1 less than the
 |      number of panes in the panedwindow. The coordinates given are
 |      those of the top left corner of the region containing the sash.
 |      pathName sash dragto index x y This command computes the
 |      difference between the given coordinates and the coordinates
 |      given to the last sash coord command for the given sash. It then
 |      moves that sash the computed difference. The return value is the
 |      empty string.
 |
 |  sash_mark(self, index)
 |      Records x and y for the sash given by index;
 |
 |      Used in conjunction with later dragto commands to move the sash.
 |
 |  sash_place(self, index, x, y)
 |      Place the sash given by index at the given coordinates
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.BaseWidget:
 |
 |  destroy(self)
 |      Destroy this and all descendants widgets.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Misc:
 |
 |  __getitem__ = cget(self, key)
 |
 |  __repr__(self)
 |      Return repr(self).
 |
 |  __setitem__(self, key, value)
 |
 |  __str__(self)
 |      Return the window path name of this widget.
 |
 |  after(self, ms, func=None, *args)
 |      Call function once after given time.
 |
 |      MS specifies the time in milliseconds. FUNC gives the
 |      function which shall be called. Additional parameters
 |      are given as parameters to the function call.  Return
 |      identifier to cancel scheduling with after_cancel.
 |
 |  after_cancel(self, id)
 |      Cancel scheduling of function identified with ID.
 |
 |      Identifier returned by after or after_idle must be
 |      given as first parameter.
 |
 |  after_idle(self, func, *args)
 |      Call FUNC once if the Tcl main loop has no event to
 |      process.
 |
 |      Return an identifier to cancel the scheduling with
 |      after_cancel.
 |
 |  anchor = grid_anchor(self, anchor=None)
 |
 |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |
 |  bell(self, displayof=0)
 |      Ring a display's bell.
 |
 |  bind(self, sequence=None, func=None, add=None)
 |      Bind to this widget at event SEQUENCE a call to function FUNC.
 |
 |      SEQUENCE is a string of concatenated event
 |      patterns. An event pattern is of the form
 |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
 |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
 |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
 |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
 |      Mod1, M1. TYPE is one of Activate, Enter, Map,
 |      ButtonPress, Button, Expose, Motion, ButtonRelease
 |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
 |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
 |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
 |      Leave and DETAIL is the button number for ButtonPress,
 |      ButtonRelease and DETAIL is the Keysym for KeyPress and
 |      KeyRelease. Examples are
 |      <Control-Button-1> for pressing Control and mouse button 1 or
 |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
 |      An event pattern can also be a virtual event of the form
 |      <<AString>> where AString can be arbitrary. This
 |      event can be generated by event_generate.
 |      If events are concatenated they must appear shortly
 |      after each other.
 |
 |      FUNC will be called if the event sequence occurs with an
 |      instance of Event as argument. If the return value of FUNC is
 |      "break" no further bound function is invoked.
 |
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function.
 |
 |      Bind will return an identifier to allow deletion of the bound function with
 |      unbind without memory leak.
 |
 |      If FUNC or SEQUENCE is omitted the bound function or list
 |      of bound events are returned.
 |
 |  bind_all(self, sequence=None, func=None, add=None)
 |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function. See bind for the return value.
 |
 |  bind_class(self, className, sequence=None, func=None, add=None)
 |      Bind to widgets with bindtag CLASSNAME at event
 |      SEQUENCE a call of function FUNC. An additional
 |      boolean parameter ADD specifies whether FUNC will be
 |      called additionally to the other bound function or
 |      whether it will replace the previous function. See bind for
 |      the return value.
 |
 |  bindtags(self, tagList=None)
 |      Set or get the list of bindtags for this widget.
 |
 |      With no argument return the list of all bindtags associated with
 |      this widget. With a list of strings as argument the bindtags are
 |      set to this list. The bindtags determine in which order events are
 |      processed (see bind).
 |
 |  cget(self, key)
 |      Return the resource value for a KEY given as string.
 |
 |  clipboard_append(self, string, **kw)
 |      Append STRING to the Tk clipboard.
 |
 |      A widget specified at the optional displayof keyword
 |      argument specifies the target display. The clipboard
 |      can be retrieved with selection_get.
 |
 |  clipboard_clear(self, **kw)
 |      Clear the data in the Tk clipboard.
 |
 |      A widget specified for the optional displayof keyword
 |      argument specifies the target display.
 |
 |  clipboard_get(self, **kw)
 |      Retrieve data from the clipboard on window's display.
 |
 |      The window keyword defaults to the root window of the Tkinter
 |      application.
 |
 |      The type keyword specifies the form in which the data is
 |      to be returned and should be an atom name such as STRING
 |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
 |      is to try UTF8_STRING and fall back to STRING.
 |
 |      This command is equivalent to:
 |
 |      selection_get(CLIPBOARD)
 |
 |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
 |
 |  config = configure(self, cnf=None, **kw)
 |
 |  configure(self, cnf=None, **kw)
 |      Configure resources of a widget.
 |
 |      The values for resources are specified as keyword
 |      arguments. To get an overview about
 |      the allowed keyword arguments call the method keys.
 |
 |  deletecommand(self, name)
 |      Internal function.
 |
 |      Delete the Tcl command provided in NAME.
 |
 |  event_add(self, virtual, *sequences)
 |      Bind a virtual event VIRTUAL (of the form <<Name>>)
 |      to an event SEQUENCE such that the virtual event is triggered
 |      whenever SEQUENCE occurs.
 |
 |  event_delete(self, virtual, *sequences)
 |      Unbind a virtual event VIRTUAL from SEQUENCE.
 |
 |  event_generate(self, sequence, **kw)
 |      Generate an event SEQUENCE. Additional
 |      keyword arguments specify parameter of the event
 |      (e.g. x, y, rootx, rooty).
 |
 |  event_info(self, virtual=None)
 |      Return a list of all virtual events or the information
 |      about the SEQUENCE bound to the virtual event VIRTUAL.
 |
 |  focus = focus_set(self)
 |
 |  focus_displayof(self)
 |      Return the widget which has currently the focus on the
 |      display where this widget is located.
 |
 |      Return None if the application does not have the focus.
 |
 |  focus_force(self)
 |      Direct input focus to this widget even if the
 |      application does not have the focus. Use with
 |      caution!
 |
 |  focus_get(self)
 |      Return the widget which has currently the focus in the
 |      application.
 |
 |      Use focus_displayof to allow working with several
 |      displays. Return None if application does not have
 |      the focus.
 |
 |  focus_lastfor(self)
 |      Return the widget which would have the focus if top level
 |      for this widget gets the focus from the window manager.
 |
 |  focus_set(self)
 |      Direct input focus to this widget.
 |
 |      If the application currently does not have the focus
 |      this widget will get the focus if the application gets
 |      the focus through the window manager.
 |
 |  getboolean(self, s)
 |      Return a boolean value for Tcl boolean values true and false given as parameter.
 |
 |  getdouble(self, s)
 |
 |  getint(self, s)
 |
 |  getvar(self, name='PY_VAR')
 |      Return value of Tcl variable NAME.
 |
 |  grab_current(self)
 |      Return widget which has currently the grab in this application
 |      or None.
 |
 |  grab_release(self)
 |      Release grab for this widget if currently set.
 |
 |  grab_set(self)
 |      Set grab for this widget.
 |
 |      A grab directs all events to this and descendant
 |      widgets in the application.
 |
 |  grab_set_global(self)
 |      Set global grab for this widget.
 |
 |      A global grab directs all events to this and
 |      descendant widgets on the display. Use with caution -
 |      other applications do not get events anymore.
 |
 |  grab_status(self)
 |      Return None, "local" or "global" if this widget has
 |      no, a local or a global grab.
 |
 |  grid_anchor(self, anchor=None)
 |      The anchor value controls how to place the grid within the
 |      master when no row/column has any weight.
 |
 |      The default anchor is nw.
 |
 |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |      Return a tuple of integer coordinates for the bounding
 |      box of this widget controlled by the geometry manager grid.
 |
 |      If COLUMN, ROW is given the bounding box applies from
 |      the cell with row and column 0 to the specified
 |      cell. If COL2 and ROW2 are given the bounding box
 |      starts at that cell.
 |
 |      The returned integers specify the offset of the upper left
 |      corner in the master widget and the width and height.
 |
 |  grid_columnconfigure(self, index, cnf={}, **kw)
 |      Configure column INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the column),
 |      weight (how much does additional space propagate to this column)
 |      and pad (how much space to let additionally).
 |
 |  grid_location(self, x, y)
 |      Return a tuple of column and row which identify the cell
 |      at which the pixel at position X and Y inside the master
 |      widget is located.
 |
 |  grid_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given, the current setting will be returned.
 |
 |  grid_rowconfigure(self, index, cnf={}, **kw)
 |      Configure row INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the row),
 |      weight (how much does additional space propagate to this row)
 |      and pad (how much space to let additionally).
 |
 |  grid_size(self)
 |      Return a tuple of the number of column and rows in the grid.
 |
 |  grid_slaves(self, row=None, column=None)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  image_names(self)
 |      Return a list of all existing image names.
 |
 |  image_types(self)
 |      Return a list of all available image types (e.g. photo bitmap).
 |
 |  info_patchlevel(self)
 |      Returns the exact version of the Tcl library.
 |
 |  keys(self)
 |      Return a list of all resource names of this widget.
 |
 |  lift = tkraise(self, aboveThis=None)
 |
 |  lower(self, belowThis=None)
 |      Lower this widget in the stacking order.
 |
 |  mainloop(self, n=0)
 |      Call the mainloop of Tk.
 |
 |  nametowidget(self, name)
 |      Return the Tkinter instance of a widget identified by
 |      its Tcl name NAME.
 |
 |  option_add(self, pattern, value, priority=None)
 |      Set a VALUE (second parameter) for an option
 |      PATTERN (first parameter).
 |
 |      An optional third parameter gives the numeric priority
 |      (defaults to 80).
 |
 |  option_clear(self)
 |      Clear the option database.
 |
 |      It will be reloaded if option_add is called.
 |
 |  option_get(self, name, className)
 |      Return the value for an option NAME for this widget
 |      with CLASSNAME.
 |
 |      Values with higher priority override lower values.
 |
 |  option_readfile(self, fileName, priority=None)
 |      Read file FILENAME into the option database.
 |
 |      An optional second parameter gives the numeric
 |      priority.
 |
 |  pack_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given the current setting will be returned.
 |
 |  pack_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  place_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  propagate = pack_propagate(self, flag=['_noarg_'])
 |
 |  quit(self)
 |      Quit the Tcl interpreter. All widgets will be destroyed.
 |
 |  register = _register(self, func, subst=None, needcleanup=1)
 |
 |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
 |
 |  selection_clear(self, **kw)
 |      Clear the current X selection.
 |
 |  selection_get(self, **kw)
 |      Return the contents of the current X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection and defaults to PRIMARY.  A keyword
 |      parameter displayof specifies a widget on the display
 |      to use. A keyword parameter type specifies the form of data to be
 |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
 |      before STRING.
 |
 |  selection_handle(self, command, **kw)
 |      Specify a function COMMAND to call if the X
 |      selection owned by this widget is queried by another
 |      application.
 |
 |      This function must return the contents of the
 |      selection. The function will be called with the
 |      arguments OFFSET and LENGTH which allows the chunking
 |      of very long selections. The following keyword
 |      parameters can be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  selection_own(self, **kw)
 |      Become owner of X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection (default PRIMARY).
 |
 |  selection_own_get(self, **kw)
 |      Return owner of X selection.
 |
 |      The following keyword parameter can
 |      be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  send(self, interp, cmd, *args)
 |      Send Tcl command CMD to different interpreter INTERP to be executed.
 |
 |  setvar(self, name='PY_VAR', value='1')
 |      Set Tcl variable NAME to VALUE.
 |
 |  size = grid_size(self)
 |
 |  slaves = pack_slaves(self)
 |
 |  tk_bisque(self)
 |      Change the color scheme to light brown as used in Tk 3.6 and before.
 |
 |  tk_focusFollowsMouse(self)
 |      The widget under mouse will get automatically focus. Can not
 |      be disabled easily.
 |
 |  tk_focusNext(self)
 |      Return the next widget in the focus order which follows
 |      widget which has currently the focus.
 |
 |      The focus order first goes to the next child, then to
 |      the children of the child recursively and then to the
 |      next sibling which is higher in the stacking order.  A
 |      widget is omitted if it has the takefocus resource set
 |      to 0.
 |
 |  tk_focusPrev(self)
 |      Return previous widget in the focus order. See tk_focusNext for details.
 |
 |  tk_setPalette(self, *args, **kw)
 |      Set a new color scheme for all widget elements.
 |
 |      A single color as argument will cause that all colors of Tk
 |      widget elements are derived from this.
 |      Alternatively several keyword parameters and its associated
 |      colors can be given. The following keywords are valid:
 |      activeBackground, foreground, selectColor,
 |      activeForeground, highlightBackground, selectBackground,
 |      background, highlightColor, selectForeground,
 |      disabledForeground, insertBackground, troughColor.
 |
 |  tk_strictMotif(self, boolean=None)
 |      Set Tcl internal variable, whether the look and feel
 |      should adhere to Motif.
 |
 |      A parameter of 1 means adhere to Motif (e.g. no color
 |      change if mouse passes over slider).
 |      Returns the set value.
 |
 |  tkraise(self, aboveThis=None)
 |      Raise this widget in the stacking order.
 |
 |  unbind(self, sequence, funcid=None)
 |      Unbind for this widget the event SEQUENCE.
 |
 |      If FUNCID is given, only unbind the function identified with FUNCID
 |      and also delete the corresponding Tcl command.
 |
 |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
 |      unbound.
 |
 |  unbind_all(self, sequence)
 |      Unbind for all widgets for event SEQUENCE all functions.
 |
 |  unbind_class(self, className, sequence)
 |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
 |      all functions.
 |
 |  update(self)
 |      Enter event loop until all pending events have been processed by Tcl.
 |
 |  update_idletasks(self)
 |      Enter event loop until all idle callbacks have been called. This
 |      will update the display of windows but not process events caused by
 |      the user.
 |
 |  wait_variable(self, name='PY_VAR')
 |      Wait until the variable is modified.
 |
 |      A parameter of type IntVar, StringVar, DoubleVar or
 |      BooleanVar must be given.
 |
 |  wait_visibility(self, window=None)
 |      Wait until the visibility of a WIDGET changes
 |      (e.g. it appears).
 |
 |      If no parameter is given self is used.
 |
 |  wait_window(self, window=None)
 |      Wait until a WIDGET is destroyed.
 |
 |      If no parameter is given self is used.
 |
 |  waitvar = wait_variable(self, name='PY_VAR')
 |
 |  winfo_atom(self, name, displayof=0)
 |      Return integer which represents atom NAME.
 |
 |  winfo_atomname(self, id, displayof=0)
 |      Return name of atom with identifier ID.
 |
 |  winfo_cells(self)
 |      Return number of cells in the colormap for this widget.
 |
 |  winfo_children(self)
 |      Return a list of all widgets which are children of this widget.
 |
 |  winfo_class(self)
 |      Return window class name of this widget.
 |
 |  winfo_colormapfull(self)
 |      Return True if at the last color request the colormap was full.
 |
 |  winfo_containing(self, rootX, rootY, displayof=0)
 |      Return the widget which is at the root coordinates ROOTX, ROOTY.
 |
 |  winfo_depth(self)
 |      Return the number of bits per pixel.
 |
 |  winfo_exists(self)
 |      Return true if this widget exists.
 |
 |  winfo_fpixels(self, number)
 |      Return the number of pixels for the given distance NUMBER
 |      (e.g. "3c") as float.
 |
 |  winfo_geometry(self)
 |      Return geometry string for this widget in the form "widthxheight+X+Y".
 |
 |  winfo_height(self)
 |      Return height of this widget.
 |
 |  winfo_id(self)
 |      Return identifier ID for this widget.
 |
 |  winfo_interps(self, displayof=0)
 |      Return the name of all Tcl interpreters for this display.
 |
 |  winfo_ismapped(self)
 |      Return true if this widget is mapped.
 |
 |  winfo_manager(self)
 |      Return the window manager name for this widget.
 |
 |  winfo_name(self)
 |      Return the name of this widget.
 |
 |  winfo_parent(self)
 |      Return the name of the parent of this widget.
 |
 |  winfo_pathname(self, id, displayof=0)
 |      Return the pathname of the widget given by ID.
 |
 |  winfo_pixels(self, number)
 |      Rounded integer value of winfo_fpixels.
 |
 |  winfo_pointerx(self)
 |      Return the x coordinate of the pointer on the root window.
 |
 |  winfo_pointerxy(self)
 |      Return a tuple of x and y coordinates of the pointer on the root window.
 |
 |  winfo_pointery(self)
 |      Return the y coordinate of the pointer on the root window.
 |
 |  winfo_reqheight(self)
 |      Return requested height of this widget.
 |
 |  winfo_reqwidth(self)
 |      Return requested width of this widget.
 |
 |  winfo_rgb(self, color)
 |      Return a tuple of integer RGB values in range(65536) for color in this widget.
 |
 |  winfo_rootx(self)
 |      Return x coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_rooty(self)
 |      Return y coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_screen(self)
 |      Return the screen name of this widget.
 |
 |  winfo_screencells(self)
 |      Return the number of the cells in the colormap of the screen
 |      of this widget.
 |
 |  winfo_screendepth(self)
 |      Return the number of bits per pixel of the root window of the
 |      screen of this widget.
 |
 |  winfo_screenheight(self)
 |      Return the number of pixels of the height of the screen of this widget
 |      in pixel.
 |
 |  winfo_screenmmheight(self)
 |      Return the number of pixels of the height of the screen of
 |      this widget in mm.
 |
 |  winfo_screenmmwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in mm.
 |
 |  winfo_screenvisual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the default
 |      colormodel of this screen.
 |
 |  winfo_screenwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in pixel.
 |
 |  winfo_server(self)
 |      Return information of the X-Server of the screen of this widget in
 |      the form "XmajorRminor vendor vendorVersion".
 |
 |  winfo_toplevel(self)
 |      Return the toplevel widget of this widget.
 |
 |  winfo_viewable(self)
 |      Return true if the widget and all its higher ancestors are mapped.
 |
 |  winfo_visual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the
 |      colormodel of this widget.
 |
 |  winfo_visualid(self)
 |      Return the X identifier for the visual for this widget.
 |
 |  winfo_visualsavailable(self, includeids=False)
 |      Return a list of all visuals available for the screen
 |      of this widget.
 |
 |      Each item in the list consists of a visual name (see winfo_visual), a
 |      depth and if includeids is true is given also the X identifier.
 |
 |  winfo_vrootheight(self)
 |      Return the height of the virtual root window associated with this
 |      widget in pixels. If there is no virtual root window return the
 |      height of the screen.
 |
 |  winfo_vrootwidth(self)
 |      Return the width of the virtual root window associated with this
 |      widget in pixel. If there is no virtual root window return the
 |      width of the screen.
 |
 |  winfo_vrootx(self)
 |      Return the x offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_vrooty(self)
 |      Return the y offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_width(self)
 |      Return the width of this widget.
 |
 |  winfo_x(self)
 |      Return the x coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  winfo_y(self)
 |      Return the y coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from tkinter.Misc:
 |
 |  __dict__
 |      dictionary for instance variables
 |
 |  __weakref__
 |      list of weak references to the object
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Pack:
 |
 |  info = pack_info(self)
 |
 |  pack = pack_configure(self, cnf={}, **kw)
 |
 |  pack_configure(self, cnf={}, **kw)
 |      Pack a widget in the parent widget. Use as options:
 |      after=widget - pack it after you have packed widget
 |      anchor=NSEW (or subset) - position widget according to
 |                                given direction
 |      before=widget - pack it before you will pack widget
 |      expand=bool - expand widget if parent size grows
 |      fill=NONE or X or Y or BOTH - fill widget if widget grows
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
 |
 |  pack_forget(self)
 |      Unmap this widget and do not use it for the packing order.
 |
 |  pack_info(self)
 |      Return information about the packing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Place:
 |
 |  place = place_configure(self, cnf={}, **kw)
 |
 |  place_configure(self, cnf={}, **kw)
 |      Place a widget in the parent widget. Use as options:
 |      in=master - master relative to which the widget is placed
 |      in_=master - see 'in' option description
 |      x=amount - locate anchor of this widget at position x of master
 |      y=amount - locate anchor of this widget at position y of master
 |      relx=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to width of master (1.0 is right edge)
 |      rely=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to height of master (1.0 is bottom edge)
 |      anchor=NSEW (or subset) - position anchor according to given direction
 |      width=amount - width of this widget in pixel
 |      height=amount - height of this widget in pixel
 |      relwidth=amount - width of this widget between 0.0 and 1.0
 |                        relative to width of master (1.0 is the same width
 |                        as the master)
 |      relheight=amount - height of this widget between 0.0 and 1.0
 |                         relative to height of master (1.0 is the same
 |                         height as the master)
 |      bordermode="inside" or "outside" - whether to take border width of
 |                                         master widget into account
 |
 |  place_forget(self)
 |      Unmap this widget.
 |
 |  place_info(self)
 |      Return information about the placing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Grid:
 |
 |  grid = grid_configure(self, cnf={}, **kw)
 |
 |  grid_configure(self, cnf={}, **kw)
 |      Position a widget in the parent widget in a grid. Use as options:
 |      column=number - use cell identified with given column (starting with 0)
 |      columnspan=number - this widget will span several columns
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      row=number - use cell identified with given row (starting with 0)
 |      rowspan=number - this widget will span several rows
 |      sticky=NSEW - if cell is larger on which sides will this
 |                    widget stick to the cell boundary
 |
 |  grid_forget(self)
 |      Unmap this widget.
 |
 |  grid_info(self)
 |      Return information about the options
 |      for positioning this widget in a grid.
 |
 |  grid_remove(self)
 |      Unmap this widget but remember the grid options.
 |
 |  location = grid_location(self, x, y)

None
Help on class Panedwindow in module tkinter.ttk:

class Panedwindow(Widget, tkinter.PanedWindow)
 |  Panedwindow(master=None, **kw)
 |
 |  Ttk Panedwindow widget displays a number of subwindows, stacked
 |  either vertically or horizontally.
 |
 |  Method resolution order:
 |      Panedwindow
 |      Widget
 |      tkinter.PanedWindow
 |      tkinter.Widget
 |      tkinter.BaseWidget
 |      tkinter.Misc
 |      tkinter.Pack
 |      tkinter.Place
 |      tkinter.Grid
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  __init__(self, master=None, **kw)
 |      Construct a Ttk Panedwindow with parent master.
 |
 |      STANDARD OPTIONS
 |
 |          class, cursor, style, takefocus
 |
 |      WIDGET-SPECIFIC OPTIONS
 |
 |          orient, width, height
 |
 |      PANE OPTIONS
 |
 |          weight
 |
 |  forget = remove(self, child)
 |
 |  insert(self, pos, child, **kw)
 |      Inserts a pane at the specified positions.
 |
 |      pos is either the string end, and integer index, or the name
 |      of a child. If child is already managed by the paned window,
 |      moves it to the specified position.
 |
 |  pane(self, pane, option=None, **kw)
 |      Query or modify the options of the specified pane.
 |
 |      pane is either an integer index or the name of a managed subwindow.
 |      If kw is not given, returns a dict of the pane option values. If
 |      option is specified then the value for that option is returned.
 |      Otherwise, sets the options to the corresponding values.
 |
 |  sashpos(self, index, newpos=None)
 |      If newpos is specified, sets the position of sash number index.
 |
 |      May adjust the positions of adjacent sashes to ensure that
 |      positions are monotonically increasing. Sash positions are further
 |      constrained to be between 0 and the total size of the widget.
 |
 |      Returns the new position of sash number index.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from Widget:
 |
 |  identify(self, x, y)
 |      Returns the name of the element at position x, y, or the empty
 |      string if the point does not lie within any element.
 |
 |      x and y are pixel coordinates relative to the widget.
 |
 |  instate(self, statespec, callback=None, *args, **kw)
 |      Test the widget's state.
 |
 |      If callback is not specified, returns True if the widget state
 |      matches statespec and False otherwise. If callback is specified,
 |      then it will be invoked with *args, **kw if the widget state
 |      matches statespec. statespec is expected to be a sequence.
 |
 |  state(self, statespec=None)
 |      Modify or inquire widget state.
 |
 |      Widget state is returned if statespec is None, otherwise it is
 |      set according to the statespec flags and then a new state spec
 |      is returned indicating which flags were changed. statespec is
 |      expected to be a sequence.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.PanedWindow:
 |
 |  add(self, child, **kw)
 |      Add a child widget to the panedwindow in a new pane.
 |
 |      The child argument is the name of the child widget
 |      followed by pairs of arguments that specify how to
 |      manage the windows. The possible options and values
 |      are the ones accepted by the paneconfigure method.
 |
 |  panecget(self, child, option)
 |      Query a management option for window.
 |
 |      Option may be any value allowed by the paneconfigure subcommand
 |
 |  paneconfig = paneconfigure(self, tagOrId, cnf=None, **kw)
 |
 |  paneconfigure(self, tagOrId, cnf=None, **kw)
 |      Query or modify the management options for window.
 |
 |      If no option is specified, returns a list describing all
 |      of the available options for pathName.  If option is
 |      specified with no value, then the command returns a list
 |      describing the one named option (this list will be identical
 |      to the corresponding sublist of the value returned if no
 |      option is specified). If one or more option-value pairs are
 |      specified, then the command modifies the given widget
 |      option(s) to have the given value(s); in this case the
 |      command returns an empty string. The following options
 |      are supported:
 |
 |      after window
 |          Insert the window after the window specified. window
 |          should be the name of a window already managed by pathName.
 |      before window
 |          Insert the window before the window specified. window
 |          should be the name of a window already managed by pathName.
 |      height size
 |          Specify a height for the window. The height will be the
 |          outer dimension of the window including its border, if
 |          any. If size is an empty string, or if -height is not
 |          specified, then the height requested internally by the
 |          window will be used initially; the height may later be
 |          adjusted by the movement of sashes in the panedwindow.
 |          Size may be any value accepted by Tk_GetPixels.
 |      minsize n
 |          Specifies that the size of the window cannot be made
 |          less than n. This constraint only affects the size of
 |          the widget in the paned dimension -- the x dimension
 |          for horizontal panedwindows, the y dimension for
 |          vertical panedwindows. May be any value accepted by
 |          Tk_GetPixels.
 |      padx n
 |          Specifies a non-negative value indicating how much
 |          extra space to leave on each side of the window in
 |          the X-direction. The value may have any of the forms
 |          accepted by Tk_GetPixels.
 |      pady n
 |          Specifies a non-negative value indicating how much
 |          extra space to leave on each side of the window in
 |          the Y-direction. The value may have any of the forms
 |          accepted by Tk_GetPixels.
 |      sticky style
 |          If a window's pane is larger than the requested
 |          dimensions of the window, this option may be used
 |          to position (or stretch) the window within its pane.
 |          Style is a string that contains zero or more of the
 |          characters n, s, e or w. The string can optionally
 |          contains spaces or commas, but they are ignored. Each
 |          letter refers to a side (north, south, east, or west)
 |          that the window will "stick" to. If both n and s
 |          (or e and w) are specified, the window will be
 |          stretched to fill the entire height (or width) of
 |          its cavity.
 |      width size
 |          Specify a width for the window. The width will be
 |          the outer dimension of the window including its
 |          border, if any. If size is an empty string, or
 |          if -width is not specified, then the width requested
 |          internally by the window will be used initially; the
 |          width may later be adjusted by the movement of sashes
 |          in the panedwindow. Size may be any value accepted by
 |          Tk_GetPixels.
 |
 |  panes(self)
 |      Returns an ordered list of the child panes.
 |
 |  proxy(self, *args)
 |      Internal function.
 |
 |  proxy_coord(self)
 |      Return the x and y pair of the most recent proxy location
 |
 |  proxy_forget(self)
 |      Remove the proxy from the display.
 |
 |  proxy_place(self, x, y)
 |      Place the proxy at the given x and y coordinates.
 |
 |  remove(self, child)
 |      Remove the pane containing child from the panedwindow
 |
 |      All geometry management options for child will be forgotten.
 |
 |  sash(self, *args)
 |      Internal function.
 |
 |  sash_coord(self, index)
 |      Return the current x and y pair for the sash given by index.
 |
 |      Index must be an integer between 0 and 1 less than the
 |      number of panes in the panedwindow. The coordinates given are
 |      those of the top left corner of the region containing the sash.
 |      pathName sash dragto index x y This command computes the
 |      difference between the given coordinates and the coordinates
 |      given to the last sash coord command for the given sash. It then
 |      moves that sash the computed difference. The return value is the
 |      empty string.
 |
 |  sash_mark(self, index)
 |      Records x and y for the sash given by index;
 |
 |      Used in conjunction with later dragto commands to move the sash.
 |
 |  sash_place(self, index, x, y)
 |      Place the sash given by index at the given coordinates
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.BaseWidget:
 |
 |  destroy(self)
 |      Destroy this and all descendants widgets.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Misc:
 |
 |  __getitem__ = cget(self, key)
 |
 |  __repr__(self)
 |      Return repr(self).
 |
 |  __setitem__(self, key, value)
 |
 |  __str__(self)
 |      Return the window path name of this widget.
 |
 |  after(self, ms, func=None, *args)
 |      Call function once after given time.
 |
 |      MS specifies the time in milliseconds. FUNC gives the
 |      function which shall be called. Additional parameters
 |      are given as parameters to the function call.  Return
 |      identifier to cancel scheduling with after_cancel.
 |
 |  after_cancel(self, id)
 |      Cancel scheduling of function identified with ID.
 |
 |      Identifier returned by after or after_idle must be
 |      given as first parameter.
 |
 |  after_idle(self, func, *args)
 |      Call FUNC once if the Tcl main loop has no event to
 |      process.
 |
 |      Return an identifier to cancel the scheduling with
 |      after_cancel.
 |
 |  anchor = grid_anchor(self, anchor=None)
 |
 |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |
 |  bell(self, displayof=0)
 |      Ring a display's bell.
 |
 |  bind(self, sequence=None, func=None, add=None)
 |      Bind to this widget at event SEQUENCE a call to function FUNC.
 |
 |      SEQUENCE is a string of concatenated event
 |      patterns. An event pattern is of the form
 |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
 |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
 |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
 |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
 |      Mod1, M1. TYPE is one of Activate, Enter, Map,
 |      ButtonPress, Button, Expose, Motion, ButtonRelease
 |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
 |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
 |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
 |      Leave and DETAIL is the button number for ButtonPress,
 |      ButtonRelease and DETAIL is the Keysym for KeyPress and
 |      KeyRelease. Examples are
 |      <Control-Button-1> for pressing Control and mouse button 1 or
 |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
 |      An event pattern can also be a virtual event of the form
 |      <<AString>> where AString can be arbitrary. This
 |      event can be generated by event_generate.
 |      If events are concatenated they must appear shortly
 |      after each other.
 |
 |      FUNC will be called if the event sequence occurs with an
 |      instance of Event as argument. If the return value of FUNC is
 |      "break" no further bound function is invoked.
 |
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function.
 |
 |      Bind will return an identifier to allow deletion of the bound function with
 |      unbind without memory leak.
 |
 |      If FUNC or SEQUENCE is omitted the bound function or list
 |      of bound events are returned.
 |
 |  bind_all(self, sequence=None, func=None, add=None)
 |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function. See bind for the return value.
 |
 |  bind_class(self, className, sequence=None, func=None, add=None)
 |      Bind to widgets with bindtag CLASSNAME at event
 |      SEQUENCE a call of function FUNC. An additional
 |      boolean parameter ADD specifies whether FUNC will be
 |      called additionally to the other bound function or
 |      whether it will replace the previous function. See bind for
 |      the return value.
 |
 |  bindtags(self, tagList=None)
 |      Set or get the list of bindtags for this widget.
 |
 |      With no argument return the list of all bindtags associated with
 |      this widget. With a list of strings as argument the bindtags are
 |      set to this list. The bindtags determine in which order events are
 |      processed (see bind).
 |
 |  cget(self, key)
 |      Return the resource value for a KEY given as string.
 |
 |  clipboard_append(self, string, **kw)
 |      Append STRING to the Tk clipboard.
 |
 |      A widget specified at the optional displayof keyword
 |      argument specifies the target display. The clipboard
 |      can be retrieved with selection_get.
 |
 |  clipboard_clear(self, **kw)
 |      Clear the data in the Tk clipboard.
 |
 |      A widget specified for the optional displayof keyword
 |      argument specifies the target display.
 |
 |  clipboard_get(self, **kw)
 |      Retrieve data from the clipboard on window's display.
 |
 |      The window keyword defaults to the root window of the Tkinter
 |      application.
 |
 |      The type keyword specifies the form in which the data is
 |      to be returned and should be an atom name such as STRING
 |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
 |      is to try UTF8_STRING and fall back to STRING.
 |
 |      This command is equivalent to:
 |
 |      selection_get(CLIPBOARD)
 |
 |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
 |
 |  config = configure(self, cnf=None, **kw)
 |
 |  configure(self, cnf=None, **kw)
 |      Configure resources of a widget.
 |
 |      The values for resources are specified as keyword
 |      arguments. To get an overview about
 |      the allowed keyword arguments call the method keys.
 |
 |  deletecommand(self, name)
 |      Internal function.
 |
 |      Delete the Tcl command provided in NAME.
 |
 |  event_add(self, virtual, *sequences)
 |      Bind a virtual event VIRTUAL (of the form <<Name>>)
 |      to an event SEQUENCE such that the virtual event is triggered
 |      whenever SEQUENCE occurs.
 |
 |  event_delete(self, virtual, *sequences)
 |      Unbind a virtual event VIRTUAL from SEQUENCE.
 |
 |  event_generate(self, sequence, **kw)
 |      Generate an event SEQUENCE. Additional
 |      keyword arguments specify parameter of the event
 |      (e.g. x, y, rootx, rooty).
 |
 |  event_info(self, virtual=None)
 |      Return a list of all virtual events or the information
 |      about the SEQUENCE bound to the virtual event VIRTUAL.
 |
 |  focus = focus_set(self)
 |
 |  focus_displayof(self)
 |      Return the widget which has currently the focus on the
 |      display where this widget is located.
 |
 |      Return None if the application does not have the focus.
 |
 |  focus_force(self)
 |      Direct input focus to this widget even if the
 |      application does not have the focus. Use with
 |      caution!
 |
 |  focus_get(self)
 |      Return the widget which has currently the focus in the
 |      application.
 |
 |      Use focus_displayof to allow working with several
 |      displays. Return None if application does not have
 |      the focus.
 |
 |  focus_lastfor(self)
 |      Return the widget which would have the focus if top level
 |      for this widget gets the focus from the window manager.
 |
 |  focus_set(self)
 |      Direct input focus to this widget.
 |
 |      If the application currently does not have the focus
 |      this widget will get the focus if the application gets
 |      the focus through the window manager.
 |
 |  getboolean(self, s)
 |      Return a boolean value for Tcl boolean values true and false given as parameter.
 |
 |  getdouble(self, s)
 |
 |  getint(self, s)
 |
 |  getvar(self, name='PY_VAR')
 |      Return value of Tcl variable NAME.
 |
 |  grab_current(self)
 |      Return widget which has currently the grab in this application
 |      or None.
 |
 |  grab_release(self)
 |      Release grab for this widget if currently set.
 |
 |  grab_set(self)
 |      Set grab for this widget.
 |
 |      A grab directs all events to this and descendant
 |      widgets in the application.
 |
 |  grab_set_global(self)
 |      Set global grab for this widget.
 |
 |      A global grab directs all events to this and
 |      descendant widgets on the display. Use with caution -
 |      other applications do not get events anymore.
 |
 |  grab_status(self)
 |      Return None, "local" or "global" if this widget has
 |      no, a local or a global grab.
 |
 |  grid_anchor(self, anchor=None)
 |      The anchor value controls how to place the grid within the
 |      master when no row/column has any weight.
 |
 |      The default anchor is nw.
 |
 |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |      Return a tuple of integer coordinates for the bounding
 |      box of this widget controlled by the geometry manager grid.
 |
 |      If COLUMN, ROW is given the bounding box applies from
 |      the cell with row and column 0 to the specified
 |      cell. If COL2 and ROW2 are given the bounding box
 |      starts at that cell.
 |
 |      The returned integers specify the offset of the upper left
 |      corner in the master widget and the width and height.
 |
 |  grid_columnconfigure(self, index, cnf={}, **kw)
 |      Configure column INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the column),
 |      weight (how much does additional space propagate to this column)
 |      and pad (how much space to let additionally).
 |
 |  grid_location(self, x, y)
 |      Return a tuple of column and row which identify the cell
 |      at which the pixel at position X and Y inside the master
 |      widget is located.
 |
 |  grid_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given, the current setting will be returned.
 |
 |  grid_rowconfigure(self, index, cnf={}, **kw)
 |      Configure row INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the row),
 |      weight (how much does additional space propagate to this row)
 |      and pad (how much space to let additionally).
 |
 |  grid_size(self)
 |      Return a tuple of the number of column and rows in the grid.
 |
 |  grid_slaves(self, row=None, column=None)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  image_names(self)
 |      Return a list of all existing image names.
 |
 |  image_types(self)
 |      Return a list of all available image types (e.g. photo bitmap).
 |
 |  info_patchlevel(self)
 |      Returns the exact version of the Tcl library.
 |
 |  keys(self)
 |      Return a list of all resource names of this widget.
 |
 |  lift = tkraise(self, aboveThis=None)
 |
 |  lower(self, belowThis=None)
 |      Lower this widget in the stacking order.
 |
 |  mainloop(self, n=0)
 |      Call the mainloop of Tk.
 |
 |  nametowidget(self, name)
 |      Return the Tkinter instance of a widget identified by
 |      its Tcl name NAME.
 |
 |  option_add(self, pattern, value, priority=None)
 |      Set a VALUE (second parameter) for an option
 |      PATTERN (first parameter).
 |
 |      An optional third parameter gives the numeric priority
 |      (defaults to 80).
 |
 |  option_clear(self)
 |      Clear the option database.
 |
 |      It will be reloaded if option_add is called.
 |
 |  option_get(self, name, className)
 |      Return the value for an option NAME for this widget
 |      with CLASSNAME.
 |
 |      Values with higher priority override lower values.
 |
 |  option_readfile(self, fileName, priority=None)
 |      Read file FILENAME into the option database.
 |
 |      An optional second parameter gives the numeric
 |      priority.
 |
 |  pack_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given the current setting will be returned.
 |
 |  pack_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  place_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  propagate = pack_propagate(self, flag=['_noarg_'])
 |
 |  quit(self)
 |      Quit the Tcl interpreter. All widgets will be destroyed.
 |
 |  register = _register(self, func, subst=None, needcleanup=1)
 |
 |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
 |
 |  selection_clear(self, **kw)
 |      Clear the current X selection.
 |
 |  selection_get(self, **kw)
 |      Return the contents of the current X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection and defaults to PRIMARY.  A keyword
 |      parameter displayof specifies a widget on the display
 |      to use. A keyword parameter type specifies the form of data to be
 |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
 |      before STRING.
 |
 |  selection_handle(self, command, **kw)
 |      Specify a function COMMAND to call if the X
 |      selection owned by this widget is queried by another
 |      application.
 |
 |      This function must return the contents of the
 |      selection. The function will be called with the
 |      arguments OFFSET and LENGTH which allows the chunking
 |      of very long selections. The following keyword
 |      parameters can be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  selection_own(self, **kw)
 |      Become owner of X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection (default PRIMARY).
 |
 |  selection_own_get(self, **kw)
 |      Return owner of X selection.
 |
 |      The following keyword parameter can
 |      be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  send(self, interp, cmd, *args)
 |      Send Tcl command CMD to different interpreter INTERP to be executed.
 |
 |  setvar(self, name='PY_VAR', value='1')
 |      Set Tcl variable NAME to VALUE.
 |
 |  size = grid_size(self)
 |
 |  slaves = pack_slaves(self)
 |
 |  tk_bisque(self)
 |      Change the color scheme to light brown as used in Tk 3.6 and before.
 |
 |  tk_focusFollowsMouse(self)
 |      The widget under mouse will get automatically focus. Can not
 |      be disabled easily.
 |
 |  tk_focusNext(self)
 |      Return the next widget in the focus order which follows
 |      widget which has currently the focus.
 |
 |      The focus order first goes to the next child, then to
 |      the children of the child recursively and then to the
 |      next sibling which is higher in the stacking order.  A
 |      widget is omitted if it has the takefocus resource set
 |      to 0.
 |
 |  tk_focusPrev(self)
 |      Return previous widget in the focus order. See tk_focusNext for details.
 |
 |  tk_setPalette(self, *args, **kw)
 |      Set a new color scheme for all widget elements.
 |
 |      A single color as argument will cause that all colors of Tk
 |      widget elements are derived from this.
 |      Alternatively several keyword parameters and its associated
 |      colors can be given. The following keywords are valid:
 |      activeBackground, foreground, selectColor,
 |      activeForeground, highlightBackground, selectBackground,
 |      background, highlightColor, selectForeground,
 |      disabledForeground, insertBackground, troughColor.
 |
 |  tk_strictMotif(self, boolean=None)
 |      Set Tcl internal variable, whether the look and feel
 |      should adhere to Motif.
 |
 |      A parameter of 1 means adhere to Motif (e.g. no color
 |      change if mouse passes over slider).
 |      Returns the set value.
 |
 |  tkraise(self, aboveThis=None)
 |      Raise this widget in the stacking order.
 |
 |  unbind(self, sequence, funcid=None)
 |      Unbind for this widget the event SEQUENCE.
 |
 |      If FUNCID is given, only unbind the function identified with FUNCID
 |      and also delete the corresponding Tcl command.
 |
 |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
 |      unbound.
 |
 |  unbind_all(self, sequence)
 |      Unbind for all widgets for event SEQUENCE all functions.
 |
 |  unbind_class(self, className, sequence)
 |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
 |      all functions.
 |
 |  update(self)
 |      Enter event loop until all pending events have been processed by Tcl.
 |
 |  update_idletasks(self)
 |      Enter event loop until all idle callbacks have been called. This
 |      will update the display of windows but not process events caused by
 |      the user.
 |
 |  wait_variable(self, name='PY_VAR')
 |      Wait until the variable is modified.
 |
 |      A parameter of type IntVar, StringVar, DoubleVar or
 |      BooleanVar must be given.
 |
 |  wait_visibility(self, window=None)
 |      Wait until the visibility of a WIDGET changes
 |      (e.g. it appears).
 |
 |      If no parameter is given self is used.
 |
 |  wait_window(self, window=None)
 |      Wait until a WIDGET is destroyed.
 |
 |      If no parameter is given self is used.
 |
 |  waitvar = wait_variable(self, name='PY_VAR')
 |
 |  winfo_atom(self, name, displayof=0)
 |      Return integer which represents atom NAME.
 |
 |  winfo_atomname(self, id, displayof=0)
 |      Return name of atom with identifier ID.
 |
 |  winfo_cells(self)
 |      Return number of cells in the colormap for this widget.
 |
 |  winfo_children(self)
 |      Return a list of all widgets which are children of this widget.
 |
 |  winfo_class(self)
 |      Return window class name of this widget.
 |
 |  winfo_colormapfull(self)
 |      Return True if at the last color request the colormap was full.
 |
 |  winfo_containing(self, rootX, rootY, displayof=0)
 |      Return the widget which is at the root coordinates ROOTX, ROOTY.
 |
 |  winfo_depth(self)
 |      Return the number of bits per pixel.
 |
 |  winfo_exists(self)
 |      Return true if this widget exists.
 |
 |  winfo_fpixels(self, number)
 |      Return the number of pixels for the given distance NUMBER
 |      (e.g. "3c") as float.
 |
 |  winfo_geometry(self)
 |      Return geometry string for this widget in the form "widthxheight+X+Y".
 |
 |  winfo_height(self)
 |      Return height of this widget.
 |
 |  winfo_id(self)
 |      Return identifier ID for this widget.
 |
 |  winfo_interps(self, displayof=0)
 |      Return the name of all Tcl interpreters for this display.
 |
 |  winfo_ismapped(self)
 |      Return true if this widget is mapped.
 |
 |  winfo_manager(self)
 |      Return the window manager name for this widget.
 |
 |  winfo_name(self)
 |      Return the name of this widget.
 |
 |  winfo_parent(self)
 |      Return the name of the parent of this widget.
 |
 |  winfo_pathname(self, id, displayof=0)
 |      Return the pathname of the widget given by ID.
 |
 |  winfo_pixels(self, number)
 |      Rounded integer value of winfo_fpixels.
 |
 |  winfo_pointerx(self)
 |      Return the x coordinate of the pointer on the root window.
 |
 |  winfo_pointerxy(self)
 |      Return a tuple of x and y coordinates of the pointer on the root window.
 |
 |  winfo_pointery(self)
 |      Return the y coordinate of the pointer on the root window.
 |
 |  winfo_reqheight(self)
 |      Return requested height of this widget.
 |
 |  winfo_reqwidth(self)
 |      Return requested width of this widget.
 |
 |  winfo_rgb(self, color)
 |      Return a tuple of integer RGB values in range(65536) for color in this widget.
 |
 |  winfo_rootx(self)
 |      Return x coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_rooty(self)
 |      Return y coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_screen(self)
 |      Return the screen name of this widget.
 |
 |  winfo_screencells(self)
 |      Return the number of the cells in the colormap of the screen
 |      of this widget.
 |
 |  winfo_screendepth(self)
 |      Return the number of bits per pixel of the root window of the
 |      screen of this widget.
 |
 |  winfo_screenheight(self)
 |      Return the number of pixels of the height of the screen of this widget
 |      in pixel.
 |
 |  winfo_screenmmheight(self)
 |      Return the number of pixels of the height of the screen of
 |      this widget in mm.
 |
 |  winfo_screenmmwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in mm.
 |
 |  winfo_screenvisual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the default
 |      colormodel of this screen.
 |
 |  winfo_screenwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in pixel.
 |
 |  winfo_server(self)
 |      Return information of the X-Server of the screen of this widget in
 |      the form "XmajorRminor vendor vendorVersion".
 |
 |  winfo_toplevel(self)
 |      Return the toplevel widget of this widget.
 |
 |  winfo_viewable(self)
 |      Return true if the widget and all its higher ancestors are mapped.
 |
 |  winfo_visual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the
 |      colormodel of this widget.
 |
 |  winfo_visualid(self)
 |      Return the X identifier for the visual for this widget.
 |
 |  winfo_visualsavailable(self, includeids=False)
 |      Return a list of all visuals available for the screen
 |      of this widget.
 |
 |      Each item in the list consists of a visual name (see winfo_visual), a
 |      depth and if includeids is true is given also the X identifier.
 |
 |  winfo_vrootheight(self)
 |      Return the height of the virtual root window associated with this
 |      widget in pixels. If there is no virtual root window return the
 |      height of the screen.
 |
 |  winfo_vrootwidth(self)
 |      Return the width of the virtual root window associated with this
 |      widget in pixel. If there is no virtual root window return the
 |      width of the screen.
 |
 |  winfo_vrootx(self)
 |      Return the x offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_vrooty(self)
 |      Return the y offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_width(self)
 |      Return the width of this widget.
 |
 |  winfo_x(self)
 |      Return the x coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  winfo_y(self)
 |      Return the y coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from tkinter.Misc:
 |
 |  __dict__
 |      dictionary for instance variables
 |
 |  __weakref__
 |      list of weak references to the object
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Pack:
 |
 |  info = pack_info(self)
 |
 |  pack = pack_configure(self, cnf={}, **kw)
 |
 |  pack_configure(self, cnf={}, **kw)
 |      Pack a widget in the parent widget. Use as options:
 |      after=widget - pack it after you have packed widget
 |      anchor=NSEW (or subset) - position widget according to
 |                                given direction
 |      before=widget - pack it before you will pack widget
 |      expand=bool - expand widget if parent size grows
 |      fill=NONE or X or Y or BOTH - fill widget if widget grows
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
 |
 |  pack_forget(self)
 |      Unmap this widget and do not use it for the packing order.
 |
 |  pack_info(self)
 |      Return information about the packing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Place:
 |
 |  place = place_configure(self, cnf={}, **kw)
 |
 |  place_configure(self, cnf={}, **kw)
 |      Place a widget in the parent widget. Use as options:
 |      in=master - master relative to which the widget is placed
 |      in_=master - see 'in' option description
 |      x=amount - locate anchor of this widget at position x of master
 |      y=amount - locate anchor of this widget at position y of master
 |      relx=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to width of master (1.0 is right edge)
 |      rely=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to height of master (1.0 is bottom edge)
 |      anchor=NSEW (or subset) - position anchor according to given direction
 |      width=amount - width of this widget in pixel
 |      height=amount - height of this widget in pixel
 |      relwidth=amount - width of this widget between 0.0 and 1.0
 |                        relative to width of master (1.0 is the same width
 |                        as the master)
 |      relheight=amount - height of this widget between 0.0 and 1.0
 |                         relative to height of master (1.0 is the same
 |                         height as the master)
 |      bordermode="inside" or "outside" - whether to take border width of
 |                                         master widget into account
 |
 |  place_forget(self)
 |      Unmap this widget.
 |
 |  place_info(self)
 |      Return information about the placing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Grid:
 |
 |  grid = grid_configure(self, cnf={}, **kw)
 |
 |  grid_configure(self, cnf={}, **kw)
 |      Position a widget in the parent widget in a grid. Use as options:
 |      column=number - use cell identified with given column (starting with 0)
 |      columnspan=number - this widget will span several columns
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      row=number - use cell identified with given row (starting with 0)
 |      rowspan=number - this widget will span several rows
 |      sticky=NSEW - if cell is larger on which sides will this
 |                    widget stick to the cell boundary
 |
 |  grid_forget(self)
 |      Unmap this widget.
 |
 |  grid_info(self)
 |      Return information about the options
 |      for positioning this widget in a grid.
 |
 |  grid_remove(self)
 |      Unmap this widget but remember the grid options.
 |
 |  location = grid_location(self, x, y)

None
Help on class Progressbar in module tkinter.ttk:

class Progressbar(Widget)
 |  Progressbar(master=None, **kw)
 |
 |  Ttk Progressbar widget shows the status of a long-running
 |  operation. They can operate in two modes: determinate mode shows the
 |  amount completed relative to the total amount of work to be done, and
 |  indeterminate mode provides an animated display to let the user know
 |  that something is happening.
 |
 |  Method resolution order:
 |      Progressbar
 |      Widget
 |      tkinter.Widget
 |      tkinter.BaseWidget
 |      tkinter.Misc
 |      tkinter.Pack
 |      tkinter.Place
 |      tkinter.Grid
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  __init__(self, master=None, **kw)
 |      Construct a Ttk Progressbar with parent master.
 |
 |      STANDARD OPTIONS
 |
 |          class, cursor, style, takefocus
 |
 |      WIDGET-SPECIFIC OPTIONS
 |
 |          orient, length, mode, maximum, value, variable, phase
 |
 |  start(self, interval=None)
 |      Begin autoincrement mode: schedules a recurring timer event
 |      that calls method step every interval milliseconds.
 |
 |      interval defaults to 50 milliseconds (20 steps/second) if omitted.
 |
 |  step(self, amount=None)
 |      Increments the value option by amount.
 |
 |      amount defaults to 1.0 if omitted.
 |
 |  stop(self)
 |      Stop autoincrement mode: cancels any recurring timer event
 |      initiated by start.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from Widget:
 |
 |  identify(self, x, y)
 |      Returns the name of the element at position x, y, or the empty
 |      string if the point does not lie within any element.
 |
 |      x and y are pixel coordinates relative to the widget.
 |
 |  instate(self, statespec, callback=None, *args, **kw)
 |      Test the widget's state.
 |
 |      If callback is not specified, returns True if the widget state
 |      matches statespec and False otherwise. If callback is specified,
 |      then it will be invoked with *args, **kw if the widget state
 |      matches statespec. statespec is expected to be a sequence.
 |
 |  state(self, statespec=None)
 |      Modify or inquire widget state.
 |
 |      Widget state is returned if statespec is None, otherwise it is
 |      set according to the statespec flags and then a new state spec
 |      is returned indicating which flags were changed. statespec is
 |      expected to be a sequence.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.BaseWidget:
 |
 |  destroy(self)
 |      Destroy this and all descendants widgets.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Misc:
 |
 |  __getitem__ = cget(self, key)
 |
 |  __repr__(self)
 |      Return repr(self).
 |
 |  __setitem__(self, key, value)
 |
 |  __str__(self)
 |      Return the window path name of this widget.
 |
 |  after(self, ms, func=None, *args)
 |      Call function once after given time.
 |
 |      MS specifies the time in milliseconds. FUNC gives the
 |      function which shall be called. Additional parameters
 |      are given as parameters to the function call.  Return
 |      identifier to cancel scheduling with after_cancel.
 |
 |  after_cancel(self, id)
 |      Cancel scheduling of function identified with ID.
 |
 |      Identifier returned by after or after_idle must be
 |      given as first parameter.
 |
 |  after_idle(self, func, *args)
 |      Call FUNC once if the Tcl main loop has no event to
 |      process.
 |
 |      Return an identifier to cancel the scheduling with
 |      after_cancel.
 |
 |  anchor = grid_anchor(self, anchor=None)
 |
 |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |
 |  bell(self, displayof=0)
 |      Ring a display's bell.
 |
 |  bind(self, sequence=None, func=None, add=None)
 |      Bind to this widget at event SEQUENCE a call to function FUNC.
 |
 |      SEQUENCE is a string of concatenated event
 |      patterns. An event pattern is of the form
 |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
 |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
 |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
 |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
 |      Mod1, M1. TYPE is one of Activate, Enter, Map,
 |      ButtonPress, Button, Expose, Motion, ButtonRelease
 |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
 |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
 |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
 |      Leave and DETAIL is the button number for ButtonPress,
 |      ButtonRelease and DETAIL is the Keysym for KeyPress and
 |      KeyRelease. Examples are
 |      <Control-Button-1> for pressing Control and mouse button 1 or
 |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
 |      An event pattern can also be a virtual event of the form
 |      <<AString>> where AString can be arbitrary. This
 |      event can be generated by event_generate.
 |      If events are concatenated they must appear shortly
 |      after each other.
 |
 |      FUNC will be called if the event sequence occurs with an
 |      instance of Event as argument. If the return value of FUNC is
 |      "break" no further bound function is invoked.
 |
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function.
 |
 |      Bind will return an identifier to allow deletion of the bound function with
 |      unbind without memory leak.
 |
 |      If FUNC or SEQUENCE is omitted the bound function or list
 |      of bound events are returned.
 |
 |  bind_all(self, sequence=None, func=None, add=None)
 |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function. See bind for the return value.
 |
 |  bind_class(self, className, sequence=None, func=None, add=None)
 |      Bind to widgets with bindtag CLASSNAME at event
 |      SEQUENCE a call of function FUNC. An additional
 |      boolean parameter ADD specifies whether FUNC will be
 |      called additionally to the other bound function or
 |      whether it will replace the previous function. See bind for
 |      the return value.
 |
 |  bindtags(self, tagList=None)
 |      Set or get the list of bindtags for this widget.
 |
 |      With no argument return the list of all bindtags associated with
 |      this widget. With a list of strings as argument the bindtags are
 |      set to this list. The bindtags determine in which order events are
 |      processed (see bind).
 |
 |  cget(self, key)
 |      Return the resource value for a KEY given as string.
 |
 |  clipboard_append(self, string, **kw)
 |      Append STRING to the Tk clipboard.
 |
 |      A widget specified at the optional displayof keyword
 |      argument specifies the target display. The clipboard
 |      can be retrieved with selection_get.
 |
 |  clipboard_clear(self, **kw)
 |      Clear the data in the Tk clipboard.
 |
 |      A widget specified for the optional displayof keyword
 |      argument specifies the target display.
 |
 |  clipboard_get(self, **kw)
 |      Retrieve data from the clipboard on window's display.
 |
 |      The window keyword defaults to the root window of the Tkinter
 |      application.
 |
 |      The type keyword specifies the form in which the data is
 |      to be returned and should be an atom name such as STRING
 |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
 |      is to try UTF8_STRING and fall back to STRING.
 |
 |      This command is equivalent to:
 |
 |      selection_get(CLIPBOARD)
 |
 |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
 |
 |  config = configure(self, cnf=None, **kw)
 |
 |  configure(self, cnf=None, **kw)
 |      Configure resources of a widget.
 |
 |      The values for resources are specified as keyword
 |      arguments. To get an overview about
 |      the allowed keyword arguments call the method keys.
 |
 |  deletecommand(self, name)
 |      Internal function.
 |
 |      Delete the Tcl command provided in NAME.
 |
 |  event_add(self, virtual, *sequences)
 |      Bind a virtual event VIRTUAL (of the form <<Name>>)
 |      to an event SEQUENCE such that the virtual event is triggered
 |      whenever SEQUENCE occurs.
 |
 |  event_delete(self, virtual, *sequences)
 |      Unbind a virtual event VIRTUAL from SEQUENCE.
 |
 |  event_generate(self, sequence, **kw)
 |      Generate an event SEQUENCE. Additional
 |      keyword arguments specify parameter of the event
 |      (e.g. x, y, rootx, rooty).
 |
 |  event_info(self, virtual=None)
 |      Return a list of all virtual events or the information
 |      about the SEQUENCE bound to the virtual event VIRTUAL.
 |
 |  focus = focus_set(self)
 |
 |  focus_displayof(self)
 |      Return the widget which has currently the focus on the
 |      display where this widget is located.
 |
 |      Return None if the application does not have the focus.
 |
 |  focus_force(self)
 |      Direct input focus to this widget even if the
 |      application does not have the focus. Use with
 |      caution!
 |
 |  focus_get(self)
 |      Return the widget which has currently the focus in the
 |      application.
 |
 |      Use focus_displayof to allow working with several
 |      displays. Return None if application does not have
 |      the focus.
 |
 |  focus_lastfor(self)
 |      Return the widget which would have the focus if top level
 |      for this widget gets the focus from the window manager.
 |
 |  focus_set(self)
 |      Direct input focus to this widget.
 |
 |      If the application currently does not have the focus
 |      this widget will get the focus if the application gets
 |      the focus through the window manager.
 |
 |  getboolean(self, s)
 |      Return a boolean value for Tcl boolean values true and false given as parameter.
 |
 |  getdouble(self, s)
 |
 |  getint(self, s)
 |
 |  getvar(self, name='PY_VAR')
 |      Return value of Tcl variable NAME.
 |
 |  grab_current(self)
 |      Return widget which has currently the grab in this application
 |      or None.
 |
 |  grab_release(self)
 |      Release grab for this widget if currently set.
 |
 |  grab_set(self)
 |      Set grab for this widget.
 |
 |      A grab directs all events to this and descendant
 |      widgets in the application.
 |
 |  grab_set_global(self)
 |      Set global grab for this widget.
 |
 |      A global grab directs all events to this and
 |      descendant widgets on the display. Use with caution -
 |      other applications do not get events anymore.
 |
 |  grab_status(self)
 |      Return None, "local" or "global" if this widget has
 |      no, a local or a global grab.
 |
 |  grid_anchor(self, anchor=None)
 |      The anchor value controls how to place the grid within the
 |      master when no row/column has any weight.
 |
 |      The default anchor is nw.
 |
 |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |      Return a tuple of integer coordinates for the bounding
 |      box of this widget controlled by the geometry manager grid.
 |
 |      If COLUMN, ROW is given the bounding box applies from
 |      the cell with row and column 0 to the specified
 |      cell. If COL2 and ROW2 are given the bounding box
 |      starts at that cell.
 |
 |      The returned integers specify the offset of the upper left
 |      corner in the master widget and the width and height.
 |
 |  grid_columnconfigure(self, index, cnf={}, **kw)
 |      Configure column INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the column),
 |      weight (how much does additional space propagate to this column)
 |      and pad (how much space to let additionally).
 |
 |  grid_location(self, x, y)
 |      Return a tuple of column and row which identify the cell
 |      at which the pixel at position X and Y inside the master
 |      widget is located.
 |
 |  grid_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given, the current setting will be returned.
 |
 |  grid_rowconfigure(self, index, cnf={}, **kw)
 |      Configure row INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the row),
 |      weight (how much does additional space propagate to this row)
 |      and pad (how much space to let additionally).
 |
 |  grid_size(self)
 |      Return a tuple of the number of column and rows in the grid.
 |
 |  grid_slaves(self, row=None, column=None)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  image_names(self)
 |      Return a list of all existing image names.
 |
 |  image_types(self)
 |      Return a list of all available image types (e.g. photo bitmap).
 |
 |  info_patchlevel(self)
 |      Returns the exact version of the Tcl library.
 |
 |  keys(self)
 |      Return a list of all resource names of this widget.
 |
 |  lift = tkraise(self, aboveThis=None)
 |
 |  lower(self, belowThis=None)
 |      Lower this widget in the stacking order.
 |
 |  mainloop(self, n=0)
 |      Call the mainloop of Tk.
 |
 |  nametowidget(self, name)
 |      Return the Tkinter instance of a widget identified by
 |      its Tcl name NAME.
 |
 |  option_add(self, pattern, value, priority=None)
 |      Set a VALUE (second parameter) for an option
 |      PATTERN (first parameter).
 |
 |      An optional third parameter gives the numeric priority
 |      (defaults to 80).
 |
 |  option_clear(self)
 |      Clear the option database.
 |
 |      It will be reloaded if option_add is called.
 |
 |  option_get(self, name, className)
 |      Return the value for an option NAME for this widget
 |      with CLASSNAME.
 |
 |      Values with higher priority override lower values.
 |
 |  option_readfile(self, fileName, priority=None)
 |      Read file FILENAME into the option database.
 |
 |      An optional second parameter gives the numeric
 |      priority.
 |
 |  pack_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given the current setting will be returned.
 |
 |  pack_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  place_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  propagate = pack_propagate(self, flag=['_noarg_'])
 |
 |  quit(self)
 |      Quit the Tcl interpreter. All widgets will be destroyed.
 |
 |  register = _register(self, func, subst=None, needcleanup=1)
 |
 |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
 |
 |  selection_clear(self, **kw)
 |      Clear the current X selection.
 |
 |  selection_get(self, **kw)
 |      Return the contents of the current X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection and defaults to PRIMARY.  A keyword
 |      parameter displayof specifies a widget on the display
 |      to use. A keyword parameter type specifies the form of data to be
 |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
 |      before STRING.
 |
 |  selection_handle(self, command, **kw)
 |      Specify a function COMMAND to call if the X
 |      selection owned by this widget is queried by another
 |      application.
 |
 |      This function must return the contents of the
 |      selection. The function will be called with the
 |      arguments OFFSET and LENGTH which allows the chunking
 |      of very long selections. The following keyword
 |      parameters can be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  selection_own(self, **kw)
 |      Become owner of X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection (default PRIMARY).
 |
 |  selection_own_get(self, **kw)
 |      Return owner of X selection.
 |
 |      The following keyword parameter can
 |      be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  send(self, interp, cmd, *args)
 |      Send Tcl command CMD to different interpreter INTERP to be executed.
 |
 |  setvar(self, name='PY_VAR', value='1')
 |      Set Tcl variable NAME to VALUE.
 |
 |  size = grid_size(self)
 |
 |  slaves = pack_slaves(self)
 |
 |  tk_bisque(self)
 |      Change the color scheme to light brown as used in Tk 3.6 and before.
 |
 |  tk_focusFollowsMouse(self)
 |      The widget under mouse will get automatically focus. Can not
 |      be disabled easily.
 |
 |  tk_focusNext(self)
 |      Return the next widget in the focus order which follows
 |      widget which has currently the focus.
 |
 |      The focus order first goes to the next child, then to
 |      the children of the child recursively and then to the
 |      next sibling which is higher in the stacking order.  A
 |      widget is omitted if it has the takefocus resource set
 |      to 0.
 |
 |  tk_focusPrev(self)
 |      Return previous widget in the focus order. See tk_focusNext for details.
 |
 |  tk_setPalette(self, *args, **kw)
 |      Set a new color scheme for all widget elements.
 |
 |      A single color as argument will cause that all colors of Tk
 |      widget elements are derived from this.
 |      Alternatively several keyword parameters and its associated
 |      colors can be given. The following keywords are valid:
 |      activeBackground, foreground, selectColor,
 |      activeForeground, highlightBackground, selectBackground,
 |      background, highlightColor, selectForeground,
 |      disabledForeground, insertBackground, troughColor.
 |
 |  tk_strictMotif(self, boolean=None)
 |      Set Tcl internal variable, whether the look and feel
 |      should adhere to Motif.
 |
 |      A parameter of 1 means adhere to Motif (e.g. no color
 |      change if mouse passes over slider).
 |      Returns the set value.
 |
 |  tkraise(self, aboveThis=None)
 |      Raise this widget in the stacking order.
 |
 |  unbind(self, sequence, funcid=None)
 |      Unbind for this widget the event SEQUENCE.
 |
 |      If FUNCID is given, only unbind the function identified with FUNCID
 |      and also delete the corresponding Tcl command.
 |
 |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
 |      unbound.
 |
 |  unbind_all(self, sequence)
 |      Unbind for all widgets for event SEQUENCE all functions.
 |
 |  unbind_class(self, className, sequence)
 |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
 |      all functions.
 |
 |  update(self)
 |      Enter event loop until all pending events have been processed by Tcl.
 |
 |  update_idletasks(self)
 |      Enter event loop until all idle callbacks have been called. This
 |      will update the display of windows but not process events caused by
 |      the user.
 |
 |  wait_variable(self, name='PY_VAR')
 |      Wait until the variable is modified.
 |
 |      A parameter of type IntVar, StringVar, DoubleVar or
 |      BooleanVar must be given.
 |
 |  wait_visibility(self, window=None)
 |      Wait until the visibility of a WIDGET changes
 |      (e.g. it appears).
 |
 |      If no parameter is given self is used.
 |
 |  wait_window(self, window=None)
 |      Wait until a WIDGET is destroyed.
 |
 |      If no parameter is given self is used.
 |
 |  waitvar = wait_variable(self, name='PY_VAR')
 |
 |  winfo_atom(self, name, displayof=0)
 |      Return integer which represents atom NAME.
 |
 |  winfo_atomname(self, id, displayof=0)
 |      Return name of atom with identifier ID.
 |
 |  winfo_cells(self)
 |      Return number of cells in the colormap for this widget.
 |
 |  winfo_children(self)
 |      Return a list of all widgets which are children of this widget.
 |
 |  winfo_class(self)
 |      Return window class name of this widget.
 |
 |  winfo_colormapfull(self)
 |      Return True if at the last color request the colormap was full.
 |
 |  winfo_containing(self, rootX, rootY, displayof=0)
 |      Return the widget which is at the root coordinates ROOTX, ROOTY.
 |
 |  winfo_depth(self)
 |      Return the number of bits per pixel.
 |
 |  winfo_exists(self)
 |      Return true if this widget exists.
 |
 |  winfo_fpixels(self, number)
 |      Return the number of pixels for the given distance NUMBER
 |      (e.g. "3c") as float.
 |
 |  winfo_geometry(self)
 |      Return geometry string for this widget in the form "widthxheight+X+Y".
 |
 |  winfo_height(self)
 |      Return height of this widget.
 |
 |  winfo_id(self)
 |      Return identifier ID for this widget.
 |
 |  winfo_interps(self, displayof=0)
 |      Return the name of all Tcl interpreters for this display.
 |
 |  winfo_ismapped(self)
 |      Return true if this widget is mapped.
 |
 |  winfo_manager(self)
 |      Return the window manager name for this widget.
 |
 |  winfo_name(self)
 |      Return the name of this widget.
 |
 |  winfo_parent(self)
 |      Return the name of the parent of this widget.
 |
 |  winfo_pathname(self, id, displayof=0)
 |      Return the pathname of the widget given by ID.
 |
 |  winfo_pixels(self, number)
 |      Rounded integer value of winfo_fpixels.
 |
 |  winfo_pointerx(self)
 |      Return the x coordinate of the pointer on the root window.
 |
 |  winfo_pointerxy(self)
 |      Return a tuple of x and y coordinates of the pointer on the root window.
 |
 |  winfo_pointery(self)
 |      Return the y coordinate of the pointer on the root window.
 |
 |  winfo_reqheight(self)
 |      Return requested height of this widget.
 |
 |  winfo_reqwidth(self)
 |      Return requested width of this widget.
 |
 |  winfo_rgb(self, color)
 |      Return a tuple of integer RGB values in range(65536) for color in this widget.
 |
 |  winfo_rootx(self)
 |      Return x coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_rooty(self)
 |      Return y coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_screen(self)
 |      Return the screen name of this widget.
 |
 |  winfo_screencells(self)
 |      Return the number of the cells in the colormap of the screen
 |      of this widget.
 |
 |  winfo_screendepth(self)
 |      Return the number of bits per pixel of the root window of the
 |      screen of this widget.
 |
 |  winfo_screenheight(self)
 |      Return the number of pixels of the height of the screen of this widget
 |      in pixel.
 |
 |  winfo_screenmmheight(self)
 |      Return the number of pixels of the height of the screen of
 |      this widget in mm.
 |
 |  winfo_screenmmwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in mm.
 |
 |  winfo_screenvisual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the default
 |      colormodel of this screen.
 |
 |  winfo_screenwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in pixel.
 |
 |  winfo_server(self)
 |      Return information of the X-Server of the screen of this widget in
 |      the form "XmajorRminor vendor vendorVersion".
 |
 |  winfo_toplevel(self)
 |      Return the toplevel widget of this widget.
 |
 |  winfo_viewable(self)
 |      Return true if the widget and all its higher ancestors are mapped.
 |
 |  winfo_visual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the
 |      colormodel of this widget.
 |
 |  winfo_visualid(self)
 |      Return the X identifier for the visual for this widget.
 |
 |  winfo_visualsavailable(self, includeids=False)
 |      Return a list of all visuals available for the screen
 |      of this widget.
 |
 |      Each item in the list consists of a visual name (see winfo_visual), a
 |      depth and if includeids is true is given also the X identifier.
 |
 |  winfo_vrootheight(self)
 |      Return the height of the virtual root window associated with this
 |      widget in pixels. If there is no virtual root window return the
 |      height of the screen.
 |
 |  winfo_vrootwidth(self)
 |      Return the width of the virtual root window associated with this
 |      widget in pixel. If there is no virtual root window return the
 |      width of the screen.
 |
 |  winfo_vrootx(self)
 |      Return the x offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_vrooty(self)
 |      Return the y offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_width(self)
 |      Return the width of this widget.
 |
 |  winfo_x(self)
 |      Return the x coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  winfo_y(self)
 |      Return the y coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from tkinter.Misc:
 |
 |  __dict__
 |      dictionary for instance variables
 |
 |  __weakref__
 |      list of weak references to the object
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Pack:
 |
 |  forget = pack_forget(self)
 |
 |  info = pack_info(self)
 |
 |  pack = pack_configure(self, cnf={}, **kw)
 |
 |  pack_configure(self, cnf={}, **kw)
 |      Pack a widget in the parent widget. Use as options:
 |      after=widget - pack it after you have packed widget
 |      anchor=NSEW (or subset) - position widget according to
 |                                given direction
 |      before=widget - pack it before you will pack widget
 |      expand=bool - expand widget if parent size grows
 |      fill=NONE or X or Y or BOTH - fill widget if widget grows
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
 |
 |  pack_forget(self)
 |      Unmap this widget and do not use it for the packing order.
 |
 |  pack_info(self)
 |      Return information about the packing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Place:
 |
 |  place = place_configure(self, cnf={}, **kw)
 |
 |  place_configure(self, cnf={}, **kw)
 |      Place a widget in the parent widget. Use as options:
 |      in=master - master relative to which the widget is placed
 |      in_=master - see 'in' option description
 |      x=amount - locate anchor of this widget at position x of master
 |      y=amount - locate anchor of this widget at position y of master
 |      relx=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to width of master (1.0 is right edge)
 |      rely=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to height of master (1.0 is bottom edge)
 |      anchor=NSEW (or subset) - position anchor according to given direction
 |      width=amount - width of this widget in pixel
 |      height=amount - height of this widget in pixel
 |      relwidth=amount - width of this widget between 0.0 and 1.0
 |                        relative to width of master (1.0 is the same width
 |                        as the master)
 |      relheight=amount - height of this widget between 0.0 and 1.0
 |                         relative to height of master (1.0 is the same
 |                         height as the master)
 |      bordermode="inside" or "outside" - whether to take border width of
 |                                         master widget into account
 |
 |  place_forget(self)
 |      Unmap this widget.
 |
 |  place_info(self)
 |      Return information about the placing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Grid:
 |
 |  grid = grid_configure(self, cnf={}, **kw)
 |
 |  grid_configure(self, cnf={}, **kw)
 |      Position a widget in the parent widget in a grid. Use as options:
 |      column=number - use cell identified with given column (starting with 0)
 |      columnspan=number - this widget will span several columns
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      row=number - use cell identified with given row (starting with 0)
 |      rowspan=number - this widget will span several rows
 |      sticky=NSEW - if cell is larger on which sides will this
 |                    widget stick to the cell boundary
 |
 |  grid_forget(self)
 |      Unmap this widget.
 |
 |  grid_info(self)
 |      Return information about the options
 |      for positioning this widget in a grid.
 |
 |  grid_remove(self)
 |      Unmap this widget but remember the grid options.
 |
 |  location = grid_location(self, x, y)

None
Help on class Radiobutton in module tkinter.ttk:

class Radiobutton(Widget)
 |  Radiobutton(master=None, **kw)
 |
 |  Ttk Radiobutton widgets are used in groups to show or change a
 |  set of mutually-exclusive options.
 |
 |  Method resolution order:
 |      Radiobutton
 |      Widget
 |      tkinter.Widget
 |      tkinter.BaseWidget
 |      tkinter.Misc
 |      tkinter.Pack
 |      tkinter.Place
 |      tkinter.Grid
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  __init__(self, master=None, **kw)
 |      Construct a Ttk Radiobutton with parent master.
 |
 |      STANDARD OPTIONS
 |
 |          class, compound, cursor, image, state, style, takefocus,
 |          text, textvariable, underline, width
 |
 |      WIDGET-SPECIFIC OPTIONS
 |
 |          command, value, variable
 |
 |  invoke(self)
 |      Sets the option variable to the option value, selects the
 |      widget, and invokes the associated command.
 |
 |      Returns the result of the command, or an empty string if
 |      no command is specified.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from Widget:
 |
 |  identify(self, x, y)
 |      Returns the name of the element at position x, y, or the empty
 |      string if the point does not lie within any element.
 |
 |      x and y are pixel coordinates relative to the widget.
 |
 |  instate(self, statespec, callback=None, *args, **kw)
 |      Test the widget's state.
 |
 |      If callback is not specified, returns True if the widget state
 |      matches statespec and False otherwise. If callback is specified,
 |      then it will be invoked with *args, **kw if the widget state
 |      matches statespec. statespec is expected to be a sequence.
 |
 |  state(self, statespec=None)
 |      Modify or inquire widget state.
 |
 |      Widget state is returned if statespec is None, otherwise it is
 |      set according to the statespec flags and then a new state spec
 |      is returned indicating which flags were changed. statespec is
 |      expected to be a sequence.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.BaseWidget:
 |
 |  destroy(self)
 |      Destroy this and all descendants widgets.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Misc:
 |
 |  __getitem__ = cget(self, key)
 |
 |  __repr__(self)
 |      Return repr(self).
 |
 |  __setitem__(self, key, value)
 |
 |  __str__(self)
 |      Return the window path name of this widget.
 |
 |  after(self, ms, func=None, *args)
 |      Call function once after given time.
 |
 |      MS specifies the time in milliseconds. FUNC gives the
 |      function which shall be called. Additional parameters
 |      are given as parameters to the function call.  Return
 |      identifier to cancel scheduling with after_cancel.
 |
 |  after_cancel(self, id)
 |      Cancel scheduling of function identified with ID.
 |
 |      Identifier returned by after or after_idle must be
 |      given as first parameter.
 |
 |  after_idle(self, func, *args)
 |      Call FUNC once if the Tcl main loop has no event to
 |      process.
 |
 |      Return an identifier to cancel the scheduling with
 |      after_cancel.
 |
 |  anchor = grid_anchor(self, anchor=None)
 |
 |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |
 |  bell(self, displayof=0)
 |      Ring a display's bell.
 |
 |  bind(self, sequence=None, func=None, add=None)
 |      Bind to this widget at event SEQUENCE a call to function FUNC.
 |
 |      SEQUENCE is a string of concatenated event
 |      patterns. An event pattern is of the form
 |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
 |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
 |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
 |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
 |      Mod1, M1. TYPE is one of Activate, Enter, Map,
 |      ButtonPress, Button, Expose, Motion, ButtonRelease
 |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
 |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
 |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
 |      Leave and DETAIL is the button number for ButtonPress,
 |      ButtonRelease and DETAIL is the Keysym for KeyPress and
 |      KeyRelease. Examples are
 |      <Control-Button-1> for pressing Control and mouse button 1 or
 |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
 |      An event pattern can also be a virtual event of the form
 |      <<AString>> where AString can be arbitrary. This
 |      event can be generated by event_generate.
 |      If events are concatenated they must appear shortly
 |      after each other.
 |
 |      FUNC will be called if the event sequence occurs with an
 |      instance of Event as argument. If the return value of FUNC is
 |      "break" no further bound function is invoked.
 |
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function.
 |
 |      Bind will return an identifier to allow deletion of the bound function with
 |      unbind without memory leak.
 |
 |      If FUNC or SEQUENCE is omitted the bound function or list
 |      of bound events are returned.
 |
 |  bind_all(self, sequence=None, func=None, add=None)
 |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function. See bind for the return value.
 |
 |  bind_class(self, className, sequence=None, func=None, add=None)
 |      Bind to widgets with bindtag CLASSNAME at event
 |      SEQUENCE a call of function FUNC. An additional
 |      boolean parameter ADD specifies whether FUNC will be
 |      called additionally to the other bound function or
 |      whether it will replace the previous function. See bind for
 |      the return value.
 |
 |  bindtags(self, tagList=None)
 |      Set or get the list of bindtags for this widget.
 |
 |      With no argument return the list of all bindtags associated with
 |      this widget. With a list of strings as argument the bindtags are
 |      set to this list. The bindtags determine in which order events are
 |      processed (see bind).
 |
 |  cget(self, key)
 |      Return the resource value for a KEY given as string.
 |
 |  clipboard_append(self, string, **kw)
 |      Append STRING to the Tk clipboard.
 |
 |      A widget specified at the optional displayof keyword
 |      argument specifies the target display. The clipboard
 |      can be retrieved with selection_get.
 |
 |  clipboard_clear(self, **kw)
 |      Clear the data in the Tk clipboard.
 |
 |      A widget specified for the optional displayof keyword
 |      argument specifies the target display.
 |
 |  clipboard_get(self, **kw)
 |      Retrieve data from the clipboard on window's display.
 |
 |      The window keyword defaults to the root window of the Tkinter
 |      application.
 |
 |      The type keyword specifies the form in which the data is
 |      to be returned and should be an atom name such as STRING
 |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
 |      is to try UTF8_STRING and fall back to STRING.
 |
 |      This command is equivalent to:
 |
 |      selection_get(CLIPBOARD)
 |
 |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
 |
 |  config = configure(self, cnf=None, **kw)
 |
 |  configure(self, cnf=None, **kw)
 |      Configure resources of a widget.
 |
 |      The values for resources are specified as keyword
 |      arguments. To get an overview about
 |      the allowed keyword arguments call the method keys.
 |
 |  deletecommand(self, name)
 |      Internal function.
 |
 |      Delete the Tcl command provided in NAME.
 |
 |  event_add(self, virtual, *sequences)
 |      Bind a virtual event VIRTUAL (of the form <<Name>>)
 |      to an event SEQUENCE such that the virtual event is triggered
 |      whenever SEQUENCE occurs.
 |
 |  event_delete(self, virtual, *sequences)
 |      Unbind a virtual event VIRTUAL from SEQUENCE.
 |
 |  event_generate(self, sequence, **kw)
 |      Generate an event SEQUENCE. Additional
 |      keyword arguments specify parameter of the event
 |      (e.g. x, y, rootx, rooty).
 |
 |  event_info(self, virtual=None)
 |      Return a list of all virtual events or the information
 |      about the SEQUENCE bound to the virtual event VIRTUAL.
 |
 |  focus = focus_set(self)
 |
 |  focus_displayof(self)
 |      Return the widget which has currently the focus on the
 |      display where this widget is located.
 |
 |      Return None if the application does not have the focus.
 |
 |  focus_force(self)
 |      Direct input focus to this widget even if the
 |      application does not have the focus. Use with
 |      caution!
 |
 |  focus_get(self)
 |      Return the widget which has currently the focus in the
 |      application.
 |
 |      Use focus_displayof to allow working with several
 |      displays. Return None if application does not have
 |      the focus.
 |
 |  focus_lastfor(self)
 |      Return the widget which would have the focus if top level
 |      for this widget gets the focus from the window manager.
 |
 |  focus_set(self)
 |      Direct input focus to this widget.
 |
 |      If the application currently does not have the focus
 |      this widget will get the focus if the application gets
 |      the focus through the window manager.
 |
 |  getboolean(self, s)
 |      Return a boolean value for Tcl boolean values true and false given as parameter.
 |
 |  getdouble(self, s)
 |
 |  getint(self, s)
 |
 |  getvar(self, name='PY_VAR')
 |      Return value of Tcl variable NAME.
 |
 |  grab_current(self)
 |      Return widget which has currently the grab in this application
 |      or None.
 |
 |  grab_release(self)
 |      Release grab for this widget if currently set.
 |
 |  grab_set(self)
 |      Set grab for this widget.
 |
 |      A grab directs all events to this and descendant
 |      widgets in the application.
 |
 |  grab_set_global(self)
 |      Set global grab for this widget.
 |
 |      A global grab directs all events to this and
 |      descendant widgets on the display. Use with caution -
 |      other applications do not get events anymore.
 |
 |  grab_status(self)
 |      Return None, "local" or "global" if this widget has
 |      no, a local or a global grab.
 |
 |  grid_anchor(self, anchor=None)
 |      The anchor value controls how to place the grid within the
 |      master when no row/column has any weight.
 |
 |      The default anchor is nw.
 |
 |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |      Return a tuple of integer coordinates for the bounding
 |      box of this widget controlled by the geometry manager grid.
 |
 |      If COLUMN, ROW is given the bounding box applies from
 |      the cell with row and column 0 to the specified
 |      cell. If COL2 and ROW2 are given the bounding box
 |      starts at that cell.
 |
 |      The returned integers specify the offset of the upper left
 |      corner in the master widget and the width and height.
 |
 |  grid_columnconfigure(self, index, cnf={}, **kw)
 |      Configure column INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the column),
 |      weight (how much does additional space propagate to this column)
 |      and pad (how much space to let additionally).
 |
 |  grid_location(self, x, y)
 |      Return a tuple of column and row which identify the cell
 |      at which the pixel at position X and Y inside the master
 |      widget is located.
 |
 |  grid_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given, the current setting will be returned.
 |
 |  grid_rowconfigure(self, index, cnf={}, **kw)
 |      Configure row INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the row),
 |      weight (how much does additional space propagate to this row)
 |      and pad (how much space to let additionally).
 |
 |  grid_size(self)
 |      Return a tuple of the number of column and rows in the grid.
 |
 |  grid_slaves(self, row=None, column=None)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  image_names(self)
 |      Return a list of all existing image names.
 |
 |  image_types(self)
 |      Return a list of all available image types (e.g. photo bitmap).
 |
 |  info_patchlevel(self)
 |      Returns the exact version of the Tcl library.
 |
 |  keys(self)
 |      Return a list of all resource names of this widget.
 |
 |  lift = tkraise(self, aboveThis=None)
 |
 |  lower(self, belowThis=None)
 |      Lower this widget in the stacking order.
 |
 |  mainloop(self, n=0)
 |      Call the mainloop of Tk.
 |
 |  nametowidget(self, name)
 |      Return the Tkinter instance of a widget identified by
 |      its Tcl name NAME.
 |
 |  option_add(self, pattern, value, priority=None)
 |      Set a VALUE (second parameter) for an option
 |      PATTERN (first parameter).
 |
 |      An optional third parameter gives the numeric priority
 |      (defaults to 80).
 |
 |  option_clear(self)
 |      Clear the option database.
 |
 |      It will be reloaded if option_add is called.
 |
 |  option_get(self, name, className)
 |      Return the value for an option NAME for this widget
 |      with CLASSNAME.
 |
 |      Values with higher priority override lower values.
 |
 |  option_readfile(self, fileName, priority=None)
 |      Read file FILENAME into the option database.
 |
 |      An optional second parameter gives the numeric
 |      priority.
 |
 |  pack_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given the current setting will be returned.
 |
 |  pack_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  place_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  propagate = pack_propagate(self, flag=['_noarg_'])
 |
 |  quit(self)
 |      Quit the Tcl interpreter. All widgets will be destroyed.
 |
 |  register = _register(self, func, subst=None, needcleanup=1)
 |
 |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
 |
 |  selection_clear(self, **kw)
 |      Clear the current X selection.
 |
 |  selection_get(self, **kw)
 |      Return the contents of the current X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection and defaults to PRIMARY.  A keyword
 |      parameter displayof specifies a widget on the display
 |      to use. A keyword parameter type specifies the form of data to be
 |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
 |      before STRING.
 |
 |  selection_handle(self, command, **kw)
 |      Specify a function COMMAND to call if the X
 |      selection owned by this widget is queried by another
 |      application.
 |
 |      This function must return the contents of the
 |      selection. The function will be called with the
 |      arguments OFFSET and LENGTH which allows the chunking
 |      of very long selections. The following keyword
 |      parameters can be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  selection_own(self, **kw)
 |      Become owner of X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection (default PRIMARY).
 |
 |  selection_own_get(self, **kw)
 |      Return owner of X selection.
 |
 |      The following keyword parameter can
 |      be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  send(self, interp, cmd, *args)
 |      Send Tcl command CMD to different interpreter INTERP to be executed.
 |
 |  setvar(self, name='PY_VAR', value='1')
 |      Set Tcl variable NAME to VALUE.
 |
 |  size = grid_size(self)
 |
 |  slaves = pack_slaves(self)
 |
 |  tk_bisque(self)
 |      Change the color scheme to light brown as used in Tk 3.6 and before.
 |
 |  tk_focusFollowsMouse(self)
 |      The widget under mouse will get automatically focus. Can not
 |      be disabled easily.
 |
 |  tk_focusNext(self)
 |      Return the next widget in the focus order which follows
 |      widget which has currently the focus.
 |
 |      The focus order first goes to the next child, then to
 |      the children of the child recursively and then to the
 |      next sibling which is higher in the stacking order.  A
 |      widget is omitted if it has the takefocus resource set
 |      to 0.
 |
 |  tk_focusPrev(self)
 |      Return previous widget in the focus order. See tk_focusNext for details.
 |
 |  tk_setPalette(self, *args, **kw)
 |      Set a new color scheme for all widget elements.
 |
 |      A single color as argument will cause that all colors of Tk
 |      widget elements are derived from this.
 |      Alternatively several keyword parameters and its associated
 |      colors can be given. The following keywords are valid:
 |      activeBackground, foreground, selectColor,
 |      activeForeground, highlightBackground, selectBackground,
 |      background, highlightColor, selectForeground,
 |      disabledForeground, insertBackground, troughColor.
 |
 |  tk_strictMotif(self, boolean=None)
 |      Set Tcl internal variable, whether the look and feel
 |      should adhere to Motif.
 |
 |      A parameter of 1 means adhere to Motif (e.g. no color
 |      change if mouse passes over slider).
 |      Returns the set value.
 |
 |  tkraise(self, aboveThis=None)
 |      Raise this widget in the stacking order.
 |
 |  unbind(self, sequence, funcid=None)
 |      Unbind for this widget the event SEQUENCE.
 |
 |      If FUNCID is given, only unbind the function identified with FUNCID
 |      and also delete the corresponding Tcl command.
 |
 |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
 |      unbound.
 |
 |  unbind_all(self, sequence)
 |      Unbind for all widgets for event SEQUENCE all functions.
 |
 |  unbind_class(self, className, sequence)
 |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
 |      all functions.
 |
 |  update(self)
 |      Enter event loop until all pending events have been processed by Tcl.
 |
 |  update_idletasks(self)
 |      Enter event loop until all idle callbacks have been called. This
 |      will update the display of windows but not process events caused by
 |      the user.
 |
 |  wait_variable(self, name='PY_VAR')
 |      Wait until the variable is modified.
 |
 |      A parameter of type IntVar, StringVar, DoubleVar or
 |      BooleanVar must be given.
 |
 |  wait_visibility(self, window=None)
 |      Wait until the visibility of a WIDGET changes
 |      (e.g. it appears).
 |
 |      If no parameter is given self is used.
 |
 |  wait_window(self, window=None)
 |      Wait until a WIDGET is destroyed.
 |
 |      If no parameter is given self is used.
 |
 |  waitvar = wait_variable(self, name='PY_VAR')
 |
 |  winfo_atom(self, name, displayof=0)
 |      Return integer which represents atom NAME.
 |
 |  winfo_atomname(self, id, displayof=0)
 |      Return name of atom with identifier ID.
 |
 |  winfo_cells(self)
 |      Return number of cells in the colormap for this widget.
 |
 |  winfo_children(self)
 |      Return a list of all widgets which are children of this widget.
 |
 |  winfo_class(self)
 |      Return window class name of this widget.
 |
 |  winfo_colormapfull(self)
 |      Return True if at the last color request the colormap was full.
 |
 |  winfo_containing(self, rootX, rootY, displayof=0)
 |      Return the widget which is at the root coordinates ROOTX, ROOTY.
 |
 |  winfo_depth(self)
 |      Return the number of bits per pixel.
 |
 |  winfo_exists(self)
 |      Return true if this widget exists.
 |
 |  winfo_fpixels(self, number)
 |      Return the number of pixels for the given distance NUMBER
 |      (e.g. "3c") as float.
 |
 |  winfo_geometry(self)
 |      Return geometry string for this widget in the form "widthxheight+X+Y".
 |
 |  winfo_height(self)
 |      Return height of this widget.
 |
 |  winfo_id(self)
 |      Return identifier ID for this widget.
 |
 |  winfo_interps(self, displayof=0)
 |      Return the name of all Tcl interpreters for this display.
 |
 |  winfo_ismapped(self)
 |      Return true if this widget is mapped.
 |
 |  winfo_manager(self)
 |      Return the window manager name for this widget.
 |
 |  winfo_name(self)
 |      Return the name of this widget.
 |
 |  winfo_parent(self)
 |      Return the name of the parent of this widget.
 |
 |  winfo_pathname(self, id, displayof=0)
 |      Return the pathname of the widget given by ID.
 |
 |  winfo_pixels(self, number)
 |      Rounded integer value of winfo_fpixels.
 |
 |  winfo_pointerx(self)
 |      Return the x coordinate of the pointer on the root window.
 |
 |  winfo_pointerxy(self)
 |      Return a tuple of x and y coordinates of the pointer on the root window.
 |
 |  winfo_pointery(self)
 |      Return the y coordinate of the pointer on the root window.
 |
 |  winfo_reqheight(self)
 |      Return requested height of this widget.
 |
 |  winfo_reqwidth(self)
 |      Return requested width of this widget.
 |
 |  winfo_rgb(self, color)
 |      Return a tuple of integer RGB values in range(65536) for color in this widget.
 |
 |  winfo_rootx(self)
 |      Return x coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_rooty(self)
 |      Return y coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_screen(self)
 |      Return the screen name of this widget.
 |
 |  winfo_screencells(self)
 |      Return the number of the cells in the colormap of the screen
 |      of this widget.
 |
 |  winfo_screendepth(self)
 |      Return the number of bits per pixel of the root window of the
 |      screen of this widget.
 |
 |  winfo_screenheight(self)
 |      Return the number of pixels of the height of the screen of this widget
 |      in pixel.
 |
 |  winfo_screenmmheight(self)
 |      Return the number of pixels of the height of the screen of
 |      this widget in mm.
 |
 |  winfo_screenmmwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in mm.
 |
 |  winfo_screenvisual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the default
 |      colormodel of this screen.
 |
 |  winfo_screenwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in pixel.
 |
 |  winfo_server(self)
 |      Return information of the X-Server of the screen of this widget in
 |      the form "XmajorRminor vendor vendorVersion".
 |
 |  winfo_toplevel(self)
 |      Return the toplevel widget of this widget.
 |
 |  winfo_viewable(self)
 |      Return true if the widget and all its higher ancestors are mapped.
 |
 |  winfo_visual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the
 |      colormodel of this widget.
 |
 |  winfo_visualid(self)
 |      Return the X identifier for the visual for this widget.
 |
 |  winfo_visualsavailable(self, includeids=False)
 |      Return a list of all visuals available for the screen
 |      of this widget.
 |
 |      Each item in the list consists of a visual name (see winfo_visual), a
 |      depth and if includeids is true is given also the X identifier.
 |
 |  winfo_vrootheight(self)
 |      Return the height of the virtual root window associated with this
 |      widget in pixels. If there is no virtual root window return the
 |      height of the screen.
 |
 |  winfo_vrootwidth(self)
 |      Return the width of the virtual root window associated with this
 |      widget in pixel. If there is no virtual root window return the
 |      width of the screen.
 |
 |  winfo_vrootx(self)
 |      Return the x offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_vrooty(self)
 |      Return the y offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_width(self)
 |      Return the width of this widget.
 |
 |  winfo_x(self)
 |      Return the x coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  winfo_y(self)
 |      Return the y coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from tkinter.Misc:
 |
 |  __dict__
 |      dictionary for instance variables
 |
 |  __weakref__
 |      list of weak references to the object
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Pack:
 |
 |  forget = pack_forget(self)
 |
 |  info = pack_info(self)
 |
 |  pack = pack_configure(self, cnf={}, **kw)
 |
 |  pack_configure(self, cnf={}, **kw)
 |      Pack a widget in the parent widget. Use as options:
 |      after=widget - pack it after you have packed widget
 |      anchor=NSEW (or subset) - position widget according to
 |                                given direction
 |      before=widget - pack it before you will pack widget
 |      expand=bool - expand widget if parent size grows
 |      fill=NONE or X or Y or BOTH - fill widget if widget grows
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
 |
 |  pack_forget(self)
 |      Unmap this widget and do not use it for the packing order.
 |
 |  pack_info(self)
 |      Return information about the packing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Place:
 |
 |  place = place_configure(self, cnf={}, **kw)
 |
 |  place_configure(self, cnf={}, **kw)
 |      Place a widget in the parent widget. Use as options:
 |      in=master - master relative to which the widget is placed
 |      in_=master - see 'in' option description
 |      x=amount - locate anchor of this widget at position x of master
 |      y=amount - locate anchor of this widget at position y of master
 |      relx=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to width of master (1.0 is right edge)
 |      rely=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to height of master (1.0 is bottom edge)
 |      anchor=NSEW (or subset) - position anchor according to given direction
 |      width=amount - width of this widget in pixel
 |      height=amount - height of this widget in pixel
 |      relwidth=amount - width of this widget between 0.0 and 1.0
 |                        relative to width of master (1.0 is the same width
 |                        as the master)
 |      relheight=amount - height of this widget between 0.0 and 1.0
 |                         relative to height of master (1.0 is the same
 |                         height as the master)
 |      bordermode="inside" or "outside" - whether to take border width of
 |                                         master widget into account
 |
 |  place_forget(self)
 |      Unmap this widget.
 |
 |  place_info(self)
 |      Return information about the placing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Grid:
 |
 |  grid = grid_configure(self, cnf={}, **kw)
 |
 |  grid_configure(self, cnf={}, **kw)
 |      Position a widget in the parent widget in a grid. Use as options:
 |      column=number - use cell identified with given column (starting with 0)
 |      columnspan=number - this widget will span several columns
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      row=number - use cell identified with given row (starting with 0)
 |      rowspan=number - this widget will span several rows
 |      sticky=NSEW - if cell is larger on which sides will this
 |                    widget stick to the cell boundary
 |
 |  grid_forget(self)
 |      Unmap this widget.
 |
 |  grid_info(self)
 |      Return information about the options
 |      for positioning this widget in a grid.
 |
 |  grid_remove(self)
 |      Unmap this widget but remember the grid options.
 |
 |  location = grid_location(self, x, y)

None
Help on class Scale in module tkinter.ttk:

class Scale(Widget, tkinter.Scale)
 |  Scale(master=None, **kw)
 |
 |  Ttk Scale widget is typically used to control the numeric value of
 |  a linked variable that varies uniformly over some range.
 |
 |  Method resolution order:
 |      Scale
 |      Widget
 |      tkinter.Scale
 |      tkinter.Widget
 |      tkinter.BaseWidget
 |      tkinter.Misc
 |      tkinter.Pack
 |      tkinter.Place
 |      tkinter.Grid
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  __init__(self, master=None, **kw)
 |      Construct a Ttk Scale with parent master.
 |
 |      STANDARD OPTIONS
 |
 |          class, cursor, style, takefocus
 |
 |      WIDGET-SPECIFIC OPTIONS
 |
 |          command, from, length, orient, to, value, variable
 |
 |  configure(self, cnf=None, **kw)
 |      Modify or query scale options.
 |
 |      Setting a value for any of the "from", "from_" or "to" options
 |      generates a <<RangeChanged>> event.
 |
 |  get(self, x=None, y=None)
 |      Get the current value of the value option, or the value
 |      corresponding to the coordinates x, y if they are specified.
 |
 |      x and y are pixel coordinates relative to the scale widget
 |      origin.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from Widget:
 |
 |  identify(self, x, y)
 |      Returns the name of the element at position x, y, or the empty
 |      string if the point does not lie within any element.
 |
 |      x and y are pixel coordinates relative to the widget.
 |
 |  instate(self, statespec, callback=None, *args, **kw)
 |      Test the widget's state.
 |
 |      If callback is not specified, returns True if the widget state
 |      matches statespec and False otherwise. If callback is specified,
 |      then it will be invoked with *args, **kw if the widget state
 |      matches statespec. statespec is expected to be a sequence.
 |
 |  state(self, statespec=None)
 |      Modify or inquire widget state.
 |
 |      Widget state is returned if statespec is None, otherwise it is
 |      set according to the statespec flags and then a new state spec
 |      is returned indicating which flags were changed. statespec is
 |      expected to be a sequence.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Scale:
 |
 |  coords(self, value=None)
 |      Return a tuple (X,Y) of the point along the centerline of the
 |      trough that corresponds to VALUE or the current value if None is
 |      given.
 |
 |  set(self, value)
 |      Set the value to VALUE.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.BaseWidget:
 |
 |  destroy(self)
 |      Destroy this and all descendants widgets.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Misc:
 |
 |  __getitem__ = cget(self, key)
 |
 |  __repr__(self)
 |      Return repr(self).
 |
 |  __setitem__(self, key, value)
 |
 |  __str__(self)
 |      Return the window path name of this widget.
 |
 |  after(self, ms, func=None, *args)
 |      Call function once after given time.
 |
 |      MS specifies the time in milliseconds. FUNC gives the
 |      function which shall be called. Additional parameters
 |      are given as parameters to the function call.  Return
 |      identifier to cancel scheduling with after_cancel.
 |
 |  after_cancel(self, id)
 |      Cancel scheduling of function identified with ID.
 |
 |      Identifier returned by after or after_idle must be
 |      given as first parameter.
 |
 |  after_idle(self, func, *args)
 |      Call FUNC once if the Tcl main loop has no event to
 |      process.
 |
 |      Return an identifier to cancel the scheduling with
 |      after_cancel.
 |
 |  anchor = grid_anchor(self, anchor=None)
 |
 |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |
 |  bell(self, displayof=0)
 |      Ring a display's bell.
 |
 |  bind(self, sequence=None, func=None, add=None)
 |      Bind to this widget at event SEQUENCE a call to function FUNC.
 |
 |      SEQUENCE is a string of concatenated event
 |      patterns. An event pattern is of the form
 |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
 |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
 |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
 |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
 |      Mod1, M1. TYPE is one of Activate, Enter, Map,
 |      ButtonPress, Button, Expose, Motion, ButtonRelease
 |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
 |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
 |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
 |      Leave and DETAIL is the button number for ButtonPress,
 |      ButtonRelease and DETAIL is the Keysym for KeyPress and
 |      KeyRelease. Examples are
 |      <Control-Button-1> for pressing Control and mouse button 1 or
 |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
 |      An event pattern can also be a virtual event of the form
 |      <<AString>> where AString can be arbitrary. This
 |      event can be generated by event_generate.
 |      If events are concatenated they must appear shortly
 |      after each other.
 |
 |      FUNC will be called if the event sequence occurs with an
 |      instance of Event as argument. If the return value of FUNC is
 |      "break" no further bound function is invoked.
 |
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function.
 |
 |      Bind will return an identifier to allow deletion of the bound function with
 |      unbind without memory leak.
 |
 |      If FUNC or SEQUENCE is omitted the bound function or list
 |      of bound events are returned.
 |
 |  bind_all(self, sequence=None, func=None, add=None)
 |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function. See bind for the return value.
 |
 |  bind_class(self, className, sequence=None, func=None, add=None)
 |      Bind to widgets with bindtag CLASSNAME at event
 |      SEQUENCE a call of function FUNC. An additional
 |      boolean parameter ADD specifies whether FUNC will be
 |      called additionally to the other bound function or
 |      whether it will replace the previous function. See bind for
 |      the return value.
 |
 |  bindtags(self, tagList=None)
 |      Set or get the list of bindtags for this widget.
 |
 |      With no argument return the list of all bindtags associated with
 |      this widget. With a list of strings as argument the bindtags are
 |      set to this list. The bindtags determine in which order events are
 |      processed (see bind).
 |
 |  cget(self, key)
 |      Return the resource value for a KEY given as string.
 |
 |  clipboard_append(self, string, **kw)
 |      Append STRING to the Tk clipboard.
 |
 |      A widget specified at the optional displayof keyword
 |      argument specifies the target display. The clipboard
 |      can be retrieved with selection_get.
 |
 |  clipboard_clear(self, **kw)
 |      Clear the data in the Tk clipboard.
 |
 |      A widget specified for the optional displayof keyword
 |      argument specifies the target display.
 |
 |  clipboard_get(self, **kw)
 |      Retrieve data from the clipboard on window's display.
 |
 |      The window keyword defaults to the root window of the Tkinter
 |      application.
 |
 |      The type keyword specifies the form in which the data is
 |      to be returned and should be an atom name such as STRING
 |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
 |      is to try UTF8_STRING and fall back to STRING.
 |
 |      This command is equivalent to:
 |
 |      selection_get(CLIPBOARD)
 |
 |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
 |
 |  config = configure(self, cnf=None, **kw)
 |      Configure resources of a widget.
 |
 |      The values for resources are specified as keyword
 |      arguments. To get an overview about
 |      the allowed keyword arguments call the method keys.
 |
 |  deletecommand(self, name)
 |      Internal function.
 |
 |      Delete the Tcl command provided in NAME.
 |
 |  event_add(self, virtual, *sequences)
 |      Bind a virtual event VIRTUAL (of the form <<Name>>)
 |      to an event SEQUENCE such that the virtual event is triggered
 |      whenever SEQUENCE occurs.
 |
 |  event_delete(self, virtual, *sequences)
 |      Unbind a virtual event VIRTUAL from SEQUENCE.
 |
 |  event_generate(self, sequence, **kw)
 |      Generate an event SEQUENCE. Additional
 |      keyword arguments specify parameter of the event
 |      (e.g. x, y, rootx, rooty).
 |
 |  event_info(self, virtual=None)
 |      Return a list of all virtual events or the information
 |      about the SEQUENCE bound to the virtual event VIRTUAL.
 |
 |  focus = focus_set(self)
 |
 |  focus_displayof(self)
 |      Return the widget which has currently the focus on the
 |      display where this widget is located.
 |
 |      Return None if the application does not have the focus.
 |
 |  focus_force(self)
 |      Direct input focus to this widget even if the
 |      application does not have the focus. Use with
 |      caution!
 |
 |  focus_get(self)
 |      Return the widget which has currently the focus in the
 |      application.
 |
 |      Use focus_displayof to allow working with several
 |      displays. Return None if application does not have
 |      the focus.
 |
 |  focus_lastfor(self)
 |      Return the widget which would have the focus if top level
 |      for this widget gets the focus from the window manager.
 |
 |  focus_set(self)
 |      Direct input focus to this widget.
 |
 |      If the application currently does not have the focus
 |      this widget will get the focus if the application gets
 |      the focus through the window manager.
 |
 |  getboolean(self, s)
 |      Return a boolean value for Tcl boolean values true and false given as parameter.
 |
 |  getdouble(self, s)
 |
 |  getint(self, s)
 |
 |  getvar(self, name='PY_VAR')
 |      Return value of Tcl variable NAME.
 |
 |  grab_current(self)
 |      Return widget which has currently the grab in this application
 |      or None.
 |
 |  grab_release(self)
 |      Release grab for this widget if currently set.
 |
 |  grab_set(self)
 |      Set grab for this widget.
 |
 |      A grab directs all events to this and descendant
 |      widgets in the application.
 |
 |  grab_set_global(self)
 |      Set global grab for this widget.
 |
 |      A global grab directs all events to this and
 |      descendant widgets on the display. Use with caution -
 |      other applications do not get events anymore.
 |
 |  grab_status(self)
 |      Return None, "local" or "global" if this widget has
 |      no, a local or a global grab.
 |
 |  grid_anchor(self, anchor=None)
 |      The anchor value controls how to place the grid within the
 |      master when no row/column has any weight.
 |
 |      The default anchor is nw.
 |
 |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |      Return a tuple of integer coordinates for the bounding
 |      box of this widget controlled by the geometry manager grid.
 |
 |      If COLUMN, ROW is given the bounding box applies from
 |      the cell with row and column 0 to the specified
 |      cell. If COL2 and ROW2 are given the bounding box
 |      starts at that cell.
 |
 |      The returned integers specify the offset of the upper left
 |      corner in the master widget and the width and height.
 |
 |  grid_columnconfigure(self, index, cnf={}, **kw)
 |      Configure column INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the column),
 |      weight (how much does additional space propagate to this column)
 |      and pad (how much space to let additionally).
 |
 |  grid_location(self, x, y)
 |      Return a tuple of column and row which identify the cell
 |      at which the pixel at position X and Y inside the master
 |      widget is located.
 |
 |  grid_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given, the current setting will be returned.
 |
 |  grid_rowconfigure(self, index, cnf={}, **kw)
 |      Configure row INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the row),
 |      weight (how much does additional space propagate to this row)
 |      and pad (how much space to let additionally).
 |
 |  grid_size(self)
 |      Return a tuple of the number of column and rows in the grid.
 |
 |  grid_slaves(self, row=None, column=None)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  image_names(self)
 |      Return a list of all existing image names.
 |
 |  image_types(self)
 |      Return a list of all available image types (e.g. photo bitmap).
 |
 |  info_patchlevel(self)
 |      Returns the exact version of the Tcl library.
 |
 |  keys(self)
 |      Return a list of all resource names of this widget.
 |
 |  lift = tkraise(self, aboveThis=None)
 |
 |  lower(self, belowThis=None)
 |      Lower this widget in the stacking order.
 |
 |  mainloop(self, n=0)
 |      Call the mainloop of Tk.
 |
 |  nametowidget(self, name)
 |      Return the Tkinter instance of a widget identified by
 |      its Tcl name NAME.
 |
 |  option_add(self, pattern, value, priority=None)
 |      Set a VALUE (second parameter) for an option
 |      PATTERN (first parameter).
 |
 |      An optional third parameter gives the numeric priority
 |      (defaults to 80).
 |
 |  option_clear(self)
 |      Clear the option database.
 |
 |      It will be reloaded if option_add is called.
 |
 |  option_get(self, name, className)
 |      Return the value for an option NAME for this widget
 |      with CLASSNAME.
 |
 |      Values with higher priority override lower values.
 |
 |  option_readfile(self, fileName, priority=None)
 |      Read file FILENAME into the option database.
 |
 |      An optional second parameter gives the numeric
 |      priority.
 |
 |  pack_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given the current setting will be returned.
 |
 |  pack_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  place_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  propagate = pack_propagate(self, flag=['_noarg_'])
 |
 |  quit(self)
 |      Quit the Tcl interpreter. All widgets will be destroyed.
 |
 |  register = _register(self, func, subst=None, needcleanup=1)
 |
 |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
 |
 |  selection_clear(self, **kw)
 |      Clear the current X selection.
 |
 |  selection_get(self, **kw)
 |      Return the contents of the current X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection and defaults to PRIMARY.  A keyword
 |      parameter displayof specifies a widget on the display
 |      to use. A keyword parameter type specifies the form of data to be
 |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
 |      before STRING.
 |
 |  selection_handle(self, command, **kw)
 |      Specify a function COMMAND to call if the X
 |      selection owned by this widget is queried by another
 |      application.
 |
 |      This function must return the contents of the
 |      selection. The function will be called with the
 |      arguments OFFSET and LENGTH which allows the chunking
 |      of very long selections. The following keyword
 |      parameters can be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  selection_own(self, **kw)
 |      Become owner of X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection (default PRIMARY).
 |
 |  selection_own_get(self, **kw)
 |      Return owner of X selection.
 |
 |      The following keyword parameter can
 |      be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  send(self, interp, cmd, *args)
 |      Send Tcl command CMD to different interpreter INTERP to be executed.
 |
 |  setvar(self, name='PY_VAR', value='1')
 |      Set Tcl variable NAME to VALUE.
 |
 |  size = grid_size(self)
 |
 |  slaves = pack_slaves(self)
 |
 |  tk_bisque(self)
 |      Change the color scheme to light brown as used in Tk 3.6 and before.
 |
 |  tk_focusFollowsMouse(self)
 |      The widget under mouse will get automatically focus. Can not
 |      be disabled easily.
 |
 |  tk_focusNext(self)
 |      Return the next widget in the focus order which follows
 |      widget which has currently the focus.
 |
 |      The focus order first goes to the next child, then to
 |      the children of the child recursively and then to the
 |      next sibling which is higher in the stacking order.  A
 |      widget is omitted if it has the takefocus resource set
 |      to 0.
 |
 |  tk_focusPrev(self)
 |      Return previous widget in the focus order. See tk_focusNext for details.
 |
 |  tk_setPalette(self, *args, **kw)
 |      Set a new color scheme for all widget elements.
 |
 |      A single color as argument will cause that all colors of Tk
 |      widget elements are derived from this.
 |      Alternatively several keyword parameters and its associated
 |      colors can be given. The following keywords are valid:
 |      activeBackground, foreground, selectColor,
 |      activeForeground, highlightBackground, selectBackground,
 |      background, highlightColor, selectForeground,
 |      disabledForeground, insertBackground, troughColor.
 |
 |  tk_strictMotif(self, boolean=None)
 |      Set Tcl internal variable, whether the look and feel
 |      should adhere to Motif.
 |
 |      A parameter of 1 means adhere to Motif (e.g. no color
 |      change if mouse passes over slider).
 |      Returns the set value.
 |
 |  tkraise(self, aboveThis=None)
 |      Raise this widget in the stacking order.
 |
 |  unbind(self, sequence, funcid=None)
 |      Unbind for this widget the event SEQUENCE.
 |
 |      If FUNCID is given, only unbind the function identified with FUNCID
 |      and also delete the corresponding Tcl command.
 |
 |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
 |      unbound.
 |
 |  unbind_all(self, sequence)
 |      Unbind for all widgets for event SEQUENCE all functions.
 |
 |  unbind_class(self, className, sequence)
 |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
 |      all functions.
 |
 |  update(self)
 |      Enter event loop until all pending events have been processed by Tcl.
 |
 |  update_idletasks(self)
 |      Enter event loop until all idle callbacks have been called. This
 |      will update the display of windows but not process events caused by
 |      the user.
 |
 |  wait_variable(self, name='PY_VAR')
 |      Wait until the variable is modified.
 |
 |      A parameter of type IntVar, StringVar, DoubleVar or
 |      BooleanVar must be given.
 |
 |  wait_visibility(self, window=None)
 |      Wait until the visibility of a WIDGET changes
 |      (e.g. it appears).
 |
 |      If no parameter is given self is used.
 |
 |  wait_window(self, window=None)
 |      Wait until a WIDGET is destroyed.
 |
 |      If no parameter is given self is used.
 |
 |  waitvar = wait_variable(self, name='PY_VAR')
 |
 |  winfo_atom(self, name, displayof=0)
 |      Return integer which represents atom NAME.
 |
 |  winfo_atomname(self, id, displayof=0)
 |      Return name of atom with identifier ID.
 |
 |  winfo_cells(self)
 |      Return number of cells in the colormap for this widget.
 |
 |  winfo_children(self)
 |      Return a list of all widgets which are children of this widget.
 |
 |  winfo_class(self)
 |      Return window class name of this widget.
 |
 |  winfo_colormapfull(self)
 |      Return True if at the last color request the colormap was full.
 |
 |  winfo_containing(self, rootX, rootY, displayof=0)
 |      Return the widget which is at the root coordinates ROOTX, ROOTY.
 |
 |  winfo_depth(self)
 |      Return the number of bits per pixel.
 |
 |  winfo_exists(self)
 |      Return true if this widget exists.
 |
 |  winfo_fpixels(self, number)
 |      Return the number of pixels for the given distance NUMBER
 |      (e.g. "3c") as float.
 |
 |  winfo_geometry(self)
 |      Return geometry string for this widget in the form "widthxheight+X+Y".
 |
 |  winfo_height(self)
 |      Return height of this widget.
 |
 |  winfo_id(self)
 |      Return identifier ID for this widget.
 |
 |  winfo_interps(self, displayof=0)
 |      Return the name of all Tcl interpreters for this display.
 |
 |  winfo_ismapped(self)
 |      Return true if this widget is mapped.
 |
 |  winfo_manager(self)
 |      Return the window manager name for this widget.
 |
 |  winfo_name(self)
 |      Return the name of this widget.
 |
 |  winfo_parent(self)
 |      Return the name of the parent of this widget.
 |
 |  winfo_pathname(self, id, displayof=0)
 |      Return the pathname of the widget given by ID.
 |
 |  winfo_pixels(self, number)
 |      Rounded integer value of winfo_fpixels.
 |
 |  winfo_pointerx(self)
 |      Return the x coordinate of the pointer on the root window.
 |
 |  winfo_pointerxy(self)
 |      Return a tuple of x and y coordinates of the pointer on the root window.
 |
 |  winfo_pointery(self)
 |      Return the y coordinate of the pointer on the root window.
 |
 |  winfo_reqheight(self)
 |      Return requested height of this widget.
 |
 |  winfo_reqwidth(self)
 |      Return requested width of this widget.
 |
 |  winfo_rgb(self, color)
 |      Return a tuple of integer RGB values in range(65536) for color in this widget.
 |
 |  winfo_rootx(self)
 |      Return x coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_rooty(self)
 |      Return y coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_screen(self)
 |      Return the screen name of this widget.
 |
 |  winfo_screencells(self)
 |      Return the number of the cells in the colormap of the screen
 |      of this widget.
 |
 |  winfo_screendepth(self)
 |      Return the number of bits per pixel of the root window of the
 |      screen of this widget.
 |
 |  winfo_screenheight(self)
 |      Return the number of pixels of the height of the screen of this widget
 |      in pixel.
 |
 |  winfo_screenmmheight(self)
 |      Return the number of pixels of the height of the screen of
 |      this widget in mm.
 |
 |  winfo_screenmmwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in mm.
 |
 |  winfo_screenvisual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the default
 |      colormodel of this screen.
 |
 |  winfo_screenwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in pixel.
 |
 |  winfo_server(self)
 |      Return information of the X-Server of the screen of this widget in
 |      the form "XmajorRminor vendor vendorVersion".
 |
 |  winfo_toplevel(self)
 |      Return the toplevel widget of this widget.
 |
 |  winfo_viewable(self)
 |      Return true if the widget and all its higher ancestors are mapped.
 |
 |  winfo_visual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the
 |      colormodel of this widget.
 |
 |  winfo_visualid(self)
 |      Return the X identifier for the visual for this widget.
 |
 |  winfo_visualsavailable(self, includeids=False)
 |      Return a list of all visuals available for the screen
 |      of this widget.
 |
 |      Each item in the list consists of a visual name (see winfo_visual), a
 |      depth and if includeids is true is given also the X identifier.
 |
 |  winfo_vrootheight(self)
 |      Return the height of the virtual root window associated with this
 |      widget in pixels. If there is no virtual root window return the
 |      height of the screen.
 |
 |  winfo_vrootwidth(self)
 |      Return the width of the virtual root window associated with this
 |      widget in pixel. If there is no virtual root window return the
 |      width of the screen.
 |
 |  winfo_vrootx(self)
 |      Return the x offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_vrooty(self)
 |      Return the y offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_width(self)
 |      Return the width of this widget.
 |
 |  winfo_x(self)
 |      Return the x coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  winfo_y(self)
 |      Return the y coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from tkinter.Misc:
 |
 |  __dict__
 |      dictionary for instance variables
 |
 |  __weakref__
 |      list of weak references to the object
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Pack:
 |
 |  forget = pack_forget(self)
 |
 |  info = pack_info(self)
 |
 |  pack = pack_configure(self, cnf={}, **kw)
 |
 |  pack_configure(self, cnf={}, **kw)
 |      Pack a widget in the parent widget. Use as options:
 |      after=widget - pack it after you have packed widget
 |      anchor=NSEW (or subset) - position widget according to
 |                                given direction
 |      before=widget - pack it before you will pack widget
 |      expand=bool - expand widget if parent size grows
 |      fill=NONE or X or Y or BOTH - fill widget if widget grows
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
 |
 |  pack_forget(self)
 |      Unmap this widget and do not use it for the packing order.
 |
 |  pack_info(self)
 |      Return information about the packing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Place:
 |
 |  place = place_configure(self, cnf={}, **kw)
 |
 |  place_configure(self, cnf={}, **kw)
 |      Place a widget in the parent widget. Use as options:
 |      in=master - master relative to which the widget is placed
 |      in_=master - see 'in' option description
 |      x=amount - locate anchor of this widget at position x of master
 |      y=amount - locate anchor of this widget at position y of master
 |      relx=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to width of master (1.0 is right edge)
 |      rely=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to height of master (1.0 is bottom edge)
 |      anchor=NSEW (or subset) - position anchor according to given direction
 |      width=amount - width of this widget in pixel
 |      height=amount - height of this widget in pixel
 |      relwidth=amount - width of this widget between 0.0 and 1.0
 |                        relative to width of master (1.0 is the same width
 |                        as the master)
 |      relheight=amount - height of this widget between 0.0 and 1.0
 |                         relative to height of master (1.0 is the same
 |                         height as the master)
 |      bordermode="inside" or "outside" - whether to take border width of
 |                                         master widget into account
 |
 |  place_forget(self)
 |      Unmap this widget.
 |
 |  place_info(self)
 |      Return information about the placing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Grid:
 |
 |  grid = grid_configure(self, cnf={}, **kw)
 |
 |  grid_configure(self, cnf={}, **kw)
 |      Position a widget in the parent widget in a grid. Use as options:
 |      column=number - use cell identified with given column (starting with 0)
 |      columnspan=number - this widget will span several columns
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      row=number - use cell identified with given row (starting with 0)
 |      rowspan=number - this widget will span several rows
 |      sticky=NSEW - if cell is larger on which sides will this
 |                    widget stick to the cell boundary
 |
 |  grid_forget(self)
 |      Unmap this widget.
 |
 |  grid_info(self)
 |      Return information about the options
 |      for positioning this widget in a grid.
 |
 |  grid_remove(self)
 |      Unmap this widget but remember the grid options.
 |
 |  location = grid_location(self, x, y)

None
Help on class Scrollbar in module tkinter.ttk:

class Scrollbar(Widget, tkinter.Scrollbar)
 |  Scrollbar(master=None, **kw)
 |
 |  Ttk Scrollbar controls the viewport of a scrollable widget.
 |
 |  Method resolution order:
 |      Scrollbar
 |      Widget
 |      tkinter.Scrollbar
 |      tkinter.Widget
 |      tkinter.BaseWidget
 |      tkinter.Misc
 |      tkinter.Pack
 |      tkinter.Place
 |      tkinter.Grid
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  __init__(self, master=None, **kw)
 |      Construct a Ttk Scrollbar with parent master.
 |
 |      STANDARD OPTIONS
 |
 |          class, cursor, style, takefocus
 |
 |      WIDGET-SPECIFIC OPTIONS
 |
 |          command, orient
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from Widget:
 |
 |  identify(self, x, y)
 |      Returns the name of the element at position x, y, or the empty
 |      string if the point does not lie within any element.
 |
 |      x and y are pixel coordinates relative to the widget.
 |
 |  instate(self, statespec, callback=None, *args, **kw)
 |      Test the widget's state.
 |
 |      If callback is not specified, returns True if the widget state
 |      matches statespec and False otherwise. If callback is specified,
 |      then it will be invoked with *args, **kw if the widget state
 |      matches statespec. statespec is expected to be a sequence.
 |
 |  state(self, statespec=None)
 |      Modify or inquire widget state.
 |
 |      Widget state is returned if statespec is None, otherwise it is
 |      set according to the statespec flags and then a new state spec
 |      is returned indicating which flags were changed. statespec is
 |      expected to be a sequence.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Scrollbar:
 |
 |  activate(self, index=None)
 |      Marks the element indicated by index as active.
 |      The only index values understood by this method are "arrow1",
 |      "slider", or "arrow2".  If any other value is specified then no
 |      element of the scrollbar will be active.  If index is not specified,
 |      the method returns the name of the element that is currently active,
 |      or None if no element is active.
 |
 |  delta(self, deltax, deltay)
 |      Return the fractional change of the scrollbar setting if it
 |      would be moved by DELTAX or DELTAY pixels.
 |
 |  fraction(self, x, y)
 |      Return the fractional value which corresponds to a slider
 |      position of X,Y.
 |
 |  get(self)
 |      Return the current fractional values (upper and lower end)
 |      of the slider position.
 |
 |  set(self, first, last)
 |      Set the fractional values of the slider position (upper and
 |      lower ends as value between 0 and 1).
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.BaseWidget:
 |
 |  destroy(self)
 |      Destroy this and all descendants widgets.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Misc:
 |
 |  __getitem__ = cget(self, key)
 |
 |  __repr__(self)
 |      Return repr(self).
 |
 |  __setitem__(self, key, value)
 |
 |  __str__(self)
 |      Return the window path name of this widget.
 |
 |  after(self, ms, func=None, *args)
 |      Call function once after given time.
 |
 |      MS specifies the time in milliseconds. FUNC gives the
 |      function which shall be called. Additional parameters
 |      are given as parameters to the function call.  Return
 |      identifier to cancel scheduling with after_cancel.
 |
 |  after_cancel(self, id)
 |      Cancel scheduling of function identified with ID.
 |
 |      Identifier returned by after or after_idle must be
 |      given as first parameter.
 |
 |  after_idle(self, func, *args)
 |      Call FUNC once if the Tcl main loop has no event to
 |      process.
 |
 |      Return an identifier to cancel the scheduling with
 |      after_cancel.
 |
 |  anchor = grid_anchor(self, anchor=None)
 |
 |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |
 |  bell(self, displayof=0)
 |      Ring a display's bell.
 |
 |  bind(self, sequence=None, func=None, add=None)
 |      Bind to this widget at event SEQUENCE a call to function FUNC.
 |
 |      SEQUENCE is a string of concatenated event
 |      patterns. An event pattern is of the form
 |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
 |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
 |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
 |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
 |      Mod1, M1. TYPE is one of Activate, Enter, Map,
 |      ButtonPress, Button, Expose, Motion, ButtonRelease
 |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
 |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
 |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
 |      Leave and DETAIL is the button number for ButtonPress,
 |      ButtonRelease and DETAIL is the Keysym for KeyPress and
 |      KeyRelease. Examples are
 |      <Control-Button-1> for pressing Control and mouse button 1 or
 |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
 |      An event pattern can also be a virtual event of the form
 |      <<AString>> where AString can be arbitrary. This
 |      event can be generated by event_generate.
 |      If events are concatenated they must appear shortly
 |      after each other.
 |
 |      FUNC will be called if the event sequence occurs with an
 |      instance of Event as argument. If the return value of FUNC is
 |      "break" no further bound function is invoked.
 |
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function.
 |
 |      Bind will return an identifier to allow deletion of the bound function with
 |      unbind without memory leak.
 |
 |      If FUNC or SEQUENCE is omitted the bound function or list
 |      of bound events are returned.
 |
 |  bind_all(self, sequence=None, func=None, add=None)
 |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function. See bind for the return value.
 |
 |  bind_class(self, className, sequence=None, func=None, add=None)
 |      Bind to widgets with bindtag CLASSNAME at event
 |      SEQUENCE a call of function FUNC. An additional
 |      boolean parameter ADD specifies whether FUNC will be
 |      called additionally to the other bound function or
 |      whether it will replace the previous function. See bind for
 |      the return value.
 |
 |  bindtags(self, tagList=None)
 |      Set or get the list of bindtags for this widget.
 |
 |      With no argument return the list of all bindtags associated with
 |      this widget. With a list of strings as argument the bindtags are
 |      set to this list. The bindtags determine in which order events are
 |      processed (see bind).
 |
 |  cget(self, key)
 |      Return the resource value for a KEY given as string.
 |
 |  clipboard_append(self, string, **kw)
 |      Append STRING to the Tk clipboard.
 |
 |      A widget specified at the optional displayof keyword
 |      argument specifies the target display. The clipboard
 |      can be retrieved with selection_get.
 |
 |  clipboard_clear(self, **kw)
 |      Clear the data in the Tk clipboard.
 |
 |      A widget specified for the optional displayof keyword
 |      argument specifies the target display.
 |
 |  clipboard_get(self, **kw)
 |      Retrieve data from the clipboard on window's display.
 |
 |      The window keyword defaults to the root window of the Tkinter
 |      application.
 |
 |      The type keyword specifies the form in which the data is
 |      to be returned and should be an atom name such as STRING
 |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
 |      is to try UTF8_STRING and fall back to STRING.
 |
 |      This command is equivalent to:
 |
 |      selection_get(CLIPBOARD)
 |
 |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
 |
 |  config = configure(self, cnf=None, **kw)
 |
 |  configure(self, cnf=None, **kw)
 |      Configure resources of a widget.
 |
 |      The values for resources are specified as keyword
 |      arguments. To get an overview about
 |      the allowed keyword arguments call the method keys.
 |
 |  deletecommand(self, name)
 |      Internal function.
 |
 |      Delete the Tcl command provided in NAME.
 |
 |  event_add(self, virtual, *sequences)
 |      Bind a virtual event VIRTUAL (of the form <<Name>>)
 |      to an event SEQUENCE such that the virtual event is triggered
 |      whenever SEQUENCE occurs.
 |
 |  event_delete(self, virtual, *sequences)
 |      Unbind a virtual event VIRTUAL from SEQUENCE.
 |
 |  event_generate(self, sequence, **kw)
 |      Generate an event SEQUENCE. Additional
 |      keyword arguments specify parameter of the event
 |      (e.g. x, y, rootx, rooty).
 |
 |  event_info(self, virtual=None)
 |      Return a list of all virtual events or the information
 |      about the SEQUENCE bound to the virtual event VIRTUAL.
 |
 |  focus = focus_set(self)
 |
 |  focus_displayof(self)
 |      Return the widget which has currently the focus on the
 |      display where this widget is located.
 |
 |      Return None if the application does not have the focus.
 |
 |  focus_force(self)
 |      Direct input focus to this widget even if the
 |      application does not have the focus. Use with
 |      caution!
 |
 |  focus_get(self)
 |      Return the widget which has currently the focus in the
 |      application.
 |
 |      Use focus_displayof to allow working with several
 |      displays. Return None if application does not have
 |      the focus.
 |
 |  focus_lastfor(self)
 |      Return the widget which would have the focus if top level
 |      for this widget gets the focus from the window manager.
 |
 |  focus_set(self)
 |      Direct input focus to this widget.
 |
 |      If the application currently does not have the focus
 |      this widget will get the focus if the application gets
 |      the focus through the window manager.
 |
 |  getboolean(self, s)
 |      Return a boolean value for Tcl boolean values true and false given as parameter.
 |
 |  getdouble(self, s)
 |
 |  getint(self, s)
 |
 |  getvar(self, name='PY_VAR')
 |      Return value of Tcl variable NAME.
 |
 |  grab_current(self)
 |      Return widget which has currently the grab in this application
 |      or None.
 |
 |  grab_release(self)
 |      Release grab for this widget if currently set.
 |
 |  grab_set(self)
 |      Set grab for this widget.
 |
 |      A grab directs all events to this and descendant
 |      widgets in the application.
 |
 |  grab_set_global(self)
 |      Set global grab for this widget.
 |
 |      A global grab directs all events to this and
 |      descendant widgets on the display. Use with caution -
 |      other applications do not get events anymore.
 |
 |  grab_status(self)
 |      Return None, "local" or "global" if this widget has
 |      no, a local or a global grab.
 |
 |  grid_anchor(self, anchor=None)
 |      The anchor value controls how to place the grid within the
 |      master when no row/column has any weight.
 |
 |      The default anchor is nw.
 |
 |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |      Return a tuple of integer coordinates for the bounding
 |      box of this widget controlled by the geometry manager grid.
 |
 |      If COLUMN, ROW is given the bounding box applies from
 |      the cell with row and column 0 to the specified
 |      cell. If COL2 and ROW2 are given the bounding box
 |      starts at that cell.
 |
 |      The returned integers specify the offset of the upper left
 |      corner in the master widget and the width and height.
 |
 |  grid_columnconfigure(self, index, cnf={}, **kw)
 |      Configure column INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the column),
 |      weight (how much does additional space propagate to this column)
 |      and pad (how much space to let additionally).
 |
 |  grid_location(self, x, y)
 |      Return a tuple of column and row which identify the cell
 |      at which the pixel at position X and Y inside the master
 |      widget is located.
 |
 |  grid_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given, the current setting will be returned.
 |
 |  grid_rowconfigure(self, index, cnf={}, **kw)
 |      Configure row INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the row),
 |      weight (how much does additional space propagate to this row)
 |      and pad (how much space to let additionally).
 |
 |  grid_size(self)
 |      Return a tuple of the number of column and rows in the grid.
 |
 |  grid_slaves(self, row=None, column=None)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  image_names(self)
 |      Return a list of all existing image names.
 |
 |  image_types(self)
 |      Return a list of all available image types (e.g. photo bitmap).
 |
 |  info_patchlevel(self)
 |      Returns the exact version of the Tcl library.
 |
 |  keys(self)
 |      Return a list of all resource names of this widget.
 |
 |  lift = tkraise(self, aboveThis=None)
 |
 |  lower(self, belowThis=None)
 |      Lower this widget in the stacking order.
 |
 |  mainloop(self, n=0)
 |      Call the mainloop of Tk.
 |
 |  nametowidget(self, name)
 |      Return the Tkinter instance of a widget identified by
 |      its Tcl name NAME.
 |
 |  option_add(self, pattern, value, priority=None)
 |      Set a VALUE (second parameter) for an option
 |      PATTERN (first parameter).
 |
 |      An optional third parameter gives the numeric priority
 |      (defaults to 80).
 |
 |  option_clear(self)
 |      Clear the option database.
 |
 |      It will be reloaded if option_add is called.
 |
 |  option_get(self, name, className)
 |      Return the value for an option NAME for this widget
 |      with CLASSNAME.
 |
 |      Values with higher priority override lower values.
 |
 |  option_readfile(self, fileName, priority=None)
 |      Read file FILENAME into the option database.
 |
 |      An optional second parameter gives the numeric
 |      priority.
 |
 |  pack_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given the current setting will be returned.
 |
 |  pack_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  place_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  propagate = pack_propagate(self, flag=['_noarg_'])
 |
 |  quit(self)
 |      Quit the Tcl interpreter. All widgets will be destroyed.
 |
 |  register = _register(self, func, subst=None, needcleanup=1)
 |
 |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
 |
 |  selection_clear(self, **kw)
 |      Clear the current X selection.
 |
 |  selection_get(self, **kw)
 |      Return the contents of the current X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection and defaults to PRIMARY.  A keyword
 |      parameter displayof specifies a widget on the display
 |      to use. A keyword parameter type specifies the form of data to be
 |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
 |      before STRING.
 |
 |  selection_handle(self, command, **kw)
 |      Specify a function COMMAND to call if the X
 |      selection owned by this widget is queried by another
 |      application.
 |
 |      This function must return the contents of the
 |      selection. The function will be called with the
 |      arguments OFFSET and LENGTH which allows the chunking
 |      of very long selections. The following keyword
 |      parameters can be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  selection_own(self, **kw)
 |      Become owner of X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection (default PRIMARY).
 |
 |  selection_own_get(self, **kw)
 |      Return owner of X selection.
 |
 |      The following keyword parameter can
 |      be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  send(self, interp, cmd, *args)
 |      Send Tcl command CMD to different interpreter INTERP to be executed.
 |
 |  setvar(self, name='PY_VAR', value='1')
 |      Set Tcl variable NAME to VALUE.
 |
 |  size = grid_size(self)
 |
 |  slaves = pack_slaves(self)
 |
 |  tk_bisque(self)
 |      Change the color scheme to light brown as used in Tk 3.6 and before.
 |
 |  tk_focusFollowsMouse(self)
 |      The widget under mouse will get automatically focus. Can not
 |      be disabled easily.
 |
 |  tk_focusNext(self)
 |      Return the next widget in the focus order which follows
 |      widget which has currently the focus.
 |
 |      The focus order first goes to the next child, then to
 |      the children of the child recursively and then to the
 |      next sibling which is higher in the stacking order.  A
 |      widget is omitted if it has the takefocus resource set
 |      to 0.
 |
 |  tk_focusPrev(self)
 |      Return previous widget in the focus order. See tk_focusNext for details.
 |
 |  tk_setPalette(self, *args, **kw)
 |      Set a new color scheme for all widget elements.
 |
 |      A single color as argument will cause that all colors of Tk
 |      widget elements are derived from this.
 |      Alternatively several keyword parameters and its associated
 |      colors can be given. The following keywords are valid:
 |      activeBackground, foreground, selectColor,
 |      activeForeground, highlightBackground, selectBackground,
 |      background, highlightColor, selectForeground,
 |      disabledForeground, insertBackground, troughColor.
 |
 |  tk_strictMotif(self, boolean=None)
 |      Set Tcl internal variable, whether the look and feel
 |      should adhere to Motif.
 |
 |      A parameter of 1 means adhere to Motif (e.g. no color
 |      change if mouse passes over slider).
 |      Returns the set value.
 |
 |  tkraise(self, aboveThis=None)
 |      Raise this widget in the stacking order.
 |
 |  unbind(self, sequence, funcid=None)
 |      Unbind for this widget the event SEQUENCE.
 |
 |      If FUNCID is given, only unbind the function identified with FUNCID
 |      and also delete the corresponding Tcl command.
 |
 |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
 |      unbound.
 |
 |  unbind_all(self, sequence)
 |      Unbind for all widgets for event SEQUENCE all functions.
 |
 |  unbind_class(self, className, sequence)
 |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
 |      all functions.
 |
 |  update(self)
 |      Enter event loop until all pending events have been processed by Tcl.
 |
 |  update_idletasks(self)
 |      Enter event loop until all idle callbacks have been called. This
 |      will update the display of windows but not process events caused by
 |      the user.
 |
 |  wait_variable(self, name='PY_VAR')
 |      Wait until the variable is modified.
 |
 |      A parameter of type IntVar, StringVar, DoubleVar or
 |      BooleanVar must be given.
 |
 |  wait_visibility(self, window=None)
 |      Wait until the visibility of a WIDGET changes
 |      (e.g. it appears).
 |
 |      If no parameter is given self is used.
 |
 |  wait_window(self, window=None)
 |      Wait until a WIDGET is destroyed.
 |
 |      If no parameter is given self is used.
 |
 |  waitvar = wait_variable(self, name='PY_VAR')
 |
 |  winfo_atom(self, name, displayof=0)
 |      Return integer which represents atom NAME.
 |
 |  winfo_atomname(self, id, displayof=0)
 |      Return name of atom with identifier ID.
 |
 |  winfo_cells(self)
 |      Return number of cells in the colormap for this widget.
 |
 |  winfo_children(self)
 |      Return a list of all widgets which are children of this widget.
 |
 |  winfo_class(self)
 |      Return window class name of this widget.
 |
 |  winfo_colormapfull(self)
 |      Return True if at the last color request the colormap was full.
 |
 |  winfo_containing(self, rootX, rootY, displayof=0)
 |      Return the widget which is at the root coordinates ROOTX, ROOTY.
 |
 |  winfo_depth(self)
 |      Return the number of bits per pixel.
 |
 |  winfo_exists(self)
 |      Return true if this widget exists.
 |
 |  winfo_fpixels(self, number)
 |      Return the number of pixels for the given distance NUMBER
 |      (e.g. "3c") as float.
 |
 |  winfo_geometry(self)
 |      Return geometry string for this widget in the form "widthxheight+X+Y".
 |
 |  winfo_height(self)
 |      Return height of this widget.
 |
 |  winfo_id(self)
 |      Return identifier ID for this widget.
 |
 |  winfo_interps(self, displayof=0)
 |      Return the name of all Tcl interpreters for this display.
 |
 |  winfo_ismapped(self)
 |      Return true if this widget is mapped.
 |
 |  winfo_manager(self)
 |      Return the window manager name for this widget.
 |
 |  winfo_name(self)
 |      Return the name of this widget.
 |
 |  winfo_parent(self)
 |      Return the name of the parent of this widget.
 |
 |  winfo_pathname(self, id, displayof=0)
 |      Return the pathname of the widget given by ID.
 |
 |  winfo_pixels(self, number)
 |      Rounded integer value of winfo_fpixels.
 |
 |  winfo_pointerx(self)
 |      Return the x coordinate of the pointer on the root window.
 |
 |  winfo_pointerxy(self)
 |      Return a tuple of x and y coordinates of the pointer on the root window.
 |
 |  winfo_pointery(self)
 |      Return the y coordinate of the pointer on the root window.
 |
 |  winfo_reqheight(self)
 |      Return requested height of this widget.
 |
 |  winfo_reqwidth(self)
 |      Return requested width of this widget.
 |
 |  winfo_rgb(self, color)
 |      Return a tuple of integer RGB values in range(65536) for color in this widget.
 |
 |  winfo_rootx(self)
 |      Return x coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_rooty(self)
 |      Return y coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_screen(self)
 |      Return the screen name of this widget.
 |
 |  winfo_screencells(self)
 |      Return the number of the cells in the colormap of the screen
 |      of this widget.
 |
 |  winfo_screendepth(self)
 |      Return the number of bits per pixel of the root window of the
 |      screen of this widget.
 |
 |  winfo_screenheight(self)
 |      Return the number of pixels of the height of the screen of this widget
 |      in pixel.
 |
 |  winfo_screenmmheight(self)
 |      Return the number of pixels of the height of the screen of
 |      this widget in mm.
 |
 |  winfo_screenmmwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in mm.
 |
 |  winfo_screenvisual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the default
 |      colormodel of this screen.
 |
 |  winfo_screenwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in pixel.
 |
 |  winfo_server(self)
 |      Return information of the X-Server of the screen of this widget in
 |      the form "XmajorRminor vendor vendorVersion".
 |
 |  winfo_toplevel(self)
 |      Return the toplevel widget of this widget.
 |
 |  winfo_viewable(self)
 |      Return true if the widget and all its higher ancestors are mapped.
 |
 |  winfo_visual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the
 |      colormodel of this widget.
 |
 |  winfo_visualid(self)
 |      Return the X identifier for the visual for this widget.
 |
 |  winfo_visualsavailable(self, includeids=False)
 |      Return a list of all visuals available for the screen
 |      of this widget.
 |
 |      Each item in the list consists of a visual name (see winfo_visual), a
 |      depth and if includeids is true is given also the X identifier.
 |
 |  winfo_vrootheight(self)
 |      Return the height of the virtual root window associated with this
 |      widget in pixels. If there is no virtual root window return the
 |      height of the screen.
 |
 |  winfo_vrootwidth(self)
 |      Return the width of the virtual root window associated with this
 |      widget in pixel. If there is no virtual root window return the
 |      width of the screen.
 |
 |  winfo_vrootx(self)
 |      Return the x offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_vrooty(self)
 |      Return the y offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_width(self)
 |      Return the width of this widget.
 |
 |  winfo_x(self)
 |      Return the x coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  winfo_y(self)
 |      Return the y coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from tkinter.Misc:
 |
 |  __dict__
 |      dictionary for instance variables
 |
 |  __weakref__
 |      list of weak references to the object
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Pack:
 |
 |  forget = pack_forget(self)
 |
 |  info = pack_info(self)
 |
 |  pack = pack_configure(self, cnf={}, **kw)
 |
 |  pack_configure(self, cnf={}, **kw)
 |      Pack a widget in the parent widget. Use as options:
 |      after=widget - pack it after you have packed widget
 |      anchor=NSEW (or subset) - position widget according to
 |                                given direction
 |      before=widget - pack it before you will pack widget
 |      expand=bool - expand widget if parent size grows
 |      fill=NONE or X or Y or BOTH - fill widget if widget grows
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
 |
 |  pack_forget(self)
 |      Unmap this widget and do not use it for the packing order.
 |
 |  pack_info(self)
 |      Return information about the packing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Place:
 |
 |  place = place_configure(self, cnf={}, **kw)
 |
 |  place_configure(self, cnf={}, **kw)
 |      Place a widget in the parent widget. Use as options:
 |      in=master - master relative to which the widget is placed
 |      in_=master - see 'in' option description
 |      x=amount - locate anchor of this widget at position x of master
 |      y=amount - locate anchor of this widget at position y of master
 |      relx=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to width of master (1.0 is right edge)
 |      rely=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to height of master (1.0 is bottom edge)
 |      anchor=NSEW (or subset) - position anchor according to given direction
 |      width=amount - width of this widget in pixel
 |      height=amount - height of this widget in pixel
 |      relwidth=amount - width of this widget between 0.0 and 1.0
 |                        relative to width of master (1.0 is the same width
 |                        as the master)
 |      relheight=amount - height of this widget between 0.0 and 1.0
 |                         relative to height of master (1.0 is the same
 |                         height as the master)
 |      bordermode="inside" or "outside" - whether to take border width of
 |                                         master widget into account
 |
 |  place_forget(self)
 |      Unmap this widget.
 |
 |  place_info(self)
 |      Return information about the placing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Grid:
 |
 |  grid = grid_configure(self, cnf={}, **kw)
 |
 |  grid_configure(self, cnf={}, **kw)
 |      Position a widget in the parent widget in a grid. Use as options:
 |      column=number - use cell identified with given column (starting with 0)
 |      columnspan=number - this widget will span several columns
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      row=number - use cell identified with given row (starting with 0)
 |      rowspan=number - this widget will span several rows
 |      sticky=NSEW - if cell is larger on which sides will this
 |                    widget stick to the cell boundary
 |
 |  grid_forget(self)
 |      Unmap this widget.
 |
 |  grid_info(self)
 |      Return information about the options
 |      for positioning this widget in a grid.
 |
 |  grid_remove(self)
 |      Unmap this widget but remember the grid options.
 |
 |  location = grid_location(self, x, y)

None
Help on class Separator in module tkinter.ttk:

class Separator(Widget)
 |  Separator(master=None, **kw)
 |
 |  Ttk Separator widget displays a horizontal or vertical separator
 |  bar.
 |
 |  Method resolution order:
 |      Separator
 |      Widget
 |      tkinter.Widget
 |      tkinter.BaseWidget
 |      tkinter.Misc
 |      tkinter.Pack
 |      tkinter.Place
 |      tkinter.Grid
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  __init__(self, master=None, **kw)
 |      Construct a Ttk Separator with parent master.
 |
 |      STANDARD OPTIONS
 |
 |          class, cursor, style, takefocus
 |
 |      WIDGET-SPECIFIC OPTIONS
 |
 |          orient
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from Widget:
 |
 |  identify(self, x, y)
 |      Returns the name of the element at position x, y, or the empty
 |      string if the point does not lie within any element.
 |
 |      x and y are pixel coordinates relative to the widget.
 |
 |  instate(self, statespec, callback=None, *args, **kw)
 |      Test the widget's state.
 |
 |      If callback is not specified, returns True if the widget state
 |      matches statespec and False otherwise. If callback is specified,
 |      then it will be invoked with *args, **kw if the widget state
 |      matches statespec. statespec is expected to be a sequence.
 |
 |  state(self, statespec=None)
 |      Modify or inquire widget state.
 |
 |      Widget state is returned if statespec is None, otherwise it is
 |      set according to the statespec flags and then a new state spec
 |      is returned indicating which flags were changed. statespec is
 |      expected to be a sequence.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.BaseWidget:
 |
 |  destroy(self)
 |      Destroy this and all descendants widgets.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Misc:
 |
 |  __getitem__ = cget(self, key)
 |
 |  __repr__(self)
 |      Return repr(self).
 |
 |  __setitem__(self, key, value)
 |
 |  __str__(self)
 |      Return the window path name of this widget.
 |
 |  after(self, ms, func=None, *args)
 |      Call function once after given time.
 |
 |      MS specifies the time in milliseconds. FUNC gives the
 |      function which shall be called. Additional parameters
 |      are given as parameters to the function call.  Return
 |      identifier to cancel scheduling with after_cancel.
 |
 |  after_cancel(self, id)
 |      Cancel scheduling of function identified with ID.
 |
 |      Identifier returned by after or after_idle must be
 |      given as first parameter.
 |
 |  after_idle(self, func, *args)
 |      Call FUNC once if the Tcl main loop has no event to
 |      process.
 |
 |      Return an identifier to cancel the scheduling with
 |      after_cancel.
 |
 |  anchor = grid_anchor(self, anchor=None)
 |
 |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |
 |  bell(self, displayof=0)
 |      Ring a display's bell.
 |
 |  bind(self, sequence=None, func=None, add=None)
 |      Bind to this widget at event SEQUENCE a call to function FUNC.
 |
 |      SEQUENCE is a string of concatenated event
 |      patterns. An event pattern is of the form
 |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
 |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
 |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
 |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
 |      Mod1, M1. TYPE is one of Activate, Enter, Map,
 |      ButtonPress, Button, Expose, Motion, ButtonRelease
 |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
 |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
 |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
 |      Leave and DETAIL is the button number for ButtonPress,
 |      ButtonRelease and DETAIL is the Keysym for KeyPress and
 |      KeyRelease. Examples are
 |      <Control-Button-1> for pressing Control and mouse button 1 or
 |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
 |      An event pattern can also be a virtual event of the form
 |      <<AString>> where AString can be arbitrary. This
 |      event can be generated by event_generate.
 |      If events are concatenated they must appear shortly
 |      after each other.
 |
 |      FUNC will be called if the event sequence occurs with an
 |      instance of Event as argument. If the return value of FUNC is
 |      "break" no further bound function is invoked.
 |
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function.
 |
 |      Bind will return an identifier to allow deletion of the bound function with
 |      unbind without memory leak.
 |
 |      If FUNC or SEQUENCE is omitted the bound function or list
 |      of bound events are returned.
 |
 |  bind_all(self, sequence=None, func=None, add=None)
 |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function. See bind for the return value.
 |
 |  bind_class(self, className, sequence=None, func=None, add=None)
 |      Bind to widgets with bindtag CLASSNAME at event
 |      SEQUENCE a call of function FUNC. An additional
 |      boolean parameter ADD specifies whether FUNC will be
 |      called additionally to the other bound function or
 |      whether it will replace the previous function. See bind for
 |      the return value.
 |
 |  bindtags(self, tagList=None)
 |      Set or get the list of bindtags for this widget.
 |
 |      With no argument return the list of all bindtags associated with
 |      this widget. With a list of strings as argument the bindtags are
 |      set to this list. The bindtags determine in which order events are
 |      processed (see bind).
 |
 |  cget(self, key)
 |      Return the resource value for a KEY given as string.
 |
 |  clipboard_append(self, string, **kw)
 |      Append STRING to the Tk clipboard.
 |
 |      A widget specified at the optional displayof keyword
 |      argument specifies the target display. The clipboard
 |      can be retrieved with selection_get.
 |
 |  clipboard_clear(self, **kw)
 |      Clear the data in the Tk clipboard.
 |
 |      A widget specified for the optional displayof keyword
 |      argument specifies the target display.
 |
 |  clipboard_get(self, **kw)
 |      Retrieve data from the clipboard on window's display.
 |
 |      The window keyword defaults to the root window of the Tkinter
 |      application.
 |
 |      The type keyword specifies the form in which the data is
 |      to be returned and should be an atom name such as STRING
 |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
 |      is to try UTF8_STRING and fall back to STRING.
 |
 |      This command is equivalent to:
 |
 |      selection_get(CLIPBOARD)
 |
 |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
 |
 |  config = configure(self, cnf=None, **kw)
 |
 |  configure(self, cnf=None, **kw)
 |      Configure resources of a widget.
 |
 |      The values for resources are specified as keyword
 |      arguments. To get an overview about
 |      the allowed keyword arguments call the method keys.
 |
 |  deletecommand(self, name)
 |      Internal function.
 |
 |      Delete the Tcl command provided in NAME.
 |
 |  event_add(self, virtual, *sequences)
 |      Bind a virtual event VIRTUAL (of the form <<Name>>)
 |      to an event SEQUENCE such that the virtual event is triggered
 |      whenever SEQUENCE occurs.
 |
 |  event_delete(self, virtual, *sequences)
 |      Unbind a virtual event VIRTUAL from SEQUENCE.
 |
 |  event_generate(self, sequence, **kw)
 |      Generate an event SEQUENCE. Additional
 |      keyword arguments specify parameter of the event
 |      (e.g. x, y, rootx, rooty).
 |
 |  event_info(self, virtual=None)
 |      Return a list of all virtual events or the information
 |      about the SEQUENCE bound to the virtual event VIRTUAL.
 |
 |  focus = focus_set(self)
 |
 |  focus_displayof(self)
 |      Return the widget which has currently the focus on the
 |      display where this widget is located.
 |
 |      Return None if the application does not have the focus.
 |
 |  focus_force(self)
 |      Direct input focus to this widget even if the
 |      application does not have the focus. Use with
 |      caution!
 |
 |  focus_get(self)
 |      Return the widget which has currently the focus in the
 |      application.
 |
 |      Use focus_displayof to allow working with several
 |      displays. Return None if application does not have
 |      the focus.
 |
 |  focus_lastfor(self)
 |      Return the widget which would have the focus if top level
 |      for this widget gets the focus from the window manager.
 |
 |  focus_set(self)
 |      Direct input focus to this widget.
 |
 |      If the application currently does not have the focus
 |      this widget will get the focus if the application gets
 |      the focus through the window manager.
 |
 |  getboolean(self, s)
 |      Return a boolean value for Tcl boolean values true and false given as parameter.
 |
 |  getdouble(self, s)
 |
 |  getint(self, s)
 |
 |  getvar(self, name='PY_VAR')
 |      Return value of Tcl variable NAME.
 |
 |  grab_current(self)
 |      Return widget which has currently the grab in this application
 |      or None.
 |
 |  grab_release(self)
 |      Release grab for this widget if currently set.
 |
 |  grab_set(self)
 |      Set grab for this widget.
 |
 |      A grab directs all events to this and descendant
 |      widgets in the application.
 |
 |  grab_set_global(self)
 |      Set global grab for this widget.
 |
 |      A global grab directs all events to this and
 |      descendant widgets on the display. Use with caution -
 |      other applications do not get events anymore.
 |
 |  grab_status(self)
 |      Return None, "local" or "global" if this widget has
 |      no, a local or a global grab.
 |
 |  grid_anchor(self, anchor=None)
 |      The anchor value controls how to place the grid within the
 |      master when no row/column has any weight.
 |
 |      The default anchor is nw.
 |
 |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |      Return a tuple of integer coordinates for the bounding
 |      box of this widget controlled by the geometry manager grid.
 |
 |      If COLUMN, ROW is given the bounding box applies from
 |      the cell with row and column 0 to the specified
 |      cell. If COL2 and ROW2 are given the bounding box
 |      starts at that cell.
 |
 |      The returned integers specify the offset of the upper left
 |      corner in the master widget and the width and height.
 |
 |  grid_columnconfigure(self, index, cnf={}, **kw)
 |      Configure column INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the column),
 |      weight (how much does additional space propagate to this column)
 |      and pad (how much space to let additionally).
 |
 |  grid_location(self, x, y)
 |      Return a tuple of column and row which identify the cell
 |      at which the pixel at position X and Y inside the master
 |      widget is located.
 |
 |  grid_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given, the current setting will be returned.
 |
 |  grid_rowconfigure(self, index, cnf={}, **kw)
 |      Configure row INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the row),
 |      weight (how much does additional space propagate to this row)
 |      and pad (how much space to let additionally).
 |
 |  grid_size(self)
 |      Return a tuple of the number of column and rows in the grid.
 |
 |  grid_slaves(self, row=None, column=None)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  image_names(self)
 |      Return a list of all existing image names.
 |
 |  image_types(self)
 |      Return a list of all available image types (e.g. photo bitmap).
 |
 |  info_patchlevel(self)
 |      Returns the exact version of the Tcl library.
 |
 |  keys(self)
 |      Return a list of all resource names of this widget.
 |
 |  lift = tkraise(self, aboveThis=None)
 |
 |  lower(self, belowThis=None)
 |      Lower this widget in the stacking order.
 |
 |  mainloop(self, n=0)
 |      Call the mainloop of Tk.
 |
 |  nametowidget(self, name)
 |      Return the Tkinter instance of a widget identified by
 |      its Tcl name NAME.
 |
 |  option_add(self, pattern, value, priority=None)
 |      Set a VALUE (second parameter) for an option
 |      PATTERN (first parameter).
 |
 |      An optional third parameter gives the numeric priority
 |      (defaults to 80).
 |
 |  option_clear(self)
 |      Clear the option database.
 |
 |      It will be reloaded if option_add is called.
 |
 |  option_get(self, name, className)
 |      Return the value for an option NAME for this widget
 |      with CLASSNAME.
 |
 |      Values with higher priority override lower values.
 |
 |  option_readfile(self, fileName, priority=None)
 |      Read file FILENAME into the option database.
 |
 |      An optional second parameter gives the numeric
 |      priority.
 |
 |  pack_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given the current setting will be returned.
 |
 |  pack_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  place_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  propagate = pack_propagate(self, flag=['_noarg_'])
 |
 |  quit(self)
 |      Quit the Tcl interpreter. All widgets will be destroyed.
 |
 |  register = _register(self, func, subst=None, needcleanup=1)
 |
 |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
 |
 |  selection_clear(self, **kw)
 |      Clear the current X selection.
 |
 |  selection_get(self, **kw)
 |      Return the contents of the current X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection and defaults to PRIMARY.  A keyword
 |      parameter displayof specifies a widget on the display
 |      to use. A keyword parameter type specifies the form of data to be
 |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
 |      before STRING.
 |
 |  selection_handle(self, command, **kw)
 |      Specify a function COMMAND to call if the X
 |      selection owned by this widget is queried by another
 |      application.
 |
 |      This function must return the contents of the
 |      selection. The function will be called with the
 |      arguments OFFSET and LENGTH which allows the chunking
 |      of very long selections. The following keyword
 |      parameters can be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  selection_own(self, **kw)
 |      Become owner of X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection (default PRIMARY).
 |
 |  selection_own_get(self, **kw)
 |      Return owner of X selection.
 |
 |      The following keyword parameter can
 |      be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  send(self, interp, cmd, *args)
 |      Send Tcl command CMD to different interpreter INTERP to be executed.
 |
 |  setvar(self, name='PY_VAR', value='1')
 |      Set Tcl variable NAME to VALUE.
 |
 |  size = grid_size(self)
 |
 |  slaves = pack_slaves(self)
 |
 |  tk_bisque(self)
 |      Change the color scheme to light brown as used in Tk 3.6 and before.
 |
 |  tk_focusFollowsMouse(self)
 |      The widget under mouse will get automatically focus. Can not
 |      be disabled easily.
 |
 |  tk_focusNext(self)
 |      Return the next widget in the focus order which follows
 |      widget which has currently the focus.
 |
 |      The focus order first goes to the next child, then to
 |      the children of the child recursively and then to the
 |      next sibling which is higher in the stacking order.  A
 |      widget is omitted if it has the takefocus resource set
 |      to 0.
 |
 |  tk_focusPrev(self)
 |      Return previous widget in the focus order. See tk_focusNext for details.
 |
 |  tk_setPalette(self, *args, **kw)
 |      Set a new color scheme for all widget elements.
 |
 |      A single color as argument will cause that all colors of Tk
 |      widget elements are derived from this.
 |      Alternatively several keyword parameters and its associated
 |      colors can be given. The following keywords are valid:
 |      activeBackground, foreground, selectColor,
 |      activeForeground, highlightBackground, selectBackground,
 |      background, highlightColor, selectForeground,
 |      disabledForeground, insertBackground, troughColor.
 |
 |  tk_strictMotif(self, boolean=None)
 |      Set Tcl internal variable, whether the look and feel
 |      should adhere to Motif.
 |
 |      A parameter of 1 means adhere to Motif (e.g. no color
 |      change if mouse passes over slider).
 |      Returns the set value.
 |
 |  tkraise(self, aboveThis=None)
 |      Raise this widget in the stacking order.
 |
 |  unbind(self, sequence, funcid=None)
 |      Unbind for this widget the event SEQUENCE.
 |
 |      If FUNCID is given, only unbind the function identified with FUNCID
 |      and also delete the corresponding Tcl command.
 |
 |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
 |      unbound.
 |
 |  unbind_all(self, sequence)
 |      Unbind for all widgets for event SEQUENCE all functions.
 |
 |  unbind_class(self, className, sequence)
 |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
 |      all functions.
 |
 |  update(self)
 |      Enter event loop until all pending events have been processed by Tcl.
 |
 |  update_idletasks(self)
 |      Enter event loop until all idle callbacks have been called. This
 |      will update the display of windows but not process events caused by
 |      the user.
 |
 |  wait_variable(self, name='PY_VAR')
 |      Wait until the variable is modified.
 |
 |      A parameter of type IntVar, StringVar, DoubleVar or
 |      BooleanVar must be given.
 |
 |  wait_visibility(self, window=None)
 |      Wait until the visibility of a WIDGET changes
 |      (e.g. it appears).
 |
 |      If no parameter is given self is used.
 |
 |  wait_window(self, window=None)
 |      Wait until a WIDGET is destroyed.
 |
 |      If no parameter is given self is used.
 |
 |  waitvar = wait_variable(self, name='PY_VAR')
 |
 |  winfo_atom(self, name, displayof=0)
 |      Return integer which represents atom NAME.
 |
 |  winfo_atomname(self, id, displayof=0)
 |      Return name of atom with identifier ID.
 |
 |  winfo_cells(self)
 |      Return number of cells in the colormap for this widget.
 |
 |  winfo_children(self)
 |      Return a list of all widgets which are children of this widget.
 |
 |  winfo_class(self)
 |      Return window class name of this widget.
 |
 |  winfo_colormapfull(self)
 |      Return True if at the last color request the colormap was full.
 |
 |  winfo_containing(self, rootX, rootY, displayof=0)
 |      Return the widget which is at the root coordinates ROOTX, ROOTY.
 |
 |  winfo_depth(self)
 |      Return the number of bits per pixel.
 |
 |  winfo_exists(self)
 |      Return true if this widget exists.
 |
 |  winfo_fpixels(self, number)
 |      Return the number of pixels for the given distance NUMBER
 |      (e.g. "3c") as float.
 |
 |  winfo_geometry(self)
 |      Return geometry string for this widget in the form "widthxheight+X+Y".
 |
 |  winfo_height(self)
 |      Return height of this widget.
 |
 |  winfo_id(self)
 |      Return identifier ID for this widget.
 |
 |  winfo_interps(self, displayof=0)
 |      Return the name of all Tcl interpreters for this display.
 |
 |  winfo_ismapped(self)
 |      Return true if this widget is mapped.
 |
 |  winfo_manager(self)
 |      Return the window manager name for this widget.
 |
 |  winfo_name(self)
 |      Return the name of this widget.
 |
 |  winfo_parent(self)
 |      Return the name of the parent of this widget.
 |
 |  winfo_pathname(self, id, displayof=0)
 |      Return the pathname of the widget given by ID.
 |
 |  winfo_pixels(self, number)
 |      Rounded integer value of winfo_fpixels.
 |
 |  winfo_pointerx(self)
 |      Return the x coordinate of the pointer on the root window.
 |
 |  winfo_pointerxy(self)
 |      Return a tuple of x and y coordinates of the pointer on the root window.
 |
 |  winfo_pointery(self)
 |      Return the y coordinate of the pointer on the root window.
 |
 |  winfo_reqheight(self)
 |      Return requested height of this widget.
 |
 |  winfo_reqwidth(self)
 |      Return requested width of this widget.
 |
 |  winfo_rgb(self, color)
 |      Return a tuple of integer RGB values in range(65536) for color in this widget.
 |
 |  winfo_rootx(self)
 |      Return x coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_rooty(self)
 |      Return y coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_screen(self)
 |      Return the screen name of this widget.
 |
 |  winfo_screencells(self)
 |      Return the number of the cells in the colormap of the screen
 |      of this widget.
 |
 |  winfo_screendepth(self)
 |      Return the number of bits per pixel of the root window of the
 |      screen of this widget.
 |
 |  winfo_screenheight(self)
 |      Return the number of pixels of the height of the screen of this widget
 |      in pixel.
 |
 |  winfo_screenmmheight(self)
 |      Return the number of pixels of the height of the screen of
 |      this widget in mm.
 |
 |  winfo_screenmmwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in mm.
 |
 |  winfo_screenvisual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the default
 |      colormodel of this screen.
 |
 |  winfo_screenwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in pixel.
 |
 |  winfo_server(self)
 |      Return information of the X-Server of the screen of this widget in
 |      the form "XmajorRminor vendor vendorVersion".
 |
 |  winfo_toplevel(self)
 |      Return the toplevel widget of this widget.
 |
 |  winfo_viewable(self)
 |      Return true if the widget and all its higher ancestors are mapped.
 |
 |  winfo_visual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the
 |      colormodel of this widget.
 |
 |  winfo_visualid(self)
 |      Return the X identifier for the visual for this widget.
 |
 |  winfo_visualsavailable(self, includeids=False)
 |      Return a list of all visuals available for the screen
 |      of this widget.
 |
 |      Each item in the list consists of a visual name (see winfo_visual), a
 |      depth and if includeids is true is given also the X identifier.
 |
 |  winfo_vrootheight(self)
 |      Return the height of the virtual root window associated with this
 |      widget in pixels. If there is no virtual root window return the
 |      height of the screen.
 |
 |  winfo_vrootwidth(self)
 |      Return the width of the virtual root window associated with this
 |      widget in pixel. If there is no virtual root window return the
 |      width of the screen.
 |
 |  winfo_vrootx(self)
 |      Return the x offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_vrooty(self)
 |      Return the y offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_width(self)
 |      Return the width of this widget.
 |
 |  winfo_x(self)
 |      Return the x coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  winfo_y(self)
 |      Return the y coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from tkinter.Misc:
 |
 |  __dict__
 |      dictionary for instance variables
 |
 |  __weakref__
 |      list of weak references to the object
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Pack:
 |
 |  forget = pack_forget(self)
 |
 |  info = pack_info(self)
 |
 |  pack = pack_configure(self, cnf={}, **kw)
 |
 |  pack_configure(self, cnf={}, **kw)
 |      Pack a widget in the parent widget. Use as options:
 |      after=widget - pack it after you have packed widget
 |      anchor=NSEW (or subset) - position widget according to
 |                                given direction
 |      before=widget - pack it before you will pack widget
 |      expand=bool - expand widget if parent size grows
 |      fill=NONE or X or Y or BOTH - fill widget if widget grows
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
 |
 |  pack_forget(self)
 |      Unmap this widget and do not use it for the packing order.
 |
 |  pack_info(self)
 |      Return information about the packing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Place:
 |
 |  place = place_configure(self, cnf={}, **kw)
 |
 |  place_configure(self, cnf={}, **kw)
 |      Place a widget in the parent widget. Use as options:
 |      in=master - master relative to which the widget is placed
 |      in_=master - see 'in' option description
 |      x=amount - locate anchor of this widget at position x of master
 |      y=amount - locate anchor of this widget at position y of master
 |      relx=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to width of master (1.0 is right edge)
 |      rely=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to height of master (1.0 is bottom edge)
 |      anchor=NSEW (or subset) - position anchor according to given direction
 |      width=amount - width of this widget in pixel
 |      height=amount - height of this widget in pixel
 |      relwidth=amount - width of this widget between 0.0 and 1.0
 |                        relative to width of master (1.0 is the same width
 |                        as the master)
 |      relheight=amount - height of this widget between 0.0 and 1.0
 |                         relative to height of master (1.0 is the same
 |                         height as the master)
 |      bordermode="inside" or "outside" - whether to take border width of
 |                                         master widget into account
 |
 |  place_forget(self)
 |      Unmap this widget.
 |
 |  place_info(self)
 |      Return information about the placing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Grid:
 |
 |  grid = grid_configure(self, cnf={}, **kw)
 |
 |  grid_configure(self, cnf={}, **kw)
 |      Position a widget in the parent widget in a grid. Use as options:
 |      column=number - use cell identified with given column (starting with 0)
 |      columnspan=number - this widget will span several columns
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      row=number - use cell identified with given row (starting with 0)
 |      rowspan=number - this widget will span several rows
 |      sticky=NSEW - if cell is larger on which sides will this
 |                    widget stick to the cell boundary
 |
 |  grid_forget(self)
 |      Unmap this widget.
 |
 |  grid_info(self)
 |      Return information about the options
 |      for positioning this widget in a grid.
 |
 |  grid_remove(self)
 |      Unmap this widget but remember the grid options.
 |
 |  location = grid_location(self, x, y)

None
Help on class Sizegrip in module tkinter.ttk:

class Sizegrip(Widget)
 |  Sizegrip(master=None, **kw)
 |
 |  Ttk Sizegrip allows the user to resize the containing toplevel
 |  window by pressing and dragging the grip.
 |
 |  Method resolution order:
 |      Sizegrip
 |      Widget
 |      tkinter.Widget
 |      tkinter.BaseWidget
 |      tkinter.Misc
 |      tkinter.Pack
 |      tkinter.Place
 |      tkinter.Grid
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  __init__(self, master=None, **kw)
 |      Construct a Ttk Sizegrip with parent master.
 |
 |      STANDARD OPTIONS
 |
 |          class, cursor, state, style, takefocus
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from Widget:
 |
 |  identify(self, x, y)
 |      Returns the name of the element at position x, y, or the empty
 |      string if the point does not lie within any element.
 |
 |      x and y are pixel coordinates relative to the widget.
 |
 |  instate(self, statespec, callback=None, *args, **kw)
 |      Test the widget's state.
 |
 |      If callback is not specified, returns True if the widget state
 |      matches statespec and False otherwise. If callback is specified,
 |      then it will be invoked with *args, **kw if the widget state
 |      matches statespec. statespec is expected to be a sequence.
 |
 |  state(self, statespec=None)
 |      Modify or inquire widget state.
 |
 |      Widget state is returned if statespec is None, otherwise it is
 |      set according to the statespec flags and then a new state spec
 |      is returned indicating which flags were changed. statespec is
 |      expected to be a sequence.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.BaseWidget:
 |
 |  destroy(self)
 |      Destroy this and all descendants widgets.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Misc:
 |
 |  __getitem__ = cget(self, key)
 |
 |  __repr__(self)
 |      Return repr(self).
 |
 |  __setitem__(self, key, value)
 |
 |  __str__(self)
 |      Return the window path name of this widget.
 |
 |  after(self, ms, func=None, *args)
 |      Call function once after given time.
 |
 |      MS specifies the time in milliseconds. FUNC gives the
 |      function which shall be called. Additional parameters
 |      are given as parameters to the function call.  Return
 |      identifier to cancel scheduling with after_cancel.
 |
 |  after_cancel(self, id)
 |      Cancel scheduling of function identified with ID.
 |
 |      Identifier returned by after or after_idle must be
 |      given as first parameter.
 |
 |  after_idle(self, func, *args)
 |      Call FUNC once if the Tcl main loop has no event to
 |      process.
 |
 |      Return an identifier to cancel the scheduling with
 |      after_cancel.
 |
 |  anchor = grid_anchor(self, anchor=None)
 |
 |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |
 |  bell(self, displayof=0)
 |      Ring a display's bell.
 |
 |  bind(self, sequence=None, func=None, add=None)
 |      Bind to this widget at event SEQUENCE a call to function FUNC.
 |
 |      SEQUENCE is a string of concatenated event
 |      patterns. An event pattern is of the form
 |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
 |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
 |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
 |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
 |      Mod1, M1. TYPE is one of Activate, Enter, Map,
 |      ButtonPress, Button, Expose, Motion, ButtonRelease
 |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
 |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
 |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
 |      Leave and DETAIL is the button number for ButtonPress,
 |      ButtonRelease and DETAIL is the Keysym for KeyPress and
 |      KeyRelease. Examples are
 |      <Control-Button-1> for pressing Control and mouse button 1 or
 |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
 |      An event pattern can also be a virtual event of the form
 |      <<AString>> where AString can be arbitrary. This
 |      event can be generated by event_generate.
 |      If events are concatenated they must appear shortly
 |      after each other.
 |
 |      FUNC will be called if the event sequence occurs with an
 |      instance of Event as argument. If the return value of FUNC is
 |      "break" no further bound function is invoked.
 |
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function.
 |
 |      Bind will return an identifier to allow deletion of the bound function with
 |      unbind without memory leak.
 |
 |      If FUNC or SEQUENCE is omitted the bound function or list
 |      of bound events are returned.
 |
 |  bind_all(self, sequence=None, func=None, add=None)
 |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function. See bind for the return value.
 |
 |  bind_class(self, className, sequence=None, func=None, add=None)
 |      Bind to widgets with bindtag CLASSNAME at event
 |      SEQUENCE a call of function FUNC. An additional
 |      boolean parameter ADD specifies whether FUNC will be
 |      called additionally to the other bound function or
 |      whether it will replace the previous function. See bind for
 |      the return value.
 |
 |  bindtags(self, tagList=None)
 |      Set or get the list of bindtags for this widget.
 |
 |      With no argument return the list of all bindtags associated with
 |      this widget. With a list of strings as argument the bindtags are
 |      set to this list. The bindtags determine in which order events are
 |      processed (see bind).
 |
 |  cget(self, key)
 |      Return the resource value for a KEY given as string.
 |
 |  clipboard_append(self, string, **kw)
 |      Append STRING to the Tk clipboard.
 |
 |      A widget specified at the optional displayof keyword
 |      argument specifies the target display. The clipboard
 |      can be retrieved with selection_get.
 |
 |  clipboard_clear(self, **kw)
 |      Clear the data in the Tk clipboard.
 |
 |      A widget specified for the optional displayof keyword
 |      argument specifies the target display.
 |
 |  clipboard_get(self, **kw)
 |      Retrieve data from the clipboard on window's display.
 |
 |      The window keyword defaults to the root window of the Tkinter
 |      application.
 |
 |      The type keyword specifies the form in which the data is
 |      to be returned and should be an atom name such as STRING
 |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
 |      is to try UTF8_STRING and fall back to STRING.
 |
 |      This command is equivalent to:
 |
 |      selection_get(CLIPBOARD)
 |
 |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
 |
 |  config = configure(self, cnf=None, **kw)
 |
 |  configure(self, cnf=None, **kw)
 |      Configure resources of a widget.
 |
 |      The values for resources are specified as keyword
 |      arguments. To get an overview about
 |      the allowed keyword arguments call the method keys.
 |
 |  deletecommand(self, name)
 |      Internal function.
 |
 |      Delete the Tcl command provided in NAME.
 |
 |  event_add(self, virtual, *sequences)
 |      Bind a virtual event VIRTUAL (of the form <<Name>>)
 |      to an event SEQUENCE such that the virtual event is triggered
 |      whenever SEQUENCE occurs.
 |
 |  event_delete(self, virtual, *sequences)
 |      Unbind a virtual event VIRTUAL from SEQUENCE.
 |
 |  event_generate(self, sequence, **kw)
 |      Generate an event SEQUENCE. Additional
 |      keyword arguments specify parameter of the event
 |      (e.g. x, y, rootx, rooty).
 |
 |  event_info(self, virtual=None)
 |      Return a list of all virtual events or the information
 |      about the SEQUENCE bound to the virtual event VIRTUAL.
 |
 |  focus = focus_set(self)
 |
 |  focus_displayof(self)
 |      Return the widget which has currently the focus on the
 |      display where this widget is located.
 |
 |      Return None if the application does not have the focus.
 |
 |  focus_force(self)
 |      Direct input focus to this widget even if the
 |      application does not have the focus. Use with
 |      caution!
 |
 |  focus_get(self)
 |      Return the widget which has currently the focus in the
 |      application.
 |
 |      Use focus_displayof to allow working with several
 |      displays. Return None if application does not have
 |      the focus.
 |
 |  focus_lastfor(self)
 |      Return the widget which would have the focus if top level
 |      for this widget gets the focus from the window manager.
 |
 |  focus_set(self)
 |      Direct input focus to this widget.
 |
 |      If the application currently does not have the focus
 |      this widget will get the focus if the application gets
 |      the focus through the window manager.
 |
 |  getboolean(self, s)
 |      Return a boolean value for Tcl boolean values true and false given as parameter.
 |
 |  getdouble(self, s)
 |
 |  getint(self, s)
 |
 |  getvar(self, name='PY_VAR')
 |      Return value of Tcl variable NAME.
 |
 |  grab_current(self)
 |      Return widget which has currently the grab in this application
 |      or None.
 |
 |  grab_release(self)
 |      Release grab for this widget if currently set.
 |
 |  grab_set(self)
 |      Set grab for this widget.
 |
 |      A grab directs all events to this and descendant
 |      widgets in the application.
 |
 |  grab_set_global(self)
 |      Set global grab for this widget.
 |
 |      A global grab directs all events to this and
 |      descendant widgets on the display. Use with caution -
 |      other applications do not get events anymore.
 |
 |  grab_status(self)
 |      Return None, "local" or "global" if this widget has
 |      no, a local or a global grab.
 |
 |  grid_anchor(self, anchor=None)
 |      The anchor value controls how to place the grid within the
 |      master when no row/column has any weight.
 |
 |      The default anchor is nw.
 |
 |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |      Return a tuple of integer coordinates for the bounding
 |      box of this widget controlled by the geometry manager grid.
 |
 |      If COLUMN, ROW is given the bounding box applies from
 |      the cell with row and column 0 to the specified
 |      cell. If COL2 and ROW2 are given the bounding box
 |      starts at that cell.
 |
 |      The returned integers specify the offset of the upper left
 |      corner in the master widget and the width and height.
 |
 |  grid_columnconfigure(self, index, cnf={}, **kw)
 |      Configure column INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the column),
 |      weight (how much does additional space propagate to this column)
 |      and pad (how much space to let additionally).
 |
 |  grid_location(self, x, y)
 |      Return a tuple of column and row which identify the cell
 |      at which the pixel at position X and Y inside the master
 |      widget is located.
 |
 |  grid_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given, the current setting will be returned.
 |
 |  grid_rowconfigure(self, index, cnf={}, **kw)
 |      Configure row INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the row),
 |      weight (how much does additional space propagate to this row)
 |      and pad (how much space to let additionally).
 |
 |  grid_size(self)
 |      Return a tuple of the number of column and rows in the grid.
 |
 |  grid_slaves(self, row=None, column=None)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  image_names(self)
 |      Return a list of all existing image names.
 |
 |  image_types(self)
 |      Return a list of all available image types (e.g. photo bitmap).
 |
 |  info_patchlevel(self)
 |      Returns the exact version of the Tcl library.
 |
 |  keys(self)
 |      Return a list of all resource names of this widget.
 |
 |  lift = tkraise(self, aboveThis=None)
 |
 |  lower(self, belowThis=None)
 |      Lower this widget in the stacking order.
 |
 |  mainloop(self, n=0)
 |      Call the mainloop of Tk.
 |
 |  nametowidget(self, name)
 |      Return the Tkinter instance of a widget identified by
 |      its Tcl name NAME.
 |
 |  option_add(self, pattern, value, priority=None)
 |      Set a VALUE (second parameter) for an option
 |      PATTERN (first parameter).
 |
 |      An optional third parameter gives the numeric priority
 |      (defaults to 80).
 |
 |  option_clear(self)
 |      Clear the option database.
 |
 |      It will be reloaded if option_add is called.
 |
 |  option_get(self, name, className)
 |      Return the value for an option NAME for this widget
 |      with CLASSNAME.
 |
 |      Values with higher priority override lower values.
 |
 |  option_readfile(self, fileName, priority=None)
 |      Read file FILENAME into the option database.
 |
 |      An optional second parameter gives the numeric
 |      priority.
 |
 |  pack_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given the current setting will be returned.
 |
 |  pack_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  place_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  propagate = pack_propagate(self, flag=['_noarg_'])
 |
 |  quit(self)
 |      Quit the Tcl interpreter. All widgets will be destroyed.
 |
 |  register = _register(self, func, subst=None, needcleanup=1)
 |
 |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
 |
 |  selection_clear(self, **kw)
 |      Clear the current X selection.
 |
 |  selection_get(self, **kw)
 |      Return the contents of the current X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection and defaults to PRIMARY.  A keyword
 |      parameter displayof specifies a widget on the display
 |      to use. A keyword parameter type specifies the form of data to be
 |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
 |      before STRING.
 |
 |  selection_handle(self, command, **kw)
 |      Specify a function COMMAND to call if the X
 |      selection owned by this widget is queried by another
 |      application.
 |
 |      This function must return the contents of the
 |      selection. The function will be called with the
 |      arguments OFFSET and LENGTH which allows the chunking
 |      of very long selections. The following keyword
 |      parameters can be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  selection_own(self, **kw)
 |      Become owner of X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection (default PRIMARY).
 |
 |  selection_own_get(self, **kw)
 |      Return owner of X selection.
 |
 |      The following keyword parameter can
 |      be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  send(self, interp, cmd, *args)
 |      Send Tcl command CMD to different interpreter INTERP to be executed.
 |
 |  setvar(self, name='PY_VAR', value='1')
 |      Set Tcl variable NAME to VALUE.
 |
 |  size = grid_size(self)
 |
 |  slaves = pack_slaves(self)
 |
 |  tk_bisque(self)
 |      Change the color scheme to light brown as used in Tk 3.6 and before.
 |
 |  tk_focusFollowsMouse(self)
 |      The widget under mouse will get automatically focus. Can not
 |      be disabled easily.
 |
 |  tk_focusNext(self)
 |      Return the next widget in the focus order which follows
 |      widget which has currently the focus.
 |
 |      The focus order first goes to the next child, then to
 |      the children of the child recursively and then to the
 |      next sibling which is higher in the stacking order.  A
 |      widget is omitted if it has the takefocus resource set
 |      to 0.
 |
 |  tk_focusPrev(self)
 |      Return previous widget in the focus order. See tk_focusNext for details.
 |
 |  tk_setPalette(self, *args, **kw)
 |      Set a new color scheme for all widget elements.
 |
 |      A single color as argument will cause that all colors of Tk
 |      widget elements are derived from this.
 |      Alternatively several keyword parameters and its associated
 |      colors can be given. The following keywords are valid:
 |      activeBackground, foreground, selectColor,
 |      activeForeground, highlightBackground, selectBackground,
 |      background, highlightColor, selectForeground,
 |      disabledForeground, insertBackground, troughColor.
 |
 |  tk_strictMotif(self, boolean=None)
 |      Set Tcl internal variable, whether the look and feel
 |      should adhere to Motif.
 |
 |      A parameter of 1 means adhere to Motif (e.g. no color
 |      change if mouse passes over slider).
 |      Returns the set value.
 |
 |  tkraise(self, aboveThis=None)
 |      Raise this widget in the stacking order.
 |
 |  unbind(self, sequence, funcid=None)
 |      Unbind for this widget the event SEQUENCE.
 |
 |      If FUNCID is given, only unbind the function identified with FUNCID
 |      and also delete the corresponding Tcl command.
 |
 |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
 |      unbound.
 |
 |  unbind_all(self, sequence)
 |      Unbind for all widgets for event SEQUENCE all functions.
 |
 |  unbind_class(self, className, sequence)
 |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
 |      all functions.
 |
 |  update(self)
 |      Enter event loop until all pending events have been processed by Tcl.
 |
 |  update_idletasks(self)
 |      Enter event loop until all idle callbacks have been called. This
 |      will update the display of windows but not process events caused by
 |      the user.
 |
 |  wait_variable(self, name='PY_VAR')
 |      Wait until the variable is modified.
 |
 |      A parameter of type IntVar, StringVar, DoubleVar or
 |      BooleanVar must be given.
 |
 |  wait_visibility(self, window=None)
 |      Wait until the visibility of a WIDGET changes
 |      (e.g. it appears).
 |
 |      If no parameter is given self is used.
 |
 |  wait_window(self, window=None)
 |      Wait until a WIDGET is destroyed.
 |
 |      If no parameter is given self is used.
 |
 |  waitvar = wait_variable(self, name='PY_VAR')
 |
 |  winfo_atom(self, name, displayof=0)
 |      Return integer which represents atom NAME.
 |
 |  winfo_atomname(self, id, displayof=0)
 |      Return name of atom with identifier ID.
 |
 |  winfo_cells(self)
 |      Return number of cells in the colormap for this widget.
 |
 |  winfo_children(self)
 |      Return a list of all widgets which are children of this widget.
 |
 |  winfo_class(self)
 |      Return window class name of this widget.
 |
 |  winfo_colormapfull(self)
 |      Return True if at the last color request the colormap was full.
 |
 |  winfo_containing(self, rootX, rootY, displayof=0)
 |      Return the widget which is at the root coordinates ROOTX, ROOTY.
 |
 |  winfo_depth(self)
 |      Return the number of bits per pixel.
 |
 |  winfo_exists(self)
 |      Return true if this widget exists.
 |
 |  winfo_fpixels(self, number)
 |      Return the number of pixels for the given distance NUMBER
 |      (e.g. "3c") as float.
 |
 |  winfo_geometry(self)
 |      Return geometry string for this widget in the form "widthxheight+X+Y".
 |
 |  winfo_height(self)
 |      Return height of this widget.
 |
 |  winfo_id(self)
 |      Return identifier ID for this widget.
 |
 |  winfo_interps(self, displayof=0)
 |      Return the name of all Tcl interpreters for this display.
 |
 |  winfo_ismapped(self)
 |      Return true if this widget is mapped.
 |
 |  winfo_manager(self)
 |      Return the window manager name for this widget.
 |
 |  winfo_name(self)
 |      Return the name of this widget.
 |
 |  winfo_parent(self)
 |      Return the name of the parent of this widget.
 |
 |  winfo_pathname(self, id, displayof=0)
 |      Return the pathname of the widget given by ID.
 |
 |  winfo_pixels(self, number)
 |      Rounded integer value of winfo_fpixels.
 |
 |  winfo_pointerx(self)
 |      Return the x coordinate of the pointer on the root window.
 |
 |  winfo_pointerxy(self)
 |      Return a tuple of x and y coordinates of the pointer on the root window.
 |
 |  winfo_pointery(self)
 |      Return the y coordinate of the pointer on the root window.
 |
 |  winfo_reqheight(self)
 |      Return requested height of this widget.
 |
 |  winfo_reqwidth(self)
 |      Return requested width of this widget.
 |
 |  winfo_rgb(self, color)
 |      Return a tuple of integer RGB values in range(65536) for color in this widget.
 |
 |  winfo_rootx(self)
 |      Return x coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_rooty(self)
 |      Return y coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_screen(self)
 |      Return the screen name of this widget.
 |
 |  winfo_screencells(self)
 |      Return the number of the cells in the colormap of the screen
 |      of this widget.
 |
 |  winfo_screendepth(self)
 |      Return the number of bits per pixel of the root window of the
 |      screen of this widget.
 |
 |  winfo_screenheight(self)
 |      Return the number of pixels of the height of the screen of this widget
 |      in pixel.
 |
 |  winfo_screenmmheight(self)
 |      Return the number of pixels of the height of the screen of
 |      this widget in mm.
 |
 |  winfo_screenmmwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in mm.
 |
 |  winfo_screenvisual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the default
 |      colormodel of this screen.
 |
 |  winfo_screenwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in pixel.
 |
 |  winfo_server(self)
 |      Return information of the X-Server of the screen of this widget in
 |      the form "XmajorRminor vendor vendorVersion".
 |
 |  winfo_toplevel(self)
 |      Return the toplevel widget of this widget.
 |
 |  winfo_viewable(self)
 |      Return true if the widget and all its higher ancestors are mapped.
 |
 |  winfo_visual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the
 |      colormodel of this widget.
 |
 |  winfo_visualid(self)
 |      Return the X identifier for the visual for this widget.
 |
 |  winfo_visualsavailable(self, includeids=False)
 |      Return a list of all visuals available for the screen
 |      of this widget.
 |
 |      Each item in the list consists of a visual name (see winfo_visual), a
 |      depth and if includeids is true is given also the X identifier.
 |
 |  winfo_vrootheight(self)
 |      Return the height of the virtual root window associated with this
 |      widget in pixels. If there is no virtual root window return the
 |      height of the screen.
 |
 |  winfo_vrootwidth(self)
 |      Return the width of the virtual root window associated with this
 |      widget in pixel. If there is no virtual root window return the
 |      width of the screen.
 |
 |  winfo_vrootx(self)
 |      Return the x offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_vrooty(self)
 |      Return the y offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_width(self)
 |      Return the width of this widget.
 |
 |  winfo_x(self)
 |      Return the x coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  winfo_y(self)
 |      Return the y coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from tkinter.Misc:
 |
 |  __dict__
 |      dictionary for instance variables
 |
 |  __weakref__
 |      list of weak references to the object
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Pack:
 |
 |  forget = pack_forget(self)
 |
 |  info = pack_info(self)
 |
 |  pack = pack_configure(self, cnf={}, **kw)
 |
 |  pack_configure(self, cnf={}, **kw)
 |      Pack a widget in the parent widget. Use as options:
 |      after=widget - pack it after you have packed widget
 |      anchor=NSEW (or subset) - position widget according to
 |                                given direction
 |      before=widget - pack it before you will pack widget
 |      expand=bool - expand widget if parent size grows
 |      fill=NONE or X or Y or BOTH - fill widget if widget grows
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
 |
 |  pack_forget(self)
 |      Unmap this widget and do not use it for the packing order.
 |
 |  pack_info(self)
 |      Return information about the packing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Place:
 |
 |  place = place_configure(self, cnf={}, **kw)
 |
 |  place_configure(self, cnf={}, **kw)
 |      Place a widget in the parent widget. Use as options:
 |      in=master - master relative to which the widget is placed
 |      in_=master - see 'in' option description
 |      x=amount - locate anchor of this widget at position x of master
 |      y=amount - locate anchor of this widget at position y of master
 |      relx=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to width of master (1.0 is right edge)
 |      rely=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to height of master (1.0 is bottom edge)
 |      anchor=NSEW (or subset) - position anchor according to given direction
 |      width=amount - width of this widget in pixel
 |      height=amount - height of this widget in pixel
 |      relwidth=amount - width of this widget between 0.0 and 1.0
 |                        relative to width of master (1.0 is the same width
 |                        as the master)
 |      relheight=amount - height of this widget between 0.0 and 1.0
 |                         relative to height of master (1.0 is the same
 |                         height as the master)
 |      bordermode="inside" or "outside" - whether to take border width of
 |                                         master widget into account
 |
 |  place_forget(self)
 |      Unmap this widget.
 |
 |  place_info(self)
 |      Return information about the placing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Grid:
 |
 |  grid = grid_configure(self, cnf={}, **kw)
 |
 |  grid_configure(self, cnf={}, **kw)
 |      Position a widget in the parent widget in a grid. Use as options:
 |      column=number - use cell identified with given column (starting with 0)
 |      columnspan=number - this widget will span several columns
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      row=number - use cell identified with given row (starting with 0)
 |      rowspan=number - this widget will span several rows
 |      sticky=NSEW - if cell is larger on which sides will this
 |                    widget stick to the cell boundary
 |
 |  grid_forget(self)
 |      Unmap this widget.
 |
 |  grid_info(self)
 |      Return information about the options
 |      for positioning this widget in a grid.
 |
 |  grid_remove(self)
 |      Unmap this widget but remember the grid options.
 |
 |  location = grid_location(self, x, y)

None
Help on class Spinbox in module tkinter.ttk:

class Spinbox(Entry)
 |  Spinbox(master=None, **kw)
 |
 |  Ttk Spinbox is an Entry with increment and decrement arrows
 |
 |  It is commonly used for number entry or to select from a list of
 |  string values.
 |
 |  Method resolution order:
 |      Spinbox
 |      Entry
 |      Widget
 |      tkinter.Entry
 |      tkinter.Widget
 |      tkinter.BaseWidget
 |      tkinter.Misc
 |      tkinter.Pack
 |      tkinter.Place
 |      tkinter.Grid
 |      tkinter.XView
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  __init__(self, master=None, **kw)
 |      Construct a Ttk Spinbox widget with the parent master.
 |
 |      STANDARD OPTIONS
 |
 |          class, cursor, style, takefocus, validate,
 |          validatecommand, xscrollcommand, invalidcommand
 |
 |      WIDGET-SPECIFIC OPTIONS
 |
 |          to, from_, increment, values, wrap, format, command
 |
 |  set(self, value)
 |      Sets the value of the Spinbox to value.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from Entry:
 |
 |  bbox(self, index)
 |      Return a tuple of (x, y, width, height) which describes the
 |      bounding box of the character given by index.
 |
 |  identify(self, x, y)
 |      Returns the name of the element at position x, y, or the
 |      empty string if the coordinates are outside the window.
 |
 |  validate(self)
 |      Force revalidation, independent of the conditions specified
 |      by the validate option. Returns False if validation fails, True
 |      if it succeeds. Sets or clears the invalid state accordingly.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from Widget:
 |
 |  instate(self, statespec, callback=None, *args, **kw)
 |      Test the widget's state.
 |
 |      If callback is not specified, returns True if the widget state
 |      matches statespec and False otherwise. If callback is specified,
 |      then it will be invoked with *args, **kw if the widget state
 |      matches statespec. statespec is expected to be a sequence.
 |
 |  state(self, statespec=None)
 |      Modify or inquire widget state.
 |
 |      Widget state is returned if statespec is None, otherwise it is
 |      set according to the statespec flags and then a new state spec
 |      is returned indicating which flags were changed. statespec is
 |      expected to be a sequence.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Entry:
 |
 |  delete(self, first, last=None)
 |      Delete text from FIRST to LAST (not included).
 |
 |  get(self)
 |      Return the text.
 |
 |  icursor(self, index)
 |      Insert cursor at INDEX.
 |
 |  index(self, index)
 |      Return position of cursor.
 |
 |  insert(self, index, string)
 |      Insert STRING at INDEX.
 |
 |  scan_dragto(self, x)
 |      Adjust the view of the canvas to 10 times the
 |      difference between X and Y and the coordinates given in
 |      scan_mark.
 |
 |  scan_mark(self, x)
 |      Remember the current X, Y coordinates.
 |
 |  select_adjust = selection_adjust(self, index)
 |
 |  select_clear = selection_clear(self)
 |
 |  select_from = selection_from(self, index)
 |
 |  select_present = selection_present(self)
 |
 |  select_range = selection_range(self, start, end)
 |
 |  select_to = selection_to(self, index)
 |
 |  selection_adjust(self, index)
 |      Adjust the end of the selection near the cursor to INDEX.
 |
 |  selection_clear(self)
 |      Clear the selection if it is in this widget.
 |
 |  selection_from(self, index)
 |      Set the fixed end of a selection to INDEX.
 |
 |  selection_present(self)
 |      Return True if there are characters selected in the entry, False
 |      otherwise.
 |
 |  selection_range(self, start, end)
 |      Set the selection from START to END (not included).
 |
 |  selection_to(self, index)
 |      Set the variable end of a selection to INDEX.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.BaseWidget:
 |
 |  destroy(self)
 |      Destroy this and all descendants widgets.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Misc:
 |
 |  __getitem__ = cget(self, key)
 |
 |  __repr__(self)
 |      Return repr(self).
 |
 |  __setitem__(self, key, value)
 |
 |  __str__(self)
 |      Return the window path name of this widget.
 |
 |  after(self, ms, func=None, *args)
 |      Call function once after given time.
 |
 |      MS specifies the time in milliseconds. FUNC gives the
 |      function which shall be called. Additional parameters
 |      are given as parameters to the function call.  Return
 |      identifier to cancel scheduling with after_cancel.
 |
 |  after_cancel(self, id)
 |      Cancel scheduling of function identified with ID.
 |
 |      Identifier returned by after or after_idle must be
 |      given as first parameter.
 |
 |  after_idle(self, func, *args)
 |      Call FUNC once if the Tcl main loop has no event to
 |      process.
 |
 |      Return an identifier to cancel the scheduling with
 |      after_cancel.
 |
 |  anchor = grid_anchor(self, anchor=None)
 |
 |  bell(self, displayof=0)
 |      Ring a display's bell.
 |
 |  bind(self, sequence=None, func=None, add=None)
 |      Bind to this widget at event SEQUENCE a call to function FUNC.
 |
 |      SEQUENCE is a string of concatenated event
 |      patterns. An event pattern is of the form
 |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
 |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
 |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
 |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
 |      Mod1, M1. TYPE is one of Activate, Enter, Map,
 |      ButtonPress, Button, Expose, Motion, ButtonRelease
 |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
 |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
 |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
 |      Leave and DETAIL is the button number for ButtonPress,
 |      ButtonRelease and DETAIL is the Keysym for KeyPress and
 |      KeyRelease. Examples are
 |      <Control-Button-1> for pressing Control and mouse button 1 or
 |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
 |      An event pattern can also be a virtual event of the form
 |      <<AString>> where AString can be arbitrary. This
 |      event can be generated by event_generate.
 |      If events are concatenated they must appear shortly
 |      after each other.
 |
 |      FUNC will be called if the event sequence occurs with an
 |      instance of Event as argument. If the return value of FUNC is
 |      "break" no further bound function is invoked.
 |
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function.
 |
 |      Bind will return an identifier to allow deletion of the bound function with
 |      unbind without memory leak.
 |
 |      If FUNC or SEQUENCE is omitted the bound function or list
 |      of bound events are returned.
 |
 |  bind_all(self, sequence=None, func=None, add=None)
 |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function. See bind for the return value.
 |
 |  bind_class(self, className, sequence=None, func=None, add=None)
 |      Bind to widgets with bindtag CLASSNAME at event
 |      SEQUENCE a call of function FUNC. An additional
 |      boolean parameter ADD specifies whether FUNC will be
 |      called additionally to the other bound function or
 |      whether it will replace the previous function. See bind for
 |      the return value.
 |
 |  bindtags(self, tagList=None)
 |      Set or get the list of bindtags for this widget.
 |
 |      With no argument return the list of all bindtags associated with
 |      this widget. With a list of strings as argument the bindtags are
 |      set to this list. The bindtags determine in which order events are
 |      processed (see bind).
 |
 |  cget(self, key)
 |      Return the resource value for a KEY given as string.
 |
 |  clipboard_append(self, string, **kw)
 |      Append STRING to the Tk clipboard.
 |
 |      A widget specified at the optional displayof keyword
 |      argument specifies the target display. The clipboard
 |      can be retrieved with selection_get.
 |
 |  clipboard_clear(self, **kw)
 |      Clear the data in the Tk clipboard.
 |
 |      A widget specified for the optional displayof keyword
 |      argument specifies the target display.
 |
 |  clipboard_get(self, **kw)
 |      Retrieve data from the clipboard on window's display.
 |
 |      The window keyword defaults to the root window of the Tkinter
 |      application.
 |
 |      The type keyword specifies the form in which the data is
 |      to be returned and should be an atom name such as STRING
 |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
 |      is to try UTF8_STRING and fall back to STRING.
 |
 |      This command is equivalent to:
 |
 |      selection_get(CLIPBOARD)
 |
 |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
 |
 |  config = configure(self, cnf=None, **kw)
 |
 |  configure(self, cnf=None, **kw)
 |      Configure resources of a widget.
 |
 |      The values for resources are specified as keyword
 |      arguments. To get an overview about
 |      the allowed keyword arguments call the method keys.
 |
 |  deletecommand(self, name)
 |      Internal function.
 |
 |      Delete the Tcl command provided in NAME.
 |
 |  event_add(self, virtual, *sequences)
 |      Bind a virtual event VIRTUAL (of the form <<Name>>)
 |      to an event SEQUENCE such that the virtual event is triggered
 |      whenever SEQUENCE occurs.
 |
 |  event_delete(self, virtual, *sequences)
 |      Unbind a virtual event VIRTUAL from SEQUENCE.
 |
 |  event_generate(self, sequence, **kw)
 |      Generate an event SEQUENCE. Additional
 |      keyword arguments specify parameter of the event
 |      (e.g. x, y, rootx, rooty).
 |
 |  event_info(self, virtual=None)
 |      Return a list of all virtual events or the information
 |      about the SEQUENCE bound to the virtual event VIRTUAL.
 |
 |  focus = focus_set(self)
 |
 |  focus_displayof(self)
 |      Return the widget which has currently the focus on the
 |      display where this widget is located.
 |
 |      Return None if the application does not have the focus.
 |
 |  focus_force(self)
 |      Direct input focus to this widget even if the
 |      application does not have the focus. Use with
 |      caution!
 |
 |  focus_get(self)
 |      Return the widget which has currently the focus in the
 |      application.
 |
 |      Use focus_displayof to allow working with several
 |      displays. Return None if application does not have
 |      the focus.
 |
 |  focus_lastfor(self)
 |      Return the widget which would have the focus if top level
 |      for this widget gets the focus from the window manager.
 |
 |  focus_set(self)
 |      Direct input focus to this widget.
 |
 |      If the application currently does not have the focus
 |      this widget will get the focus if the application gets
 |      the focus through the window manager.
 |
 |  getboolean(self, s)
 |      Return a boolean value for Tcl boolean values true and false given as parameter.
 |
 |  getdouble(self, s)
 |
 |  getint(self, s)
 |
 |  getvar(self, name='PY_VAR')
 |      Return value of Tcl variable NAME.
 |
 |  grab_current(self)
 |      Return widget which has currently the grab in this application
 |      or None.
 |
 |  grab_release(self)
 |      Release grab for this widget if currently set.
 |
 |  grab_set(self)
 |      Set grab for this widget.
 |
 |      A grab directs all events to this and descendant
 |      widgets in the application.
 |
 |  grab_set_global(self)
 |      Set global grab for this widget.
 |
 |      A global grab directs all events to this and
 |      descendant widgets on the display. Use with caution -
 |      other applications do not get events anymore.
 |
 |  grab_status(self)
 |      Return None, "local" or "global" if this widget has
 |      no, a local or a global grab.
 |
 |  grid_anchor(self, anchor=None)
 |      The anchor value controls how to place the grid within the
 |      master when no row/column has any weight.
 |
 |      The default anchor is nw.
 |
 |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |      Return a tuple of integer coordinates for the bounding
 |      box of this widget controlled by the geometry manager grid.
 |
 |      If COLUMN, ROW is given the bounding box applies from
 |      the cell with row and column 0 to the specified
 |      cell. If COL2 and ROW2 are given the bounding box
 |      starts at that cell.
 |
 |      The returned integers specify the offset of the upper left
 |      corner in the master widget and the width and height.
 |
 |  grid_columnconfigure(self, index, cnf={}, **kw)
 |      Configure column INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the column),
 |      weight (how much does additional space propagate to this column)
 |      and pad (how much space to let additionally).
 |
 |  grid_location(self, x, y)
 |      Return a tuple of column and row which identify the cell
 |      at which the pixel at position X and Y inside the master
 |      widget is located.
 |
 |  grid_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given, the current setting will be returned.
 |
 |  grid_rowconfigure(self, index, cnf={}, **kw)
 |      Configure row INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the row),
 |      weight (how much does additional space propagate to this row)
 |      and pad (how much space to let additionally).
 |
 |  grid_size(self)
 |      Return a tuple of the number of column and rows in the grid.
 |
 |  grid_slaves(self, row=None, column=None)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  image_names(self)
 |      Return a list of all existing image names.
 |
 |  image_types(self)
 |      Return a list of all available image types (e.g. photo bitmap).
 |
 |  info_patchlevel(self)
 |      Returns the exact version of the Tcl library.
 |
 |  keys(self)
 |      Return a list of all resource names of this widget.
 |
 |  lift = tkraise(self, aboveThis=None)
 |
 |  lower(self, belowThis=None)
 |      Lower this widget in the stacking order.
 |
 |  mainloop(self, n=0)
 |      Call the mainloop of Tk.
 |
 |  nametowidget(self, name)
 |      Return the Tkinter instance of a widget identified by
 |      its Tcl name NAME.
 |
 |  option_add(self, pattern, value, priority=None)
 |      Set a VALUE (second parameter) for an option
 |      PATTERN (first parameter).
 |
 |      An optional third parameter gives the numeric priority
 |      (defaults to 80).
 |
 |  option_clear(self)
 |      Clear the option database.
 |
 |      It will be reloaded if option_add is called.
 |
 |  option_get(self, name, className)
 |      Return the value for an option NAME for this widget
 |      with CLASSNAME.
 |
 |      Values with higher priority override lower values.
 |
 |  option_readfile(self, fileName, priority=None)
 |      Read file FILENAME into the option database.
 |
 |      An optional second parameter gives the numeric
 |      priority.
 |
 |  pack_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given the current setting will be returned.
 |
 |  pack_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  place_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  propagate = pack_propagate(self, flag=['_noarg_'])
 |
 |  quit(self)
 |      Quit the Tcl interpreter. All widgets will be destroyed.
 |
 |  register = _register(self, func, subst=None, needcleanup=1)
 |
 |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
 |
 |  selection_get(self, **kw)
 |      Return the contents of the current X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection and defaults to PRIMARY.  A keyword
 |      parameter displayof specifies a widget on the display
 |      to use. A keyword parameter type specifies the form of data to be
 |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
 |      before STRING.
 |
 |  selection_handle(self, command, **kw)
 |      Specify a function COMMAND to call if the X
 |      selection owned by this widget is queried by another
 |      application.
 |
 |      This function must return the contents of the
 |      selection. The function will be called with the
 |      arguments OFFSET and LENGTH which allows the chunking
 |      of very long selections. The following keyword
 |      parameters can be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  selection_own(self, **kw)
 |      Become owner of X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection (default PRIMARY).
 |
 |  selection_own_get(self, **kw)
 |      Return owner of X selection.
 |
 |      The following keyword parameter can
 |      be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  send(self, interp, cmd, *args)
 |      Send Tcl command CMD to different interpreter INTERP to be executed.
 |
 |  setvar(self, name='PY_VAR', value='1')
 |      Set Tcl variable NAME to VALUE.
 |
 |  size = grid_size(self)
 |
 |  slaves = pack_slaves(self)
 |
 |  tk_bisque(self)
 |      Change the color scheme to light brown as used in Tk 3.6 and before.
 |
 |  tk_focusFollowsMouse(self)
 |      The widget under mouse will get automatically focus. Can not
 |      be disabled easily.
 |
 |  tk_focusNext(self)
 |      Return the next widget in the focus order which follows
 |      widget which has currently the focus.
 |
 |      The focus order first goes to the next child, then to
 |      the children of the child recursively and then to the
 |      next sibling which is higher in the stacking order.  A
 |      widget is omitted if it has the takefocus resource set
 |      to 0.
 |
 |  tk_focusPrev(self)
 |      Return previous widget in the focus order. See tk_focusNext for details.
 |
 |  tk_setPalette(self, *args, **kw)
 |      Set a new color scheme for all widget elements.
 |
 |      A single color as argument will cause that all colors of Tk
 |      widget elements are derived from this.
 |      Alternatively several keyword parameters and its associated
 |      colors can be given. The following keywords are valid:
 |      activeBackground, foreground, selectColor,
 |      activeForeground, highlightBackground, selectBackground,
 |      background, highlightColor, selectForeground,
 |      disabledForeground, insertBackground, troughColor.
 |
 |  tk_strictMotif(self, boolean=None)
 |      Set Tcl internal variable, whether the look and feel
 |      should adhere to Motif.
 |
 |      A parameter of 1 means adhere to Motif (e.g. no color
 |      change if mouse passes over slider).
 |      Returns the set value.
 |
 |  tkraise(self, aboveThis=None)
 |      Raise this widget in the stacking order.
 |
 |  unbind(self, sequence, funcid=None)
 |      Unbind for this widget the event SEQUENCE.
 |
 |      If FUNCID is given, only unbind the function identified with FUNCID
 |      and also delete the corresponding Tcl command.
 |
 |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
 |      unbound.
 |
 |  unbind_all(self, sequence)
 |      Unbind for all widgets for event SEQUENCE all functions.
 |
 |  unbind_class(self, className, sequence)
 |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
 |      all functions.
 |
 |  update(self)
 |      Enter event loop until all pending events have been processed by Tcl.
 |
 |  update_idletasks(self)
 |      Enter event loop until all idle callbacks have been called. This
 |      will update the display of windows but not process events caused by
 |      the user.
 |
 |  wait_variable(self, name='PY_VAR')
 |      Wait until the variable is modified.
 |
 |      A parameter of type IntVar, StringVar, DoubleVar or
 |      BooleanVar must be given.
 |
 |  wait_visibility(self, window=None)
 |      Wait until the visibility of a WIDGET changes
 |      (e.g. it appears).
 |
 |      If no parameter is given self is used.
 |
 |  wait_window(self, window=None)
 |      Wait until a WIDGET is destroyed.
 |
 |      If no parameter is given self is used.
 |
 |  waitvar = wait_variable(self, name='PY_VAR')
 |
 |  winfo_atom(self, name, displayof=0)
 |      Return integer which represents atom NAME.
 |
 |  winfo_atomname(self, id, displayof=0)
 |      Return name of atom with identifier ID.
 |
 |  winfo_cells(self)
 |      Return number of cells in the colormap for this widget.
 |
 |  winfo_children(self)
 |      Return a list of all widgets which are children of this widget.
 |
 |  winfo_class(self)
 |      Return window class name of this widget.
 |
 |  winfo_colormapfull(self)
 |      Return True if at the last color request the colormap was full.
 |
 |  winfo_containing(self, rootX, rootY, displayof=0)
 |      Return the widget which is at the root coordinates ROOTX, ROOTY.
 |
 |  winfo_depth(self)
 |      Return the number of bits per pixel.
 |
 |  winfo_exists(self)
 |      Return true if this widget exists.
 |
 |  winfo_fpixels(self, number)
 |      Return the number of pixels for the given distance NUMBER
 |      (e.g. "3c") as float.
 |
 |  winfo_geometry(self)
 |      Return geometry string for this widget in the form "widthxheight+X+Y".
 |
 |  winfo_height(self)
 |      Return height of this widget.
 |
 |  winfo_id(self)
 |      Return identifier ID for this widget.
 |
 |  winfo_interps(self, displayof=0)
 |      Return the name of all Tcl interpreters for this display.
 |
 |  winfo_ismapped(self)
 |      Return true if this widget is mapped.
 |
 |  winfo_manager(self)
 |      Return the window manager name for this widget.
 |
 |  winfo_name(self)
 |      Return the name of this widget.
 |
 |  winfo_parent(self)
 |      Return the name of the parent of this widget.
 |
 |  winfo_pathname(self, id, displayof=0)
 |      Return the pathname of the widget given by ID.
 |
 |  winfo_pixels(self, number)
 |      Rounded integer value of winfo_fpixels.
 |
 |  winfo_pointerx(self)
 |      Return the x coordinate of the pointer on the root window.
 |
 |  winfo_pointerxy(self)
 |      Return a tuple of x and y coordinates of the pointer on the root window.
 |
 |  winfo_pointery(self)
 |      Return the y coordinate of the pointer on the root window.
 |
 |  winfo_reqheight(self)
 |      Return requested height of this widget.
 |
 |  winfo_reqwidth(self)
 |      Return requested width of this widget.
 |
 |  winfo_rgb(self, color)
 |      Return a tuple of integer RGB values in range(65536) for color in this widget.
 |
 |  winfo_rootx(self)
 |      Return x coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_rooty(self)
 |      Return y coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_screen(self)
 |      Return the screen name of this widget.
 |
 |  winfo_screencells(self)
 |      Return the number of the cells in the colormap of the screen
 |      of this widget.
 |
 |  winfo_screendepth(self)
 |      Return the number of bits per pixel of the root window of the
 |      screen of this widget.
 |
 |  winfo_screenheight(self)
 |      Return the number of pixels of the height of the screen of this widget
 |      in pixel.
 |
 |  winfo_screenmmheight(self)
 |      Return the number of pixels of the height of the screen of
 |      this widget in mm.
 |
 |  winfo_screenmmwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in mm.
 |
 |  winfo_screenvisual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the default
 |      colormodel of this screen.
 |
 |  winfo_screenwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in pixel.
 |
 |  winfo_server(self)
 |      Return information of the X-Server of the screen of this widget in
 |      the form "XmajorRminor vendor vendorVersion".
 |
 |  winfo_toplevel(self)
 |      Return the toplevel widget of this widget.
 |
 |  winfo_viewable(self)
 |      Return true if the widget and all its higher ancestors are mapped.
 |
 |  winfo_visual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the
 |      colormodel of this widget.
 |
 |  winfo_visualid(self)
 |      Return the X identifier for the visual for this widget.
 |
 |  winfo_visualsavailable(self, includeids=False)
 |      Return a list of all visuals available for the screen
 |      of this widget.
 |
 |      Each item in the list consists of a visual name (see winfo_visual), a
 |      depth and if includeids is true is given also the X identifier.
 |
 |  winfo_vrootheight(self)
 |      Return the height of the virtual root window associated with this
 |      widget in pixels. If there is no virtual root window return the
 |      height of the screen.
 |
 |  winfo_vrootwidth(self)
 |      Return the width of the virtual root window associated with this
 |      widget in pixel. If there is no virtual root window return the
 |      width of the screen.
 |
 |  winfo_vrootx(self)
 |      Return the x offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_vrooty(self)
 |      Return the y offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_width(self)
 |      Return the width of this widget.
 |
 |  winfo_x(self)
 |      Return the x coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  winfo_y(self)
 |      Return the y coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from tkinter.Misc:
 |
 |  __dict__
 |      dictionary for instance variables
 |
 |  __weakref__
 |      list of weak references to the object
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Pack:
 |
 |  forget = pack_forget(self)
 |
 |  info = pack_info(self)
 |
 |  pack = pack_configure(self, cnf={}, **kw)
 |
 |  pack_configure(self, cnf={}, **kw)
 |      Pack a widget in the parent widget. Use as options:
 |      after=widget - pack it after you have packed widget
 |      anchor=NSEW (or subset) - position widget according to
 |                                given direction
 |      before=widget - pack it before you will pack widget
 |      expand=bool - expand widget if parent size grows
 |      fill=NONE or X or Y or BOTH - fill widget if widget grows
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
 |
 |  pack_forget(self)
 |      Unmap this widget and do not use it for the packing order.
 |
 |  pack_info(self)
 |      Return information about the packing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Place:
 |
 |  place = place_configure(self, cnf={}, **kw)
 |
 |  place_configure(self, cnf={}, **kw)
 |      Place a widget in the parent widget. Use as options:
 |      in=master - master relative to which the widget is placed
 |      in_=master - see 'in' option description
 |      x=amount - locate anchor of this widget at position x of master
 |      y=amount - locate anchor of this widget at position y of master
 |      relx=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to width of master (1.0 is right edge)
 |      rely=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to height of master (1.0 is bottom edge)
 |      anchor=NSEW (or subset) - position anchor according to given direction
 |      width=amount - width of this widget in pixel
 |      height=amount - height of this widget in pixel
 |      relwidth=amount - width of this widget between 0.0 and 1.0
 |                        relative to width of master (1.0 is the same width
 |                        as the master)
 |      relheight=amount - height of this widget between 0.0 and 1.0
 |                         relative to height of master (1.0 is the same
 |                         height as the master)
 |      bordermode="inside" or "outside" - whether to take border width of
 |                                         master widget into account
 |
 |  place_forget(self)
 |      Unmap this widget.
 |
 |  place_info(self)
 |      Return information about the placing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Grid:
 |
 |  grid = grid_configure(self, cnf={}, **kw)
 |
 |  grid_configure(self, cnf={}, **kw)
 |      Position a widget in the parent widget in a grid. Use as options:
 |      column=number - use cell identified with given column (starting with 0)
 |      columnspan=number - this widget will span several columns
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      row=number - use cell identified with given row (starting with 0)
 |      rowspan=number - this widget will span several rows
 |      sticky=NSEW - if cell is larger on which sides will this
 |                    widget stick to the cell boundary
 |
 |  grid_forget(self)
 |      Unmap this widget.
 |
 |  grid_info(self)
 |      Return information about the options
 |      for positioning this widget in a grid.
 |
 |  grid_remove(self)
 |      Unmap this widget but remember the grid options.
 |
 |  location = grid_location(self, x, y)
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.XView:
 |
 |  xview(self, *args)
 |      Query and change the horizontal position of the view.
 |
 |  xview_moveto(self, fraction)
 |      Adjusts the view in the window so that FRACTION of the
 |      total width of the canvas is off-screen to the left.
 |
 |  xview_scroll(self, number, what)
 |      Shift the x-view according to NUMBER which is measured in "units"
 |      or "pages" (WHAT).

None
Help on class Style in module tkinter.ttk:

class Style(builtins.object)
 |  Style(master=None)
 |
 |  Manipulate style database.
 |
 |  Methods defined here:
 |
 |  __init__(self, master=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |
 |  configure(self, style, query_opt=None, **kw)
 |      Query or sets the default value of the specified option(s) in
 |      style.
 |
 |      Each key in kw is an option and each value is either a string or
 |      a sequence identifying the value for that option.
 |
 |  element_create(self, elementname, etype, *args, **kw)
 |      Create a new element in the current theme of given etype.
 |
 |  element_names(self)
 |      Returns the list of elements defined in the current theme.
 |
 |  element_options(self, elementname)
 |      Return the list of elementname's options.
 |
 |  layout(self, style, layoutspec=None)
 |      Define the widget layout for given style. If layoutspec is
 |      omitted, return the layout specification for given style.
 |
 |      layoutspec is expected to be a list or an object different than
 |      None that evaluates to False if you want to "turn off" that style.
 |      If it is a list (or tuple, or something else), each item should be
 |      a tuple where the first item is the layout name and the second item
 |      should have the format described below:
 |
 |      LAYOUTS
 |
 |          A layout can contain the value None, if takes no options, or
 |          a dict of options specifying how to arrange the element.
 |          The layout mechanism uses a simplified version of the pack
 |          geometry manager: given an initial cavity, each element is
 |          allocated a parcel. Valid options/values are:
 |
 |              side: whichside
 |                  Specifies which side of the cavity to place the
 |                  element; one of top, right, bottom or left. If
 |                  omitted, the element occupies the entire cavity.
 |
 |              sticky: nswe
 |                  Specifies where the element is placed inside its
 |                  allocated parcel.
 |
 |              children: [sublayout... ]
 |                  Specifies a list of elements to place inside the
 |                  element. Each element is a tuple (or other sequence)
 |                  where the first item is the layout name, and the other
 |                  is a LAYOUT.
 |
 |  lookup(self, style, option, state=None, default=None)
 |      Returns the value specified for option in style.
 |
 |      If state is specified it is expected to be a sequence of one
 |      or more states. If the default argument is set, it is used as
 |      a fallback value in case no specification for option is found.
 |
 |  map(self, style, query_opt=None, **kw)
 |      Query or sets dynamic values of the specified option(s) in
 |      style.
 |
 |      Each key in kw is an option and each value should be a list or a
 |      tuple (usually) containing statespecs grouped in tuples, or list,
 |      or something else of your preference. A statespec is compound of
 |      one or more states and then a value.
 |
 |  theme_create(self, themename, parent=None, settings=None)
 |      Creates a new theme.
 |
 |      It is an error if themename already exists. If parent is
 |      specified, the new theme will inherit styles, elements and
 |      layouts from the specified parent theme. If settings are present,
 |      they are expected to have the same syntax used for theme_settings.
 |
 |  theme_names(self)
 |      Returns a list of all known themes.
 |
 |  theme_settings(self, themename, settings)
 |      Temporarily sets the current theme to themename, apply specified
 |      settings and then restore the previous theme.
 |
 |      Each key in settings is a style and each value may contain the
 |      keys 'configure', 'map', 'layout' and 'element create' and they
 |      are expected to have the same format as specified by the methods
 |      configure, map, layout and element_create respectively.
 |
 |  theme_use(self, themename=None)
 |      If themename is None, returns the theme in use, otherwise, set
 |      the current theme to themename, refreshes all widgets and emits
 |      a <<ThemeChanged>> event.
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |
 |  __dict__
 |      dictionary for instance variables
 |
 |  __weakref__
 |      list of weak references to the object

None
Help on class Treeview in module tkinter.ttk:

class Treeview(Widget, tkinter.XView, tkinter.YView)
 |  Treeview(master=None, **kw)
 |
 |  Ttk Treeview widget displays a hierarchical collection of items.
 |
 |  Each item has a textual label, an optional image, and an optional list
 |  of data values. The data values are displayed in successive columns
 |  after the tree label.
 |
 |  Method resolution order:
 |      Treeview
 |      Widget
 |      tkinter.Widget
 |      tkinter.BaseWidget
 |      tkinter.Misc
 |      tkinter.Pack
 |      tkinter.Place
 |      tkinter.Grid
 |      tkinter.XView
 |      tkinter.YView
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  __init__(self, master=None, **kw)
 |      Construct a Ttk Treeview with parent master.
 |
 |      STANDARD OPTIONS
 |
 |          class, cursor, style, takefocus, xscrollcommand,
 |          yscrollcommand
 |
 |      WIDGET-SPECIFIC OPTIONS
 |
 |          columns, displaycolumns, height, padding, selectmode, show
 |
 |      ITEM OPTIONS
 |
 |          text, image, values, open, tags
 |
 |      TAG OPTIONS
 |
 |          foreground, background, font, image
 |
 |  bbox(self, item, column=None)
 |      Returns the bounding box (relative to the treeview widget's
 |      window) of the specified item in the form x y width height.
 |
 |      If column is specified, returns the bounding box of that cell.
 |      If the item is not visible (i.e., if it is a descendant of a
 |      closed item or is scrolled offscreen), returns an empty string.
 |
 |  column(self, column, option=None, **kw)
 |      Query or modify the options for the specified column.
 |
 |      If kw is not given, returns a dict of the column option values. If
 |      option is specified then the value for that option is returned.
 |      Otherwise, sets the options to the corresponding values.
 |
 |  delete(self, *items)
 |      Delete all specified items and all their descendants. The root
 |      item may not be deleted.
 |
 |  detach(self, *items)
 |      Unlinks all of the specified items from the tree.
 |
 |      The items and all of their descendants are still present, and may
 |      be reinserted at another point in the tree, but will not be
 |      displayed. The root item may not be detached.
 |
 |  exists(self, item)
 |      Returns True if the specified item is present in the tree,
 |      False otherwise.
 |
 |  focus(self, item=None)
 |      If item is specified, sets the focus item to item. Otherwise,
 |      returns the current focus item, or '' if there is none.
 |
 |  get_children(self, item=None)
 |      Returns a tuple of children belonging to item.
 |
 |      If item is not specified, returns root children.
 |
 |  heading(self, column, option=None, **kw)
 |      Query or modify the heading options for the specified column.
 |
 |      If kw is not given, returns a dict of the heading option values. If
 |      option is specified then the value for that option is returned.
 |      Otherwise, sets the options to the corresponding values.
 |
 |      Valid options/values are:
 |          text: text
 |              The text to display in the column heading
 |          image: image_name
 |              Specifies an image to display to the right of the column
 |              heading
 |          anchor: anchor
 |              Specifies how the heading text should be aligned. One of
 |              the standard Tk anchor values
 |          command: callback
 |              A callback to be invoked when the heading label is
 |              pressed.
 |
 |      To configure the tree column heading, call this with column = "#0"
 |
 |  identify(self, component, x, y)
 |      Returns a description of the specified component under the
 |      point given by x and y, or the empty string if no such component
 |      is present at that position.
 |
 |  identify_column(self, x)
 |      Returns the data column identifier of the cell at position x.
 |
 |      The tree column has ID #0.
 |
 |  identify_element(self, x, y)
 |      Returns the element at position x, y.
 |
 |      * Availability: Tk 8.6
 |
 |  identify_region(self, x, y)
 |      Returns one of:
 |
 |      heading: Tree heading area.
 |      separator: Space between two columns headings;
 |      tree: The tree area.
 |      cell: A data cell.
 |
 |      * Availability: Tk 8.6
 |
 |  identify_row(self, y)
 |      Returns the item ID of the item at position y.
 |
 |  index(self, item)
 |      Returns the integer index of item within its parent's list
 |      of children.
 |
 |  insert(self, parent, index, iid=None, **kw)
 |      Creates a new item and return the item identifier of the newly
 |      created item.
 |
 |      parent is the item ID of the parent item, or the empty string
 |      to create a new top-level item. index is an integer, or the value
 |      end, specifying where in the list of parent's children to insert
 |      the new item. If index is less than or equal to zero, the new node
 |      is inserted at the beginning, if index is greater than or equal to
 |      the current number of children, it is inserted at the end. If iid
 |      is specified, it is used as the item identifier, iid must not
 |      already exist in the tree. Otherwise, a new unique identifier
 |      is generated.
 |
 |  item(self, item, option=None, **kw)
 |      Query or modify the options for the specified item.
 |
 |      If no options are given, a dict with options/values for the item
 |      is returned. If option is specified then the value for that option
 |      is returned. Otherwise, sets the options to the corresponding
 |      values as given by kw.
 |
 |  move(self, item, parent, index)
 |      Moves item to position index in parent's list of children.
 |
 |      It is illegal to move an item under one of its descendants. If
 |      index is less than or equal to zero, item is moved to the
 |      beginning, if greater than or equal to the number of children,
 |      it is moved to the end. If item was detached it is reattached.
 |
 |  next(self, item)
 |      Returns the identifier of item's next sibling, or '' if item
 |      is the last child of its parent.
 |
 |  parent(self, item)
 |      Returns the ID of the parent of item, or '' if item is at the
 |      top level of the hierarchy.
 |
 |  prev(self, item)
 |      Returns the identifier of item's previous sibling, or '' if
 |      item is the first child of its parent.
 |
 |  reattach = move(self, item, parent, index)
 |
 |  see(self, item)
 |      Ensure that item is visible.
 |
 |      Sets all of item's ancestors open option to True, and scrolls
 |      the widget if necessary so that item is within the visible
 |      portion of the tree.
 |
 |  selection(self)
 |      Returns the tuple of selected items.
 |
 |  selection_add(self, *items)
 |      Add all of the specified items to the selection.
 |
 |  selection_remove(self, *items)
 |      Remove all of the specified items from the selection.
 |
 |  selection_set(self, *items)
 |      The specified items becomes the new selection.
 |
 |  selection_toggle(self, *items)
 |      Toggle the selection state of each specified item.
 |
 |  set(self, item, column=None, value=None)
 |      Query or set the value of given item.
 |
 |      With one argument, return a dictionary of column/value pairs
 |      for the specified item. With two arguments, return the current
 |      value of the specified column. With three arguments, set the
 |      value of given column in given item to the specified value.
 |
 |  set_children(self, item, *newchildren)
 |      Replaces item's child with newchildren.
 |
 |      Children present in item that are not present in newchildren
 |      are detached from tree. No items in newchildren may be an
 |      ancestor of item.
 |
 |  tag_bind(self, tagname, sequence=None, callback=None)
 |      Bind a callback for the given event sequence to the tag tagname.
 |      When an event is delivered to an item, the callbacks for each
 |      of the item's tags option are called.
 |
 |  tag_configure(self, tagname, option=None, **kw)
 |      Query or modify the options for the specified tagname.
 |
 |      If kw is not given, returns a dict of the option settings for tagname.
 |      If option is specified, returns the value for that option for the
 |      specified tagname. Otherwise, sets the options to the corresponding
 |      values for the given tagname.
 |
 |  tag_has(self, tagname, item=None)
 |      If item is specified, returns 1 or 0 depending on whether the
 |      specified item has the given tagname. Otherwise, returns a list of
 |      all items which have the specified tag.
 |
 |      * Availability: Tk 8.6
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from Widget:
 |
 |  instate(self, statespec, callback=None, *args, **kw)
 |      Test the widget's state.
 |
 |      If callback is not specified, returns True if the widget state
 |      matches statespec and False otherwise. If callback is specified,
 |      then it will be invoked with *args, **kw if the widget state
 |      matches statespec. statespec is expected to be a sequence.
 |
 |  state(self, statespec=None)
 |      Modify or inquire widget state.
 |
 |      Widget state is returned if statespec is None, otherwise it is
 |      set according to the statespec flags and then a new state spec
 |      is returned indicating which flags were changed. statespec is
 |      expected to be a sequence.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.BaseWidget:
 |
 |  destroy(self)
 |      Destroy this and all descendants widgets.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Misc:
 |
 |  __getitem__ = cget(self, key)
 |
 |  __repr__(self)
 |      Return repr(self).
 |
 |  __setitem__(self, key, value)
 |
 |  __str__(self)
 |      Return the window path name of this widget.
 |
 |  after(self, ms, func=None, *args)
 |      Call function once after given time.
 |
 |      MS specifies the time in milliseconds. FUNC gives the
 |      function which shall be called. Additional parameters
 |      are given as parameters to the function call.  Return
 |      identifier to cancel scheduling with after_cancel.
 |
 |  after_cancel(self, id)
 |      Cancel scheduling of function identified with ID.
 |
 |      Identifier returned by after or after_idle must be
 |      given as first parameter.
 |
 |  after_idle(self, func, *args)
 |      Call FUNC once if the Tcl main loop has no event to
 |      process.
 |
 |      Return an identifier to cancel the scheduling with
 |      after_cancel.
 |
 |  anchor = grid_anchor(self, anchor=None)
 |
 |  bell(self, displayof=0)
 |      Ring a display's bell.
 |
 |  bind(self, sequence=None, func=None, add=None)
 |      Bind to this widget at event SEQUENCE a call to function FUNC.
 |
 |      SEQUENCE is a string of concatenated event
 |      patterns. An event pattern is of the form
 |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
 |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
 |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
 |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
 |      Mod1, M1. TYPE is one of Activate, Enter, Map,
 |      ButtonPress, Button, Expose, Motion, ButtonRelease
 |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
 |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
 |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
 |      Leave and DETAIL is the button number for ButtonPress,
 |      ButtonRelease and DETAIL is the Keysym for KeyPress and
 |      KeyRelease. Examples are
 |      <Control-Button-1> for pressing Control and mouse button 1 or
 |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
 |      An event pattern can also be a virtual event of the form
 |      <<AString>> where AString can be arbitrary. This
 |      event can be generated by event_generate.
 |      If events are concatenated they must appear shortly
 |      after each other.
 |
 |      FUNC will be called if the event sequence occurs with an
 |      instance of Event as argument. If the return value of FUNC is
 |      "break" no further bound function is invoked.
 |
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function.
 |
 |      Bind will return an identifier to allow deletion of the bound function with
 |      unbind without memory leak.
 |
 |      If FUNC or SEQUENCE is omitted the bound function or list
 |      of bound events are returned.
 |
 |  bind_all(self, sequence=None, func=None, add=None)
 |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function. See bind for the return value.
 |
 |  bind_class(self, className, sequence=None, func=None, add=None)
 |      Bind to widgets with bindtag CLASSNAME at event
 |      SEQUENCE a call of function FUNC. An additional
 |      boolean parameter ADD specifies whether FUNC will be
 |      called additionally to the other bound function or
 |      whether it will replace the previous function. See bind for
 |      the return value.
 |
 |  bindtags(self, tagList=None)
 |      Set or get the list of bindtags for this widget.
 |
 |      With no argument return the list of all bindtags associated with
 |      this widget. With a list of strings as argument the bindtags are
 |      set to this list. The bindtags determine in which order events are
 |      processed (see bind).
 |
 |  cget(self, key)
 |      Return the resource value for a KEY given as string.
 |
 |  clipboard_append(self, string, **kw)
 |      Append STRING to the Tk clipboard.
 |
 |      A widget specified at the optional displayof keyword
 |      argument specifies the target display. The clipboard
 |      can be retrieved with selection_get.
 |
 |  clipboard_clear(self, **kw)
 |      Clear the data in the Tk clipboard.
 |
 |      A widget specified for the optional displayof keyword
 |      argument specifies the target display.
 |
 |  clipboard_get(self, **kw)
 |      Retrieve data from the clipboard on window's display.
 |
 |      The window keyword defaults to the root window of the Tkinter
 |      application.
 |
 |      The type keyword specifies the form in which the data is
 |      to be returned and should be an atom name such as STRING
 |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
 |      is to try UTF8_STRING and fall back to STRING.
 |
 |      This command is equivalent to:
 |
 |      selection_get(CLIPBOARD)
 |
 |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
 |
 |  config = configure(self, cnf=None, **kw)
 |
 |  configure(self, cnf=None, **kw)
 |      Configure resources of a widget.
 |
 |      The values for resources are specified as keyword
 |      arguments. To get an overview about
 |      the allowed keyword arguments call the method keys.
 |
 |  deletecommand(self, name)
 |      Internal function.
 |
 |      Delete the Tcl command provided in NAME.
 |
 |  event_add(self, virtual, *sequences)
 |      Bind a virtual event VIRTUAL (of the form <<Name>>)
 |      to an event SEQUENCE such that the virtual event is triggered
 |      whenever SEQUENCE occurs.
 |
 |  event_delete(self, virtual, *sequences)
 |      Unbind a virtual event VIRTUAL from SEQUENCE.
 |
 |  event_generate(self, sequence, **kw)
 |      Generate an event SEQUENCE. Additional
 |      keyword arguments specify parameter of the event
 |      (e.g. x, y, rootx, rooty).
 |
 |  event_info(self, virtual=None)
 |      Return a list of all virtual events or the information
 |      about the SEQUENCE bound to the virtual event VIRTUAL.
 |
 |  focus_displayof(self)
 |      Return the widget which has currently the focus on the
 |      display where this widget is located.
 |
 |      Return None if the application does not have the focus.
 |
 |  focus_force(self)
 |      Direct input focus to this widget even if the
 |      application does not have the focus. Use with
 |      caution!
 |
 |  focus_get(self)
 |      Return the widget which has currently the focus in the
 |      application.
 |
 |      Use focus_displayof to allow working with several
 |      displays. Return None if application does not have
 |      the focus.
 |
 |  focus_lastfor(self)
 |      Return the widget which would have the focus if top level
 |      for this widget gets the focus from the window manager.
 |
 |  focus_set(self)
 |      Direct input focus to this widget.
 |
 |      If the application currently does not have the focus
 |      this widget will get the focus if the application gets
 |      the focus through the window manager.
 |
 |  getboolean(self, s)
 |      Return a boolean value for Tcl boolean values true and false given as parameter.
 |
 |  getdouble(self, s)
 |
 |  getint(self, s)
 |
 |  getvar(self, name='PY_VAR')
 |      Return value of Tcl variable NAME.
 |
 |  grab_current(self)
 |      Return widget which has currently the grab in this application
 |      or None.
 |
 |  grab_release(self)
 |      Release grab for this widget if currently set.
 |
 |  grab_set(self)
 |      Set grab for this widget.
 |
 |      A grab directs all events to this and descendant
 |      widgets in the application.
 |
 |  grab_set_global(self)
 |      Set global grab for this widget.
 |
 |      A global grab directs all events to this and
 |      descendant widgets on the display. Use with caution -
 |      other applications do not get events anymore.
 |
 |  grab_status(self)
 |      Return None, "local" or "global" if this widget has
 |      no, a local or a global grab.
 |
 |  grid_anchor(self, anchor=None)
 |      The anchor value controls how to place the grid within the
 |      master when no row/column has any weight.
 |
 |      The default anchor is nw.
 |
 |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |      Return a tuple of integer coordinates for the bounding
 |      box of this widget controlled by the geometry manager grid.
 |
 |      If COLUMN, ROW is given the bounding box applies from
 |      the cell with row and column 0 to the specified
 |      cell. If COL2 and ROW2 are given the bounding box
 |      starts at that cell.
 |
 |      The returned integers specify the offset of the upper left
 |      corner in the master widget and the width and height.
 |
 |  grid_columnconfigure(self, index, cnf={}, **kw)
 |      Configure column INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the column),
 |      weight (how much does additional space propagate to this column)
 |      and pad (how much space to let additionally).
 |
 |  grid_location(self, x, y)
 |      Return a tuple of column and row which identify the cell
 |      at which the pixel at position X and Y inside the master
 |      widget is located.
 |
 |  grid_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given, the current setting will be returned.
 |
 |  grid_rowconfigure(self, index, cnf={}, **kw)
 |      Configure row INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the row),
 |      weight (how much does additional space propagate to this row)
 |      and pad (how much space to let additionally).
 |
 |  grid_size(self)
 |      Return a tuple of the number of column and rows in the grid.
 |
 |  grid_slaves(self, row=None, column=None)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  image_names(self)
 |      Return a list of all existing image names.
 |
 |  image_types(self)
 |      Return a list of all available image types (e.g. photo bitmap).
 |
 |  info_patchlevel(self)
 |      Returns the exact version of the Tcl library.
 |
 |  keys(self)
 |      Return a list of all resource names of this widget.
 |
 |  lift = tkraise(self, aboveThis=None)
 |
 |  lower(self, belowThis=None)
 |      Lower this widget in the stacking order.
 |
 |  mainloop(self, n=0)
 |      Call the mainloop of Tk.
 |
 |  nametowidget(self, name)
 |      Return the Tkinter instance of a widget identified by
 |      its Tcl name NAME.
 |
 |  option_add(self, pattern, value, priority=None)
 |      Set a VALUE (second parameter) for an option
 |      PATTERN (first parameter).
 |
 |      An optional third parameter gives the numeric priority
 |      (defaults to 80).
 |
 |  option_clear(self)
 |      Clear the option database.
 |
 |      It will be reloaded if option_add is called.
 |
 |  option_get(self, name, className)
 |      Return the value for an option NAME for this widget
 |      with CLASSNAME.
 |
 |      Values with higher priority override lower values.
 |
 |  option_readfile(self, fileName, priority=None)
 |      Read file FILENAME into the option database.
 |
 |      An optional second parameter gives the numeric
 |      priority.
 |
 |  pack_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given the current setting will be returned.
 |
 |  pack_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  place_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  propagate = pack_propagate(self, flag=['_noarg_'])
 |
 |  quit(self)
 |      Quit the Tcl interpreter. All widgets will be destroyed.
 |
 |  register = _register(self, func, subst=None, needcleanup=1)
 |
 |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
 |
 |  selection_clear(self, **kw)
 |      Clear the current X selection.
 |
 |  selection_get(self, **kw)
 |      Return the contents of the current X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection and defaults to PRIMARY.  A keyword
 |      parameter displayof specifies a widget on the display
 |      to use. A keyword parameter type specifies the form of data to be
 |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
 |      before STRING.
 |
 |  selection_handle(self, command, **kw)
 |      Specify a function COMMAND to call if the X
 |      selection owned by this widget is queried by another
 |      application.
 |
 |      This function must return the contents of the
 |      selection. The function will be called with the
 |      arguments OFFSET and LENGTH which allows the chunking
 |      of very long selections. The following keyword
 |      parameters can be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  selection_own(self, **kw)
 |      Become owner of X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection (default PRIMARY).
 |
 |  selection_own_get(self, **kw)
 |      Return owner of X selection.
 |
 |      The following keyword parameter can
 |      be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  send(self, interp, cmd, *args)
 |      Send Tcl command CMD to different interpreter INTERP to be executed.
 |
 |  setvar(self, name='PY_VAR', value='1')
 |      Set Tcl variable NAME to VALUE.
 |
 |  size = grid_size(self)
 |
 |  slaves = pack_slaves(self)
 |
 |  tk_bisque(self)
 |      Change the color scheme to light brown as used in Tk 3.6 and before.
 |
 |  tk_focusFollowsMouse(self)
 |      The widget under mouse will get automatically focus. Can not
 |      be disabled easily.
 |
 |  tk_focusNext(self)
 |      Return the next widget in the focus order which follows
 |      widget which has currently the focus.
 |
 |      The focus order first goes to the next child, then to
 |      the children of the child recursively and then to the
 |      next sibling which is higher in the stacking order.  A
 |      widget is omitted if it has the takefocus resource set
 |      to 0.
 |
 |  tk_focusPrev(self)
 |      Return previous widget in the focus order. See tk_focusNext for details.
 |
 |  tk_setPalette(self, *args, **kw)
 |      Set a new color scheme for all widget elements.
 |
 |      A single color as argument will cause that all colors of Tk
 |      widget elements are derived from this.
 |      Alternatively several keyword parameters and its associated
 |      colors can be given. The following keywords are valid:
 |      activeBackground, foreground, selectColor,
 |      activeForeground, highlightBackground, selectBackground,
 |      background, highlightColor, selectForeground,
 |      disabledForeground, insertBackground, troughColor.
 |
 |  tk_strictMotif(self, boolean=None)
 |      Set Tcl internal variable, whether the look and feel
 |      should adhere to Motif.
 |
 |      A parameter of 1 means adhere to Motif (e.g. no color
 |      change if mouse passes over slider).
 |      Returns the set value.
 |
 |  tkraise(self, aboveThis=None)
 |      Raise this widget in the stacking order.
 |
 |  unbind(self, sequence, funcid=None)
 |      Unbind for this widget the event SEQUENCE.
 |
 |      If FUNCID is given, only unbind the function identified with FUNCID
 |      and also delete the corresponding Tcl command.
 |
 |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
 |      unbound.
 |
 |  unbind_all(self, sequence)
 |      Unbind for all widgets for event SEQUENCE all functions.
 |
 |  unbind_class(self, className, sequence)
 |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
 |      all functions.
 |
 |  update(self)
 |      Enter event loop until all pending events have been processed by Tcl.
 |
 |  update_idletasks(self)
 |      Enter event loop until all idle callbacks have been called. This
 |      will update the display of windows but not process events caused by
 |      the user.
 |
 |  wait_variable(self, name='PY_VAR')
 |      Wait until the variable is modified.
 |
 |      A parameter of type IntVar, StringVar, DoubleVar or
 |      BooleanVar must be given.
 |
 |  wait_visibility(self, window=None)
 |      Wait until the visibility of a WIDGET changes
 |      (e.g. it appears).
 |
 |      If no parameter is given self is used.
 |
 |  wait_window(self, window=None)
 |      Wait until a WIDGET is destroyed.
 |
 |      If no parameter is given self is used.
 |
 |  waitvar = wait_variable(self, name='PY_VAR')
 |
 |  winfo_atom(self, name, displayof=0)
 |      Return integer which represents atom NAME.
 |
 |  winfo_atomname(self, id, displayof=0)
 |      Return name of atom with identifier ID.
 |
 |  winfo_cells(self)
 |      Return number of cells in the colormap for this widget.
 |
 |  winfo_children(self)
 |      Return a list of all widgets which are children of this widget.
 |
 |  winfo_class(self)
 |      Return window class name of this widget.
 |
 |  winfo_colormapfull(self)
 |      Return True if at the last color request the colormap was full.
 |
 |  winfo_containing(self, rootX, rootY, displayof=0)
 |      Return the widget which is at the root coordinates ROOTX, ROOTY.
 |
 |  winfo_depth(self)
 |      Return the number of bits per pixel.
 |
 |  winfo_exists(self)
 |      Return true if this widget exists.
 |
 |  winfo_fpixels(self, number)
 |      Return the number of pixels for the given distance NUMBER
 |      (e.g. "3c") as float.
 |
 |  winfo_geometry(self)
 |      Return geometry string for this widget in the form "widthxheight+X+Y".
 |
 |  winfo_height(self)
 |      Return height of this widget.
 |
 |  winfo_id(self)
 |      Return identifier ID for this widget.
 |
 |  winfo_interps(self, displayof=0)
 |      Return the name of all Tcl interpreters for this display.
 |
 |  winfo_ismapped(self)
 |      Return true if this widget is mapped.
 |
 |  winfo_manager(self)
 |      Return the window manager name for this widget.
 |
 |  winfo_name(self)
 |      Return the name of this widget.
 |
 |  winfo_parent(self)
 |      Return the name of the parent of this widget.
 |
 |  winfo_pathname(self, id, displayof=0)
 |      Return the pathname of the widget given by ID.
 |
 |  winfo_pixels(self, number)
 |      Rounded integer value of winfo_fpixels.
 |
 |  winfo_pointerx(self)
 |      Return the x coordinate of the pointer on the root window.
 |
 |  winfo_pointerxy(self)
 |      Return a tuple of x and y coordinates of the pointer on the root window.
 |
 |  winfo_pointery(self)
 |      Return the y coordinate of the pointer on the root window.
 |
 |  winfo_reqheight(self)
 |      Return requested height of this widget.
 |
 |  winfo_reqwidth(self)
 |      Return requested width of this widget.
 |
 |  winfo_rgb(self, color)
 |      Return a tuple of integer RGB values in range(65536) for color in this widget.
 |
 |  winfo_rootx(self)
 |      Return x coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_rooty(self)
 |      Return y coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_screen(self)
 |      Return the screen name of this widget.
 |
 |  winfo_screencells(self)
 |      Return the number of the cells in the colormap of the screen
 |      of this widget.
 |
 |  winfo_screendepth(self)
 |      Return the number of bits per pixel of the root window of the
 |      screen of this widget.
 |
 |  winfo_screenheight(self)
 |      Return the number of pixels of the height of the screen of this widget
 |      in pixel.
 |
 |  winfo_screenmmheight(self)
 |      Return the number of pixels of the height of the screen of
 |      this widget in mm.
 |
 |  winfo_screenmmwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in mm.
 |
 |  winfo_screenvisual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the default
 |      colormodel of this screen.
 |
 |  winfo_screenwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in pixel.
 |
 |  winfo_server(self)
 |      Return information of the X-Server of the screen of this widget in
 |      the form "XmajorRminor vendor vendorVersion".
 |
 |  winfo_toplevel(self)
 |      Return the toplevel widget of this widget.
 |
 |  winfo_viewable(self)
 |      Return true if the widget and all its higher ancestors are mapped.
 |
 |  winfo_visual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the
 |      colormodel of this widget.
 |
 |  winfo_visualid(self)
 |      Return the X identifier for the visual for this widget.
 |
 |  winfo_visualsavailable(self, includeids=False)
 |      Return a list of all visuals available for the screen
 |      of this widget.
 |
 |      Each item in the list consists of a visual name (see winfo_visual), a
 |      depth and if includeids is true is given also the X identifier.
 |
 |  winfo_vrootheight(self)
 |      Return the height of the virtual root window associated with this
 |      widget in pixels. If there is no virtual root window return the
 |      height of the screen.
 |
 |  winfo_vrootwidth(self)
 |      Return the width of the virtual root window associated with this
 |      widget in pixel. If there is no virtual root window return the
 |      width of the screen.
 |
 |  winfo_vrootx(self)
 |      Return the x offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_vrooty(self)
 |      Return the y offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_width(self)
 |      Return the width of this widget.
 |
 |  winfo_x(self)
 |      Return the x coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  winfo_y(self)
 |      Return the y coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from tkinter.Misc:
 |
 |  __dict__
 |      dictionary for instance variables
 |
 |  __weakref__
 |      list of weak references to the object
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Pack:
 |
 |  forget = pack_forget(self)
 |
 |  info = pack_info(self)
 |
 |  pack = pack_configure(self, cnf={}, **kw)
 |
 |  pack_configure(self, cnf={}, **kw)
 |      Pack a widget in the parent widget. Use as options:
 |      after=widget - pack it after you have packed widget
 |      anchor=NSEW (or subset) - position widget according to
 |                                given direction
 |      before=widget - pack it before you will pack widget
 |      expand=bool - expand widget if parent size grows
 |      fill=NONE or X or Y or BOTH - fill widget if widget grows
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
 |
 |  pack_forget(self)
 |      Unmap this widget and do not use it for the packing order.
 |
 |  pack_info(self)
 |      Return information about the packing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Place:
 |
 |  place = place_configure(self, cnf={}, **kw)
 |
 |  place_configure(self, cnf={}, **kw)
 |      Place a widget in the parent widget. Use as options:
 |      in=master - master relative to which the widget is placed
 |      in_=master - see 'in' option description
 |      x=amount - locate anchor of this widget at position x of master
 |      y=amount - locate anchor of this widget at position y of master
 |      relx=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to width of master (1.0 is right edge)
 |      rely=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to height of master (1.0 is bottom edge)
 |      anchor=NSEW (or subset) - position anchor according to given direction
 |      width=amount - width of this widget in pixel
 |      height=amount - height of this widget in pixel
 |      relwidth=amount - width of this widget between 0.0 and 1.0
 |                        relative to width of master (1.0 is the same width
 |                        as the master)
 |      relheight=amount - height of this widget between 0.0 and 1.0
 |                         relative to height of master (1.0 is the same
 |                         height as the master)
 |      bordermode="inside" or "outside" - whether to take border width of
 |                                         master widget into account
 |
 |  place_forget(self)
 |      Unmap this widget.
 |
 |  place_info(self)
 |      Return information about the placing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Grid:
 |
 |  grid = grid_configure(self, cnf={}, **kw)
 |
 |  grid_configure(self, cnf={}, **kw)
 |      Position a widget in the parent widget in a grid. Use as options:
 |      column=number - use cell identified with given column (starting with 0)
 |      columnspan=number - this widget will span several columns
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      row=number - use cell identified with given row (starting with 0)
 |      rowspan=number - this widget will span several rows
 |      sticky=NSEW - if cell is larger on which sides will this
 |                    widget stick to the cell boundary
 |
 |  grid_forget(self)
 |      Unmap this widget.
 |
 |  grid_info(self)
 |      Return information about the options
 |      for positioning this widget in a grid.
 |
 |  grid_remove(self)
 |      Unmap this widget but remember the grid options.
 |
 |  location = grid_location(self, x, y)
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.XView:
 |
 |  xview(self, *args)
 |      Query and change the horizontal position of the view.
 |
 |  xview_moveto(self, fraction)
 |      Adjusts the view in the window so that FRACTION of the
 |      total width of the canvas is off-screen to the left.
 |
 |  xview_scroll(self, number, what)
 |      Shift the x-view according to NUMBER which is measured in "units"
 |      or "pages" (WHAT).
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.YView:
 |
 |  yview(self, *args)
 |      Query and change the vertical position of the view.
 |
 |  yview_moveto(self, fraction)
 |      Adjusts the view in the window so that FRACTION of the
 |      total height of the canvas is off-screen to the top.
 |
 |  yview_scroll(self, number, what)
 |      Shift the y-view according to NUMBER which is measured in
 |      "units" or "pages" (WHAT).

None
Help on class Widget in module tkinter.ttk:

class Widget(tkinter.Widget)
 |  Widget(master, widgetname, kw=None)
 |
 |  Base class for Tk themed widgets.
 |
 |  Method resolution order:
 |      Widget
 |      tkinter.Widget
 |      tkinter.BaseWidget
 |      tkinter.Misc
 |      tkinter.Pack
 |      tkinter.Place
 |      tkinter.Grid
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  __init__(self, master, widgetname, kw=None)
 |      Constructs a Ttk Widget with the parent master.
 |
 |      STANDARD OPTIONS
 |
 |          class, cursor, takefocus, style
 |
 |      SCROLLABLE WIDGET OPTIONS
 |
 |          xscrollcommand, yscrollcommand
 |
 |      LABEL WIDGET OPTIONS
 |
 |          text, textvariable, underline, image, compound, width
 |
 |      WIDGET STATES
 |
 |          active, disabled, focus, pressed, selected, background,
 |          readonly, alternate, invalid
 |
 |  identify(self, x, y)
 |      Returns the name of the element at position x, y, or the empty
 |      string if the point does not lie within any element.
 |
 |      x and y are pixel coordinates relative to the widget.
 |
 |  instate(self, statespec, callback=None, *args, **kw)
 |      Test the widget's state.
 |
 |      If callback is not specified, returns True if the widget state
 |      matches statespec and False otherwise. If callback is specified,
 |      then it will be invoked with *args, **kw if the widget state
 |      matches statespec. statespec is expected to be a sequence.
 |
 |  state(self, statespec=None)
 |      Modify or inquire widget state.
 |
 |      Widget state is returned if statespec is None, otherwise it is
 |      set according to the statespec flags and then a new state spec
 |      is returned indicating which flags were changed. statespec is
 |      expected to be a sequence.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.BaseWidget:
 |
 |  destroy(self)
 |      Destroy this and all descendants widgets.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Misc:
 |
 |  __getitem__ = cget(self, key)
 |
 |  __repr__(self)
 |      Return repr(self).
 |
 |  __setitem__(self, key, value)
 |
 |  __str__(self)
 |      Return the window path name of this widget.
 |
 |  after(self, ms, func=None, *args)
 |      Call function once after given time.
 |
 |      MS specifies the time in milliseconds. FUNC gives the
 |      function which shall be called. Additional parameters
 |      are given as parameters to the function call.  Return
 |      identifier to cancel scheduling with after_cancel.
 |
 |  after_cancel(self, id)
 |      Cancel scheduling of function identified with ID.
 |
 |      Identifier returned by after or after_idle must be
 |      given as first parameter.
 |
 |  after_idle(self, func, *args)
 |      Call FUNC once if the Tcl main loop has no event to
 |      process.
 |
 |      Return an identifier to cancel the scheduling with
 |      after_cancel.
 |
 |  anchor = grid_anchor(self, anchor=None)
 |
 |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |
 |  bell(self, displayof=0)
 |      Ring a display's bell.
 |
 |  bind(self, sequence=None, func=None, add=None)
 |      Bind to this widget at event SEQUENCE a call to function FUNC.
 |
 |      SEQUENCE is a string of concatenated event
 |      patterns. An event pattern is of the form
 |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
 |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
 |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
 |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
 |      Mod1, M1. TYPE is one of Activate, Enter, Map,
 |      ButtonPress, Button, Expose, Motion, ButtonRelease
 |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
 |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
 |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
 |      Leave and DETAIL is the button number for ButtonPress,
 |      ButtonRelease and DETAIL is the Keysym for KeyPress and
 |      KeyRelease. Examples are
 |      <Control-Button-1> for pressing Control and mouse button 1 or
 |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
 |      An event pattern can also be a virtual event of the form
 |      <<AString>> where AString can be arbitrary. This
 |      event can be generated by event_generate.
 |      If events are concatenated they must appear shortly
 |      after each other.
 |
 |      FUNC will be called if the event sequence occurs with an
 |      instance of Event as argument. If the return value of FUNC is
 |      "break" no further bound function is invoked.
 |
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function.
 |
 |      Bind will return an identifier to allow deletion of the bound function with
 |      unbind without memory leak.
 |
 |      If FUNC or SEQUENCE is omitted the bound function or list
 |      of bound events are returned.
 |
 |  bind_all(self, sequence=None, func=None, add=None)
 |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
 |      An additional boolean parameter ADD specifies whether FUNC will
 |      be called additionally to the other bound function or whether
 |      it will replace the previous function. See bind for the return value.
 |
 |  bind_class(self, className, sequence=None, func=None, add=None)
 |      Bind to widgets with bindtag CLASSNAME at event
 |      SEQUENCE a call of function FUNC. An additional
 |      boolean parameter ADD specifies whether FUNC will be
 |      called additionally to the other bound function or
 |      whether it will replace the previous function. See bind for
 |      the return value.
 |
 |  bindtags(self, tagList=None)
 |      Set or get the list of bindtags for this widget.
 |
 |      With no argument return the list of all bindtags associated with
 |      this widget. With a list of strings as argument the bindtags are
 |      set to this list. The bindtags determine in which order events are
 |      processed (see bind).
 |
 |  cget(self, key)
 |      Return the resource value for a KEY given as string.
 |
 |  clipboard_append(self, string, **kw)
 |      Append STRING to the Tk clipboard.
 |
 |      A widget specified at the optional displayof keyword
 |      argument specifies the target display. The clipboard
 |      can be retrieved with selection_get.
 |
 |  clipboard_clear(self, **kw)
 |      Clear the data in the Tk clipboard.
 |
 |      A widget specified for the optional displayof keyword
 |      argument specifies the target display.
 |
 |  clipboard_get(self, **kw)
 |      Retrieve data from the clipboard on window's display.
 |
 |      The window keyword defaults to the root window of the Tkinter
 |      application.
 |
 |      The type keyword specifies the form in which the data is
 |      to be returned and should be an atom name such as STRING
 |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
 |      is to try UTF8_STRING and fall back to STRING.
 |
 |      This command is equivalent to:
 |
 |      selection_get(CLIPBOARD)
 |
 |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
 |
 |  config = configure(self, cnf=None, **kw)
 |
 |  configure(self, cnf=None, **kw)
 |      Configure resources of a widget.
 |
 |      The values for resources are specified as keyword
 |      arguments. To get an overview about
 |      the allowed keyword arguments call the method keys.
 |
 |  deletecommand(self, name)
 |      Internal function.
 |
 |      Delete the Tcl command provided in NAME.
 |
 |  event_add(self, virtual, *sequences)
 |      Bind a virtual event VIRTUAL (of the form <<Name>>)
 |      to an event SEQUENCE such that the virtual event is triggered
 |      whenever SEQUENCE occurs.
 |
 |  event_delete(self, virtual, *sequences)
 |      Unbind a virtual event VIRTUAL from SEQUENCE.
 |
 |  event_generate(self, sequence, **kw)
 |      Generate an event SEQUENCE. Additional
 |      keyword arguments specify parameter of the event
 |      (e.g. x, y, rootx, rooty).
 |
 |  event_info(self, virtual=None)
 |      Return a list of all virtual events or the information
 |      about the SEQUENCE bound to the virtual event VIRTUAL.
 |
 |  focus = focus_set(self)
 |
 |  focus_displayof(self)
 |      Return the widget which has currently the focus on the
 |      display where this widget is located.
 |
 |      Return None if the application does not have the focus.
 |
 |  focus_force(self)
 |      Direct input focus to this widget even if the
 |      application does not have the focus. Use with
 |      caution!
 |
 |  focus_get(self)
 |      Return the widget which has currently the focus in the
 |      application.
 |
 |      Use focus_displayof to allow working with several
 |      displays. Return None if application does not have
 |      the focus.
 |
 |  focus_lastfor(self)
 |      Return the widget which would have the focus if top level
 |      for this widget gets the focus from the window manager.
 |
 |  focus_set(self)
 |      Direct input focus to this widget.
 |
 |      If the application currently does not have the focus
 |      this widget will get the focus if the application gets
 |      the focus through the window manager.
 |
 |  getboolean(self, s)
 |      Return a boolean value for Tcl boolean values true and false given as parameter.
 |
 |  getdouble(self, s)
 |
 |  getint(self, s)
 |
 |  getvar(self, name='PY_VAR')
 |      Return value of Tcl variable NAME.
 |
 |  grab_current(self)
 |      Return widget which has currently the grab in this application
 |      or None.
 |
 |  grab_release(self)
 |      Release grab for this widget if currently set.
 |
 |  grab_set(self)
 |      Set grab for this widget.
 |
 |      A grab directs all events to this and descendant
 |      widgets in the application.
 |
 |  grab_set_global(self)
 |      Set global grab for this widget.
 |
 |      A global grab directs all events to this and
 |      descendant widgets on the display. Use with caution -
 |      other applications do not get events anymore.
 |
 |  grab_status(self)
 |      Return None, "local" or "global" if this widget has
 |      no, a local or a global grab.
 |
 |  grid_anchor(self, anchor=None)
 |      The anchor value controls how to place the grid within the
 |      master when no row/column has any weight.
 |
 |      The default anchor is nw.
 |
 |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
 |      Return a tuple of integer coordinates for the bounding
 |      box of this widget controlled by the geometry manager grid.
 |
 |      If COLUMN, ROW is given the bounding box applies from
 |      the cell with row and column 0 to the specified
 |      cell. If COL2 and ROW2 are given the bounding box
 |      starts at that cell.
 |
 |      The returned integers specify the offset of the upper left
 |      corner in the master widget and the width and height.
 |
 |  grid_columnconfigure(self, index, cnf={}, **kw)
 |      Configure column INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the column),
 |      weight (how much does additional space propagate to this column)
 |      and pad (how much space to let additionally).
 |
 |  grid_location(self, x, y)
 |      Return a tuple of column and row which identify the cell
 |      at which the pixel at position X and Y inside the master
 |      widget is located.
 |
 |  grid_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given, the current setting will be returned.
 |
 |  grid_rowconfigure(self, index, cnf={}, **kw)
 |      Configure row INDEX of a grid.
 |
 |      Valid resources are minsize (minimum size of the row),
 |      weight (how much does additional space propagate to this row)
 |      and pad (how much space to let additionally).
 |
 |  grid_size(self)
 |      Return a tuple of the number of column and rows in the grid.
 |
 |  grid_slaves(self, row=None, column=None)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  image_names(self)
 |      Return a list of all existing image names.
 |
 |  image_types(self)
 |      Return a list of all available image types (e.g. photo bitmap).
 |
 |  info_patchlevel(self)
 |      Returns the exact version of the Tcl library.
 |
 |  keys(self)
 |      Return a list of all resource names of this widget.
 |
 |  lift = tkraise(self, aboveThis=None)
 |
 |  lower(self, belowThis=None)
 |      Lower this widget in the stacking order.
 |
 |  mainloop(self, n=0)
 |      Call the mainloop of Tk.
 |
 |  nametowidget(self, name)
 |      Return the Tkinter instance of a widget identified by
 |      its Tcl name NAME.
 |
 |  option_add(self, pattern, value, priority=None)
 |      Set a VALUE (second parameter) for an option
 |      PATTERN (first parameter).
 |
 |      An optional third parameter gives the numeric priority
 |      (defaults to 80).
 |
 |  option_clear(self)
 |      Clear the option database.
 |
 |      It will be reloaded if option_add is called.
 |
 |  option_get(self, name, className)
 |      Return the value for an option NAME for this widget
 |      with CLASSNAME.
 |
 |      Values with higher priority override lower values.
 |
 |  option_readfile(self, fileName, priority=None)
 |      Read file FILENAME into the option database.
 |
 |      An optional second parameter gives the numeric
 |      priority.
 |
 |  pack_propagate(self, flag=['_noarg_'])
 |      Set or get the status for propagation of geometry information.
 |
 |      A boolean argument specifies whether the geometry information
 |      of the slaves will determine the size of this widget. If no argument
 |      is given the current setting will be returned.
 |
 |  pack_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  place_slaves(self)
 |      Return a list of all slaves of this widget
 |      in its packing order.
 |
 |  propagate = pack_propagate(self, flag=['_noarg_'])
 |
 |  quit(self)
 |      Quit the Tcl interpreter. All widgets will be destroyed.
 |
 |  register = _register(self, func, subst=None, needcleanup=1)
 |
 |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
 |
 |  selection_clear(self, **kw)
 |      Clear the current X selection.
 |
 |  selection_get(self, **kw)
 |      Return the contents of the current X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection and defaults to PRIMARY.  A keyword
 |      parameter displayof specifies a widget on the display
 |      to use. A keyword parameter type specifies the form of data to be
 |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
 |      before STRING.
 |
 |  selection_handle(self, command, **kw)
 |      Specify a function COMMAND to call if the X
 |      selection owned by this widget is queried by another
 |      application.
 |
 |      This function must return the contents of the
 |      selection. The function will be called with the
 |      arguments OFFSET and LENGTH which allows the chunking
 |      of very long selections. The following keyword
 |      parameters can be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  selection_own(self, **kw)
 |      Become owner of X selection.
 |
 |      A keyword parameter selection specifies the name of
 |      the selection (default PRIMARY).
 |
 |  selection_own_get(self, **kw)
 |      Return owner of X selection.
 |
 |      The following keyword parameter can
 |      be provided:
 |      selection - name of the selection (default PRIMARY),
 |      type - type of the selection (e.g. STRING, FILE_NAME).
 |
 |  send(self, interp, cmd, *args)
 |      Send Tcl command CMD to different interpreter INTERP to be executed.
 |
 |  setvar(self, name='PY_VAR', value='1')
 |      Set Tcl variable NAME to VALUE.
 |
 |  size = grid_size(self)
 |
 |  slaves = pack_slaves(self)
 |
 |  tk_bisque(self)
 |      Change the color scheme to light brown as used in Tk 3.6 and before.
 |
 |  tk_focusFollowsMouse(self)
 |      The widget under mouse will get automatically focus. Can not
 |      be disabled easily.
 |
 |  tk_focusNext(self)
 |      Return the next widget in the focus order which follows
 |      widget which has currently the focus.
 |
 |      The focus order first goes to the next child, then to
 |      the children of the child recursively and then to the
 |      next sibling which is higher in the stacking order.  A
 |      widget is omitted if it has the takefocus resource set
 |      to 0.
 |
 |  tk_focusPrev(self)
 |      Return previous widget in the focus order. See tk_focusNext for details.
 |
 |  tk_setPalette(self, *args, **kw)
 |      Set a new color scheme for all widget elements.
 |
 |      A single color as argument will cause that all colors of Tk
 |      widget elements are derived from this.
 |      Alternatively several keyword parameters and its associated
 |      colors can be given. The following keywords are valid:
 |      activeBackground, foreground, selectColor,
 |      activeForeground, highlightBackground, selectBackground,
 |      background, highlightColor, selectForeground,
 |      disabledForeground, insertBackground, troughColor.
 |
 |  tk_strictMotif(self, boolean=None)
 |      Set Tcl internal variable, whether the look and feel
 |      should adhere to Motif.
 |
 |      A parameter of 1 means adhere to Motif (e.g. no color
 |      change if mouse passes over slider).
 |      Returns the set value.
 |
 |  tkraise(self, aboveThis=None)
 |      Raise this widget in the stacking order.
 |
 |  unbind(self, sequence, funcid=None)
 |      Unbind for this widget the event SEQUENCE.
 |
 |      If FUNCID is given, only unbind the function identified with FUNCID
 |      and also delete the corresponding Tcl command.
 |
 |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
 |      unbound.
 |
 |  unbind_all(self, sequence)
 |      Unbind for all widgets for event SEQUENCE all functions.
 |
 |  unbind_class(self, className, sequence)
 |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
 |      all functions.
 |
 |  update(self)
 |      Enter event loop until all pending events have been processed by Tcl.
 |
 |  update_idletasks(self)
 |      Enter event loop until all idle callbacks have been called. This
 |      will update the display of windows but not process events caused by
 |      the user.
 |
 |  wait_variable(self, name='PY_VAR')
 |      Wait until the variable is modified.
 |
 |      A parameter of type IntVar, StringVar, DoubleVar or
 |      BooleanVar must be given.
 |
 |  wait_visibility(self, window=None)
 |      Wait until the visibility of a WIDGET changes
 |      (e.g. it appears).
 |
 |      If no parameter is given self is used.
 |
 |  wait_window(self, window=None)
 |      Wait until a WIDGET is destroyed.
 |
 |      If no parameter is given self is used.
 |
 |  waitvar = wait_variable(self, name='PY_VAR')
 |
 |  winfo_atom(self, name, displayof=0)
 |      Return integer which represents atom NAME.
 |
 |  winfo_atomname(self, id, displayof=0)
 |      Return name of atom with identifier ID.
 |
 |  winfo_cells(self)
 |      Return number of cells in the colormap for this widget.
 |
 |  winfo_children(self)
 |      Return a list of all widgets which are children of this widget.
 |
 |  winfo_class(self)
 |      Return window class name of this widget.
 |
 |  winfo_colormapfull(self)
 |      Return True if at the last color request the colormap was full.
 |
 |  winfo_containing(self, rootX, rootY, displayof=0)
 |      Return the widget which is at the root coordinates ROOTX, ROOTY.
 |
 |  winfo_depth(self)
 |      Return the number of bits per pixel.
 |
 |  winfo_exists(self)
 |      Return true if this widget exists.
 |
 |  winfo_fpixels(self, number)
 |      Return the number of pixels for the given distance NUMBER
 |      (e.g. "3c") as float.
 |
 |  winfo_geometry(self)
 |      Return geometry string for this widget in the form "widthxheight+X+Y".
 |
 |  winfo_height(self)
 |      Return height of this widget.
 |
 |  winfo_id(self)
 |      Return identifier ID for this widget.
 |
 |  winfo_interps(self, displayof=0)
 |      Return the name of all Tcl interpreters for this display.
 |
 |  winfo_ismapped(self)
 |      Return true if this widget is mapped.
 |
 |  winfo_manager(self)
 |      Return the window manager name for this widget.
 |
 |  winfo_name(self)
 |      Return the name of this widget.
 |
 |  winfo_parent(self)
 |      Return the name of the parent of this widget.
 |
 |  winfo_pathname(self, id, displayof=0)
 |      Return the pathname of the widget given by ID.
 |
 |  winfo_pixels(self, number)
 |      Rounded integer value of winfo_fpixels.
 |
 |  winfo_pointerx(self)
 |      Return the x coordinate of the pointer on the root window.
 |
 |  winfo_pointerxy(self)
 |      Return a tuple of x and y coordinates of the pointer on the root window.
 |
 |  winfo_pointery(self)
 |      Return the y coordinate of the pointer on the root window.
 |
 |  winfo_reqheight(self)
 |      Return requested height of this widget.
 |
 |  winfo_reqwidth(self)
 |      Return requested width of this widget.
 |
 |  winfo_rgb(self, color)
 |      Return a tuple of integer RGB values in range(65536) for color in this widget.
 |
 |  winfo_rootx(self)
 |      Return x coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_rooty(self)
 |      Return y coordinate of upper left corner of this widget on the
 |      root window.
 |
 |  winfo_screen(self)
 |      Return the screen name of this widget.
 |
 |  winfo_screencells(self)
 |      Return the number of the cells in the colormap of the screen
 |      of this widget.
 |
 |  winfo_screendepth(self)
 |      Return the number of bits per pixel of the root window of the
 |      screen of this widget.
 |
 |  winfo_screenheight(self)
 |      Return the number of pixels of the height of the screen of this widget
 |      in pixel.
 |
 |  winfo_screenmmheight(self)
 |      Return the number of pixels of the height of the screen of
 |      this widget in mm.
 |
 |  winfo_screenmmwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in mm.
 |
 |  winfo_screenvisual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the default
 |      colormodel of this screen.
 |
 |  winfo_screenwidth(self)
 |      Return the number of pixels of the width of the screen of
 |      this widget in pixel.
 |
 |  winfo_server(self)
 |      Return information of the X-Server of the screen of this widget in
 |      the form "XmajorRminor vendor vendorVersion".
 |
 |  winfo_toplevel(self)
 |      Return the toplevel widget of this widget.
 |
 |  winfo_viewable(self)
 |      Return true if the widget and all its higher ancestors are mapped.
 |
 |  winfo_visual(self)
 |      Return one of the strings directcolor, grayscale, pseudocolor,
 |      staticcolor, staticgray, or truecolor for the
 |      colormodel of this widget.
 |
 |  winfo_visualid(self)
 |      Return the X identifier for the visual for this widget.
 |
 |  winfo_visualsavailable(self, includeids=False)
 |      Return a list of all visuals available for the screen
 |      of this widget.
 |
 |      Each item in the list consists of a visual name (see winfo_visual), a
 |      depth and if includeids is true is given also the X identifier.
 |
 |  winfo_vrootheight(self)
 |      Return the height of the virtual root window associated with this
 |      widget in pixels. If there is no virtual root window return the
 |      height of the screen.
 |
 |  winfo_vrootwidth(self)
 |      Return the width of the virtual root window associated with this
 |      widget in pixel. If there is no virtual root window return the
 |      width of the screen.
 |
 |  winfo_vrootx(self)
 |      Return the x offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_vrooty(self)
 |      Return the y offset of the virtual root relative to the root
 |      window of the screen of this widget.
 |
 |  winfo_width(self)
 |      Return the width of this widget.
 |
 |  winfo_x(self)
 |      Return the x coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  winfo_y(self)
 |      Return the y coordinate of the upper left corner of this widget
 |      in the parent.
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from tkinter.Misc:
 |
 |  __dict__
 |      dictionary for instance variables
 |
 |  __weakref__
 |      list of weak references to the object
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Pack:
 |
 |  forget = pack_forget(self)
 |
 |  info = pack_info(self)
 |
 |  pack = pack_configure(self, cnf={}, **kw)
 |
 |  pack_configure(self, cnf={}, **kw)
 |      Pack a widget in the parent widget. Use as options:
 |      after=widget - pack it after you have packed widget
 |      anchor=NSEW (or subset) - position widget according to
 |                                given direction
 |      before=widget - pack it before you will pack widget
 |      expand=bool - expand widget if parent size grows
 |      fill=NONE or X or Y or BOTH - fill widget if widget grows
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
 |
 |  pack_forget(self)
 |      Unmap this widget and do not use it for the packing order.
 |
 |  pack_info(self)
 |      Return information about the packing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Place:
 |
 |  place = place_configure(self, cnf={}, **kw)
 |
 |  place_configure(self, cnf={}, **kw)
 |      Place a widget in the parent widget. Use as options:
 |      in=master - master relative to which the widget is placed
 |      in_=master - see 'in' option description
 |      x=amount - locate anchor of this widget at position x of master
 |      y=amount - locate anchor of this widget at position y of master
 |      relx=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to width of master (1.0 is right edge)
 |      rely=amount - locate anchor of this widget between 0.0 and 1.0
 |                    relative to height of master (1.0 is bottom edge)
 |      anchor=NSEW (or subset) - position anchor according to given direction
 |      width=amount - width of this widget in pixel
 |      height=amount - height of this widget in pixel
 |      relwidth=amount - width of this widget between 0.0 and 1.0
 |                        relative to width of master (1.0 is the same width
 |                        as the master)
 |      relheight=amount - height of this widget between 0.0 and 1.0
 |                         relative to height of master (1.0 is the same
 |                         height as the master)
 |      bordermode="inside" or "outside" - whether to take border width of
 |                                         master widget into account
 |
 |  place_forget(self)
 |      Unmap this widget.
 |
 |  place_info(self)
 |      Return information about the placing options
 |      for this widget.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from tkinter.Grid:
 |
 |  grid = grid_configure(self, cnf={}, **kw)
 |
 |  grid_configure(self, cnf={}, **kw)
 |      Position a widget in the parent widget in a grid. Use as options:
 |      column=number - use cell identified with given column (starting with 0)
 |      columnspan=number - this widget will span several columns
 |      in=master - use master to contain this widget
 |      in_=master - see 'in' option description
 |      ipadx=amount - add internal padding in x direction
 |      ipady=amount - add internal padding in y direction
 |      padx=amount - add padding in x direction
 |      pady=amount - add padding in y direction
 |      row=number - use cell identified with given row (starting with 0)
 |      rowspan=number - this widget will span several rows
 |      sticky=NSEW - if cell is larger on which sides will this
 |                    widget stick to the cell boundary
 |
 |  grid_forget(self)
 |      Unmap this widget.
 |
 |  grid_info(self)
 |      Return information about the options
 |      for positioning this widget in a grid.
 |
 |  grid_remove(self)
 |      Unmap this widget but remember the grid options.
 |
 |  location = grid_location(self, x, y)

None
Help on function setup_master in module tkinter.ttk:

setup_master(master=None)
    If master is not None, itself is returned. If master is None,
    the default master is returned if there is one, otherwise a new
    master is created and returned.

    If it is not allowed to use the default root and master is None,
    RuntimeError is raised.

None
Help on function tclobjs_to_py in module tkinter.ttk:

tclobjs_to_py(adict)
    Returns adict with its values converted from Tcl objects to Python
    objects.

None
Help on package tkinter:

NAME
    tkinter - Wrapper functions for Tcl/Tk.

MODULE REFERENCE
    https://docs.python.org/3.12/library/tkinter.html

    The following documentation is automatically generated from the Python
    source files.  It may be incomplete, incorrect or include features that
    are considered implementation detail and may vary between Python
    implementations.  When in doubt, consult the module reference at the
    location listed above.

DESCRIPTION
    Tkinter provides classes which allow the display, positioning and
    control of widgets. Toplevel widgets are Tk and Toplevel. Other
    widgets are Frame, Label, Entry, Text, Canvas, Button, Radiobutton,
    Checkbutton, Scale, Listbox, Scrollbar, OptionMenu, Spinbox
    LabelFrame and PanedWindow.

    Properties of the widgets are specified with keyword arguments.
    Keyword arguments have the same name as the corresponding resource
    under Tk.

    Widgets are positioned with one of the geometry managers Place, Pack
    or Grid. These managers can be called with methods place, pack, grid
    available in every Widget.

    Actions are bound to events by resources (e.g. keyword argument
    command) or with the method bind.

    Example (Hello, World):
    import tkinter
    from tkinter.constants import *
    tk = tkinter.Tk()
    frame = tkinter.Frame(tk, relief=RIDGE, borderwidth=2)
    frame.pack(fill=BOTH,expand=1)
    label = tkinter.Label(frame, text="Hello, World")
    label.pack(fill=X, expand=1)
    button = tkinter.Button(frame,text="Exit",command=tk.destroy)
    button.pack(side=BOTTOM)
    tk.mainloop()

PACKAGE CONTENTS
    __main__
    colorchooser
    commondialog
    constants
    dialog
    dnd
    filedialog
    font
    messagebox
    scrolledtext
    simpledialog
    tix
    ttk

CLASSES
    builtins.Exception(builtins.BaseException)
        _tkinter.TclError
    builtins.object
        builtins.float
        builtins.int
        CallWrapper
        Event
        Grid
        Image
            BitmapImage
            PhotoImage
        Misc
            BaseWidget
                Toplevel(BaseWidget, Wm)
                Widget(BaseWidget, Pack, Place, Grid)
                    Button
                    Canvas(Widget, XView, YView)
                    Checkbutton
                    Entry(Widget, XView)
                    Frame
                    Label
                    LabelFrame
                    Listbox(Widget, XView, YView)
                    Menu
                    Menubutton
                        OptionMenu
                    Message
                    PanedWindow
                    Radiobutton
                    Scale
                    Scrollbar
                    Spinbox(Widget, XView)
                    Text(Widget, XView, YView)
            Tk(Misc, Wm)
        Pack
        Place
        Variable
            BooleanVar
            DoubleVar
            IntVar
            StringVar
        Wm
        XView
        YView
    enum.StrEnum(builtins.str, enum.ReprEnum)
        EventType

    class BaseWidget(Misc)
     |  BaseWidget(master, widgetName, cnf={}, kw={}, extra=())
     |
     |  Internal class.
     |
     |  Method resolution order:
     |      BaseWidget
     |      Misc
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, master, widgetName, cnf={}, kw={}, extra=())
     |      Construct a widget with the parent widget MASTER, a name WIDGETNAME
     |      and appropriate options.
     |
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |
     |  __getitem__ = cget(self, key)
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  __setitem__(self, key, value)
     |
     |  __str__(self)
     |      Return the window path name of this widget.
     |
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |
     |  anchor = grid_anchor(self, anchor=None)
     |
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |
     |      This command is equivalent to:
     |
     |      selection_get(CLIPBOARD)
     |
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |
     |  config = configure(self, cnf=None, **kw)
     |
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |
     |  deletecommand(self, name)
     |      Internal function.
     |
     |      Delete the Tcl command provided in NAME.
     |
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |
     |  focus = focus_set(self)
     |
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |
     |      Return None if the application does not have the focus.
     |
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |
     |  focus_set(self)
     |      Direct input focus to this widget.
     |
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |
     |  getdouble(self, s)
     |
     |  getint(self, s)
     |
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |
     |  grab_set(self)
     |      Set grab for this widget.
     |
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |
     |      The default anchor is nw.
     |
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  image_names(self)
     |      Return a list of all existing image names.
     |
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |
     |  info_patchlevel(self)
     |      Returns the exact version of the Tcl library.
     |
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |
     |  lift = tkraise(self, aboveThis=None)
     |
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |
     |  option_clear(self)
     |      Clear the option database.
     |
     |      It will be reloaded if option_add is called.
     |
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |
     |      Values with higher priority override lower values.
     |
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |
     |      An optional second parameter gives the numeric
     |      priority.
     |
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |
     |  register = _register(self, func, subst=None, needcleanup=1)
     |
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |
     |  size = grid_size(self)
     |
     |  slaves = pack_slaves(self)
     |
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget the event SEQUENCE.
     |
     |      If FUNCID is given, only unbind the function identified with FUNCID
     |      and also delete the corresponding Tcl command.
     |
     |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
     |      unbound.
     |
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |
     |      If no parameter is given self is used.
     |
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |
     |      If no parameter is given self is used.
     |
     |  waitvar = wait_variable(self, name='PY_VAR')
     |
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |
     |  winfo_class(self)
     |      Return window class name of this widget.
     |
     |  winfo_colormapfull(self)
     |      Return True if at the last color request the colormap was full.
     |
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |
     |  winfo_height(self)
     |      Return height of this widget.
     |
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |
     |  winfo_name(self)
     |      Return the name of this widget.
     |
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |
     |  winfo_rgb(self, color)
     |      Return a tuple of integer RGB values in range(65536) for color in this widget.
     |
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_width(self)
     |      Return the width of this widget.
     |
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object

    class BitmapImage(Image)
     |  BitmapImage(name=None, cnf={}, master=None, **kw)
     |
     |  Widget which can display images in XBM format.
     |
     |  Method resolution order:
     |      BitmapImage
     |      Image
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, name=None, cnf={}, master=None, **kw)
     |      Create a bitmap with NAME.
     |
     |      Valid resource names: background, data, file, foreground, maskdata, maskfile.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Image:
     |
     |  __del__(self)
     |
     |  __getitem__(self, key)
     |
     |  __setitem__(self, key, value)
     |
     |  __str__(self)
     |      Return str(self).
     |
     |  config = configure(self, **kw)
     |
     |  configure(self, **kw)
     |      Configure the image.
     |
     |  height(self)
     |      Return the height of the image.
     |
     |  type(self)
     |      Return the type of the image, e.g. "photo" or "bitmap".
     |
     |  width(self)
     |      Return the width of the image.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Image:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object

    class BooleanVar(Variable)
     |  BooleanVar(master=None, value=None, name=None)
     |
     |  Value holder for boolean variables.
     |
     |  Method resolution order:
     |      BooleanVar
     |      Variable
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, master=None, value=None, name=None)
     |      Construct a boolean variable.
     |
     |      MASTER can be given as master widget.
     |      VALUE is an optional value (defaults to False)
     |      NAME is an optional Tcl name (defaults to PY_VARnum).
     |
     |      If NAME matches an existing variable and VALUE is omitted
     |      then the existing value is retained.
     |
     |  get(self)
     |      Return the value of the variable as a bool.
     |
     |  initialize = set(self, value)
     |
     |  set(self, value)
     |      Set the variable to VALUE.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Variable:
     |
     |  __del__(self)
     |      Unset the variable in Tcl.
     |
     |  __eq__(self, other)
     |      Return self==value.
     |
     |  __str__(self)
     |      Return the name of the variable in Tcl.
     |
     |  trace = trace_variable(self, mode, callback)
     |
     |  trace_add(self, mode, callback)
     |      Define a trace callback for the variable.
     |
     |      Mode is one of "read", "write", "unset", or a list or tuple of
     |      such strings.
     |      Callback must be a function which is called when the variable is
     |      read, written or unset.
     |
     |      Return the name of the callback.
     |
     |  trace_info(self)
     |      Return all trace callback information.
     |
     |  trace_remove(self, mode, cbname)
     |      Delete the trace callback for a variable.
     |
     |      Mode is one of "read", "write", "unset" or a list or tuple of
     |      such strings.  Must be same as were specified in trace_add().
     |      cbname is the name of the callback returned from trace_add().
     |
     |  trace_variable(self, mode, callback)
     |      Define a trace callback for the variable.
     |
     |      MODE is one of "r", "w", "u" for read, write, undefine.
     |      CALLBACK must be a function which is called when
     |      the variable is read, written or undefined.
     |
     |      Return the name of the callback.
     |
     |      This deprecated method wraps a deprecated Tcl method that will
     |      likely be removed in the future.  Use trace_add() instead.
     |
     |  trace_vdelete(self, mode, cbname)
     |      Delete the trace callback for a variable.
     |
     |      MODE is one of "r", "w", "u" for read, write, undefine.
     |      CBNAME is the name of the callback returned from trace_variable or trace.
     |
     |      This deprecated method wraps a deprecated Tcl method that will
     |      likely be removed in the future.  Use trace_remove() instead.
     |
     |  trace_vinfo(self)
     |      Return all trace callback information.
     |
     |      This deprecated method wraps a deprecated Tcl method that will
     |      likely be removed in the future.  Use trace_info() instead.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Variable:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Variable:
     |
     |  __hash__ = None

    class Button(Widget)
     |  Button(master=None, cnf={}, **kw)
     |
     |  Button widget.
     |
     |  Method resolution order:
     |      Button
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct a button widget with the parent MASTER.
     |
     |      STANDARD OPTIONS
     |
     |          activebackground, activeforeground, anchor,
     |          background, bitmap, borderwidth, cursor,
     |          disabledforeground, font, foreground
     |          highlightbackground, highlightcolor,
     |          highlightthickness, image, justify,
     |          padx, pady, relief, repeatdelay,
     |          repeatinterval, takefocus, text,
     |          textvariable, underline, wraplength
     |
     |      WIDGET-SPECIFIC OPTIONS
     |
     |          command, compound, default, height,
     |          overrelief, state, width
     |
     |  flash(self)
     |      Flash the button.
     |
     |      This is accomplished by redisplaying
     |      the button several times, alternating between active and
     |      normal colors. At the end of the flash the button is left
     |      in the same normal/active state as when the command was
     |      invoked. This command is ignored if the button's state is
     |      disabled.
     |
     |  invoke(self)
     |      Invoke the command associated with the button.
     |
     |      The return value is the return value from the command,
     |      or an empty string if there is no command associated with
     |      the button. This command is ignored if the button's state
     |      is disabled.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |
     |  __getitem__ = cget(self, key)
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  __setitem__(self, key, value)
     |
     |  __str__(self)
     |      Return the window path name of this widget.
     |
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |
     |  anchor = grid_anchor(self, anchor=None)
     |
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |
     |      This command is equivalent to:
     |
     |      selection_get(CLIPBOARD)
     |
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |
     |  config = configure(self, cnf=None, **kw)
     |
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |
     |  deletecommand(self, name)
     |      Internal function.
     |
     |      Delete the Tcl command provided in NAME.
     |
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |
     |  focus = focus_set(self)
     |
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |
     |      Return None if the application does not have the focus.
     |
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |
     |  focus_set(self)
     |      Direct input focus to this widget.
     |
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |
     |  getdouble(self, s)
     |
     |  getint(self, s)
     |
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |
     |  grab_set(self)
     |      Set grab for this widget.
     |
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |
     |      The default anchor is nw.
     |
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  image_names(self)
     |      Return a list of all existing image names.
     |
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |
     |  info_patchlevel(self)
     |      Returns the exact version of the Tcl library.
     |
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |
     |  lift = tkraise(self, aboveThis=None)
     |
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |
     |  option_clear(self)
     |      Clear the option database.
     |
     |      It will be reloaded if option_add is called.
     |
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |
     |      Values with higher priority override lower values.
     |
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |
     |      An optional second parameter gives the numeric
     |      priority.
     |
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |
     |  register = _register(self, func, subst=None, needcleanup=1)
     |
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |
     |  size = grid_size(self)
     |
     |  slaves = pack_slaves(self)
     |
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget the event SEQUENCE.
     |
     |      If FUNCID is given, only unbind the function identified with FUNCID
     |      and also delete the corresponding Tcl command.
     |
     |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
     |      unbound.
     |
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |
     |      If no parameter is given self is used.
     |
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |
     |      If no parameter is given self is used.
     |
     |  waitvar = wait_variable(self, name='PY_VAR')
     |
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |
     |  winfo_class(self)
     |      Return window class name of this widget.
     |
     |  winfo_colormapfull(self)
     |      Return True if at the last color request the colormap was full.
     |
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |
     |  winfo_height(self)
     |      Return height of this widget.
     |
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |
     |  winfo_name(self)
     |      Return the name of this widget.
     |
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |
     |  winfo_rgb(self, color)
     |      Return a tuple of integer RGB values in range(65536) for color in this widget.
     |
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_width(self)
     |      Return the width of this widget.
     |
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |
     |  forget = pack_forget(self)
     |
     |  info = pack_info(self)
     |
     |  pack = pack_configure(self, cnf={}, **kw)
     |
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |
     |  place = place_configure(self, cnf={}, **kw)
     |
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |
     |  place_forget(self)
     |      Unmap this widget.
     |
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |
     |  grid = grid_configure(self, cnf={}, **kw)
     |
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |
     |  grid_forget(self)
     |      Unmap this widget.
     |
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |
     |  location = grid_location(self, x, y)

    class CallWrapper(builtins.object)
     |  CallWrapper(func, subst, widget)
     |
     |  Internal class. Stores function to call when some user
     |  defined Tcl function is called e.g. after an event occurred.
     |
     |  Methods defined here:
     |
     |  __call__(self, *args)
     |      Apply first function SUBST to arguments, than FUNC.
     |
     |  __init__(self, func, subst, widget)
     |      Store FUNC, SUBST and WIDGET as members.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object

    class Canvas(Widget, XView, YView)
     |  Canvas(master=None, cnf={}, **kw)
     |
     |  Canvas widget to display graphical elements like lines or text.
     |
     |  Method resolution order:
     |      Canvas
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      XView
     |      YView
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct a canvas widget with the parent MASTER.
     |
     |      Valid resource names: background, bd, bg, borderwidth, closeenough,
     |      confine, cursor, height, highlightbackground, highlightcolor,
     |      highlightthickness, insertbackground, insertborderwidth,
     |      insertofftime, insertontime, insertwidth, offset, relief,
     |      scrollregion, selectbackground, selectborderwidth, selectforeground,
     |      state, takefocus, width, xscrollcommand, xscrollincrement,
     |      yscrollcommand, yscrollincrement.
     |
     |  addtag(self, *args)
     |      Internal function.
     |
     |  addtag_above(self, newtag, tagOrId)
     |      Add tag NEWTAG to all items above TAGORID.
     |
     |  addtag_all(self, newtag)
     |      Add tag NEWTAG to all items.
     |
     |  addtag_below(self, newtag, tagOrId)
     |      Add tag NEWTAG to all items below TAGORID.
     |
     |  addtag_closest(self, newtag, x, y, halo=None, start=None)
     |      Add tag NEWTAG to item which is closest to pixel at X, Y.
     |      If several match take the top-most.
     |      All items closer than HALO are considered overlapping (all are
     |      closest). If START is specified the next below this tag is taken.
     |
     |  addtag_enclosed(self, newtag, x1, y1, x2, y2)
     |      Add tag NEWTAG to all items in the rectangle defined
     |      by X1,Y1,X2,Y2.
     |
     |  addtag_overlapping(self, newtag, x1, y1, x2, y2)
     |      Add tag NEWTAG to all items which overlap the rectangle
     |      defined by X1,Y1,X2,Y2.
     |
     |  addtag_withtag(self, newtag, tagOrId)
     |      Add tag NEWTAG to all items with TAGORID.
     |
     |  bbox(self, *args)
     |      Return a tuple of X1,Y1,X2,Y2 coordinates for a rectangle
     |      which encloses all items with tags specified as arguments.
     |
     |  canvasx(self, screenx, gridspacing=None)
     |      Return the canvas x coordinate of pixel position SCREENX rounded
     |      to nearest multiple of GRIDSPACING units.
     |
     |  canvasy(self, screeny, gridspacing=None)
     |      Return the canvas y coordinate of pixel position SCREENY rounded
     |      to nearest multiple of GRIDSPACING units.
     |
     |  coords(self, *args)
     |      Return a list of coordinates for the item given in ARGS.
     |
     |  create_arc(self, *args, **kw)
     |      Create arc shaped region with coordinates x1,y1,x2,y2.
     |
     |  create_bitmap(self, *args, **kw)
     |      Create bitmap with coordinates x1,y1.
     |
     |  create_image(self, *args, **kw)
     |      Create image item with coordinates x1,y1.
     |
     |  create_line(self, *args, **kw)
     |      Create line with coordinates x1,y1,...,xn,yn.
     |
     |  create_oval(self, *args, **kw)
     |      Create oval with coordinates x1,y1,x2,y2.
     |
     |  create_polygon(self, *args, **kw)
     |      Create polygon with coordinates x1,y1,...,xn,yn.
     |
     |  create_rectangle(self, *args, **kw)
     |      Create rectangle with coordinates x1,y1,x2,y2.
     |
     |  create_text(self, *args, **kw)
     |      Create text with coordinates x1,y1.
     |
     |  create_window(self, *args, **kw)
     |      Create window with coordinates x1,y1,x2,y2.
     |
     |  dchars(self, *args)
     |      Delete characters of text items identified by tag or id in ARGS (possibly
     |      several times) from FIRST to LAST character (including).
     |
     |  delete(self, *args)
     |      Delete items identified by all tag or ids contained in ARGS.
     |
     |  dtag(self, *args)
     |      Delete tag or id given as last arguments in ARGS from items
     |      identified by first argument in ARGS.
     |
     |  find(self, *args)
     |      Internal function.
     |
     |  find_above(self, tagOrId)
     |      Return items above TAGORID.
     |
     |  find_all(self)
     |      Return all items.
     |
     |  find_below(self, tagOrId)
     |      Return all items below TAGORID.
     |
     |  find_closest(self, x, y, halo=None, start=None)
     |      Return item which is closest to pixel at X, Y.
     |      If several match take the top-most.
     |      All items closer than HALO are considered overlapping (all are
     |      closest). If START is specified the next below this tag is taken.
     |
     |  find_enclosed(self, x1, y1, x2, y2)
     |      Return all items in rectangle defined
     |      by X1,Y1,X2,Y2.
     |
     |  find_overlapping(self, x1, y1, x2, y2)
     |      Return all items which overlap the rectangle
     |      defined by X1,Y1,X2,Y2.
     |
     |  find_withtag(self, tagOrId)
     |      Return all items with TAGORID.
     |
     |  focus(self, *args)
     |      Set focus to the first item specified in ARGS.
     |
     |  gettags(self, *args)
     |      Return tags associated with the first item specified in ARGS.
     |
     |  icursor(self, *args)
     |      Set cursor at position POS in the item identified by TAGORID.
     |      In ARGS TAGORID must be first.
     |
     |  index(self, *args)
     |      Return position of cursor as integer in item specified in ARGS.
     |
     |  insert(self, *args)
     |      Insert TEXT in item TAGORID at position POS. ARGS must
     |      be TAGORID POS TEXT.
     |
     |  itemcget(self, tagOrId, option)
     |      Return the resource value for an OPTION for item TAGORID.
     |
     |  itemconfig = itemconfigure(self, tagOrId, cnf=None, **kw)
     |
     |  itemconfigure(self, tagOrId, cnf=None, **kw)
     |      Configure resources of an item TAGORID.
     |
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method without arguments.
     |
     |  lift = tag_raise(self, *args)
     |
     |  lower = tag_lower(self, *args)
     |
     |  move(self, *args)
     |      Move an item TAGORID given in ARGS.
     |
     |  moveto(self, tagOrId, x='', y='')
     |      Move the items given by TAGORID in the canvas coordinate
     |      space so that the first coordinate pair of the bottommost
     |      item with tag TAGORID is located at position (X,Y).
     |      X and Y may be the empty string, in which case the
     |      corresponding coordinate will be unchanged. All items matching
     |      TAGORID remain in the same positions relative to each other.
     |
     |  postscript(self, cnf={}, **kw)
     |      Print the contents of the canvas to a postscript
     |      file. Valid options: colormap, colormode, file, fontmap,
     |      height, pageanchor, pageheight, pagewidth, pagex, pagey,
     |      rotate, width, x, y.
     |
     |  scale(self, *args)
     |      Scale item TAGORID with XORIGIN, YORIGIN, XSCALE, YSCALE.
     |
     |  scan_dragto(self, x, y, gain=10)
     |      Adjust the view of the canvas to GAIN times the
     |      difference between X and Y and the coordinates given in
     |      scan_mark.
     |
     |  scan_mark(self, x, y)
     |      Remember the current X, Y coordinates.
     |
     |  select_adjust(self, tagOrId, index)
     |      Adjust the end of the selection near the cursor of an item TAGORID to index.
     |
     |  select_clear(self)
     |      Clear the selection if it is in this widget.
     |
     |  select_from(self, tagOrId, index)
     |      Set the fixed end of a selection in item TAGORID to INDEX.
     |
     |  select_item(self)
     |      Return the item which has the selection.
     |
     |  select_to(self, tagOrId, index)
     |      Set the variable end of a selection in item TAGORID to INDEX.
     |
     |  tag_bind(self, tagOrId, sequence=None, func=None, add=None)
     |      Bind to all items with TAGORID at event SEQUENCE a call to function FUNC.
     |
     |      An additional boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or whether it will
     |      replace the previous function. See bind for the return value.
     |
     |  tag_lower(self, *args)
     |      Lower an item TAGORID given in ARGS
     |      (optional below another item).
     |
     |  tag_raise(self, *args)
     |      Raise an item TAGORID given in ARGS
     |      (optional above another item).
     |
     |  tag_unbind(self, tagOrId, sequence, funcid=None)
     |      Unbind for all items with TAGORID for event SEQUENCE  the
     |      function identified with FUNCID.
     |
     |  tkraise = tag_raise(self, *args)
     |
     |  type(self, tagOrId)
     |      Return the type of the item TAGORID.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |
     |  __getitem__ = cget(self, key)
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  __setitem__(self, key, value)
     |
     |  __str__(self)
     |      Return the window path name of this widget.
     |
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |
     |  anchor = grid_anchor(self, anchor=None)
     |
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |
     |      This command is equivalent to:
     |
     |      selection_get(CLIPBOARD)
     |
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |
     |  config = configure(self, cnf=None, **kw)
     |
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |
     |  deletecommand(self, name)
     |      Internal function.
     |
     |      Delete the Tcl command provided in NAME.
     |
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |
     |      Return None if the application does not have the focus.
     |
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |
     |  focus_set(self)
     |      Direct input focus to this widget.
     |
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |
     |  getdouble(self, s)
     |
     |  getint(self, s)
     |
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |
     |  grab_set(self)
     |      Set grab for this widget.
     |
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |
     |      The default anchor is nw.
     |
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  image_names(self)
     |      Return a list of all existing image names.
     |
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |
     |  info_patchlevel(self)
     |      Returns the exact version of the Tcl library.
     |
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |
     |  option_clear(self)
     |      Clear the option database.
     |
     |      It will be reloaded if option_add is called.
     |
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |
     |      Values with higher priority override lower values.
     |
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |
     |      An optional second parameter gives the numeric
     |      priority.
     |
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |
     |  register = _register(self, func, subst=None, needcleanup=1)
     |
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |
     |  size = grid_size(self)
     |
     |  slaves = pack_slaves(self)
     |
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget the event SEQUENCE.
     |
     |      If FUNCID is given, only unbind the function identified with FUNCID
     |      and also delete the corresponding Tcl command.
     |
     |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
     |      unbound.
     |
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |
     |      If no parameter is given self is used.
     |
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |
     |      If no parameter is given self is used.
     |
     |  waitvar = wait_variable(self, name='PY_VAR')
     |
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |
     |  winfo_class(self)
     |      Return window class name of this widget.
     |
     |  winfo_colormapfull(self)
     |      Return True if at the last color request the colormap was full.
     |
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |
     |  winfo_height(self)
     |      Return height of this widget.
     |
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |
     |  winfo_name(self)
     |      Return the name of this widget.
     |
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |
     |  winfo_rgb(self, color)
     |      Return a tuple of integer RGB values in range(65536) for color in this widget.
     |
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_width(self)
     |      Return the width of this widget.
     |
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |
     |  forget = pack_forget(self)
     |
     |  info = pack_info(self)
     |
     |  pack = pack_configure(self, cnf={}, **kw)
     |
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |
     |  place = place_configure(self, cnf={}, **kw)
     |
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |
     |  place_forget(self)
     |      Unmap this widget.
     |
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |
     |  grid = grid_configure(self, cnf={}, **kw)
     |
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |
     |  grid_forget(self)
     |      Unmap this widget.
     |
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |
     |  location = grid_location(self, x, y)
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from XView:
     |
     |  xview(self, *args)
     |      Query and change the horizontal position of the view.
     |
     |  xview_moveto(self, fraction)
     |      Adjusts the view in the window so that FRACTION of the
     |      total width of the canvas is off-screen to the left.
     |
     |  xview_scroll(self, number, what)
     |      Shift the x-view according to NUMBER which is measured in "units"
     |      or "pages" (WHAT).
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from YView:
     |
     |  yview(self, *args)
     |      Query and change the vertical position of the view.
     |
     |  yview_moveto(self, fraction)
     |      Adjusts the view in the window so that FRACTION of the
     |      total height of the canvas is off-screen to the top.
     |
     |  yview_scroll(self, number, what)
     |      Shift the y-view according to NUMBER which is measured in
     |      "units" or "pages" (WHAT).

    class Checkbutton(Widget)
     |  Checkbutton(master=None, cnf={}, **kw)
     |
     |  Checkbutton widget which is either in on- or off-state.
     |
     |  Method resolution order:
     |      Checkbutton
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct a checkbutton widget with the parent MASTER.
     |
     |      Valid resource names: activebackground, activeforeground, anchor,
     |      background, bd, bg, bitmap, borderwidth, command, cursor,
     |      disabledforeground, fg, font, foreground, height,
     |      highlightbackground, highlightcolor, highlightthickness, image,
     |      indicatoron, justify, offvalue, onvalue, padx, pady, relief,
     |      selectcolor, selectimage, state, takefocus, text, textvariable,
     |      underline, variable, width, wraplength.
     |
     |  deselect(self)
     |      Put the button in off-state.
     |
     |  flash(self)
     |      Flash the button.
     |
     |  invoke(self)
     |      Toggle the button and invoke a command if given as resource.
     |
     |  select(self)
     |      Put the button in on-state.
     |
     |  toggle(self)
     |      Toggle the button.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |
     |  __getitem__ = cget(self, key)
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  __setitem__(self, key, value)
     |
     |  __str__(self)
     |      Return the window path name of this widget.
     |
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |
     |  anchor = grid_anchor(self, anchor=None)
     |
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |
     |      This command is equivalent to:
     |
     |      selection_get(CLIPBOARD)
     |
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |
     |  config = configure(self, cnf=None, **kw)
     |
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |
     |  deletecommand(self, name)
     |      Internal function.
     |
     |      Delete the Tcl command provided in NAME.
     |
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |
     |  focus = focus_set(self)
     |
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |
     |      Return None if the application does not have the focus.
     |
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |
     |  focus_set(self)
     |      Direct input focus to this widget.
     |
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |
     |  getdouble(self, s)
     |
     |  getint(self, s)
     |
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |
     |  grab_set(self)
     |      Set grab for this widget.
     |
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |
     |      The default anchor is nw.
     |
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  image_names(self)
     |      Return a list of all existing image names.
     |
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |
     |  info_patchlevel(self)
     |      Returns the exact version of the Tcl library.
     |
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |
     |  lift = tkraise(self, aboveThis=None)
     |
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |
     |  option_clear(self)
     |      Clear the option database.
     |
     |      It will be reloaded if option_add is called.
     |
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |
     |      Values with higher priority override lower values.
     |
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |
     |      An optional second parameter gives the numeric
     |      priority.
     |
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |
     |  register = _register(self, func, subst=None, needcleanup=1)
     |
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |
     |  size = grid_size(self)
     |
     |  slaves = pack_slaves(self)
     |
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget the event SEQUENCE.
     |
     |      If FUNCID is given, only unbind the function identified with FUNCID
     |      and also delete the corresponding Tcl command.
     |
     |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
     |      unbound.
     |
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |
     |      If no parameter is given self is used.
     |
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |
     |      If no parameter is given self is used.
     |
     |  waitvar = wait_variable(self, name='PY_VAR')
     |
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |
     |  winfo_class(self)
     |      Return window class name of this widget.
     |
     |  winfo_colormapfull(self)
     |      Return True if at the last color request the colormap was full.
     |
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |
     |  winfo_height(self)
     |      Return height of this widget.
     |
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |
     |  winfo_name(self)
     |      Return the name of this widget.
     |
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |
     |  winfo_rgb(self, color)
     |      Return a tuple of integer RGB values in range(65536) for color in this widget.
     |
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_width(self)
     |      Return the width of this widget.
     |
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |
     |  forget = pack_forget(self)
     |
     |  info = pack_info(self)
     |
     |  pack = pack_configure(self, cnf={}, **kw)
     |
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |
     |  place = place_configure(self, cnf={}, **kw)
     |
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |
     |  place_forget(self)
     |      Unmap this widget.
     |
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |
     |  grid = grid_configure(self, cnf={}, **kw)
     |
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |
     |  grid_forget(self)
     |      Unmap this widget.
     |
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |
     |  location = grid_location(self, x, y)

    class DoubleVar(Variable)
     |  DoubleVar(master=None, value=None, name=None)
     |
     |  Value holder for float variables.
     |
     |  Method resolution order:
     |      DoubleVar
     |      Variable
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, master=None, value=None, name=None)
     |      Construct a float variable.
     |
     |      MASTER can be given as master widget.
     |      VALUE is an optional value (defaults to 0.0)
     |      NAME is an optional Tcl name (defaults to PY_VARnum).
     |
     |      If NAME matches an existing variable and VALUE is omitted
     |      then the existing value is retained.
     |
     |  get(self)
     |      Return the value of the variable as a float.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Variable:
     |
     |  __del__(self)
     |      Unset the variable in Tcl.
     |
     |  __eq__(self, other)
     |      Return self==value.
     |
     |  __str__(self)
     |      Return the name of the variable in Tcl.
     |
     |  initialize = set(self, value)
     |
     |  set(self, value)
     |      Set the variable to VALUE.
     |
     |  trace = trace_variable(self, mode, callback)
     |
     |  trace_add(self, mode, callback)
     |      Define a trace callback for the variable.
     |
     |      Mode is one of "read", "write", "unset", or a list or tuple of
     |      such strings.
     |      Callback must be a function which is called when the variable is
     |      read, written or unset.
     |
     |      Return the name of the callback.
     |
     |  trace_info(self)
     |      Return all trace callback information.
     |
     |  trace_remove(self, mode, cbname)
     |      Delete the trace callback for a variable.
     |
     |      Mode is one of "read", "write", "unset" or a list or tuple of
     |      such strings.  Must be same as were specified in trace_add().
     |      cbname is the name of the callback returned from trace_add().
     |
     |  trace_variable(self, mode, callback)
     |      Define a trace callback for the variable.
     |
     |      MODE is one of "r", "w", "u" for read, write, undefine.
     |      CALLBACK must be a function which is called when
     |      the variable is read, written or undefined.
     |
     |      Return the name of the callback.
     |
     |      This deprecated method wraps a deprecated Tcl method that will
     |      likely be removed in the future.  Use trace_add() instead.
     |
     |  trace_vdelete(self, mode, cbname)
     |      Delete the trace callback for a variable.
     |
     |      MODE is one of "r", "w", "u" for read, write, undefine.
     |      CBNAME is the name of the callback returned from trace_variable or trace.
     |
     |      This deprecated method wraps a deprecated Tcl method that will
     |      likely be removed in the future.  Use trace_remove() instead.
     |
     |  trace_vinfo(self)
     |      Return all trace callback information.
     |
     |      This deprecated method wraps a deprecated Tcl method that will
     |      likely be removed in the future.  Use trace_info() instead.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Variable:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Variable:
     |
     |  __hash__ = None

    class Entry(Widget, XView)
     |  Entry(master=None, cnf={}, **kw)
     |
     |  Entry widget which allows displaying simple text.
     |
     |  Method resolution order:
     |      Entry
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      XView
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct an entry widget with the parent MASTER.
     |
     |      Valid resource names: background, bd, bg, borderwidth, cursor,
     |      exportselection, fg, font, foreground, highlightbackground,
     |      highlightcolor, highlightthickness, insertbackground,
     |      insertborderwidth, insertofftime, insertontime, insertwidth,
     |      invalidcommand, invcmd, justify, relief, selectbackground,
     |      selectborderwidth, selectforeground, show, state, takefocus,
     |      textvariable, validate, validatecommand, vcmd, width,
     |      xscrollcommand.
     |
     |  delete(self, first, last=None)
     |      Delete text from FIRST to LAST (not included).
     |
     |  get(self)
     |      Return the text.
     |
     |  icursor(self, index)
     |      Insert cursor at INDEX.
     |
     |  index(self, index)
     |      Return position of cursor.
     |
     |  insert(self, index, string)
     |      Insert STRING at INDEX.
     |
     |  scan_dragto(self, x)
     |      Adjust the view of the canvas to 10 times the
     |      difference between X and Y and the coordinates given in
     |      scan_mark.
     |
     |  scan_mark(self, x)
     |      Remember the current X, Y coordinates.
     |
     |  select_adjust = selection_adjust(self, index)
     |
     |  select_clear = selection_clear(self)
     |
     |  select_from = selection_from(self, index)
     |
     |  select_present = selection_present(self)
     |
     |  select_range = selection_range(self, start, end)
     |
     |  select_to = selection_to(self, index)
     |
     |  selection_adjust(self, index)
     |      Adjust the end of the selection near the cursor to INDEX.
     |
     |  selection_clear(self)
     |      Clear the selection if it is in this widget.
     |
     |  selection_from(self, index)
     |      Set the fixed end of a selection to INDEX.
     |
     |  selection_present(self)
     |      Return True if there are characters selected in the entry, False
     |      otherwise.
     |
     |  selection_range(self, start, end)
     |      Set the selection from START to END (not included).
     |
     |  selection_to(self, index)
     |      Set the variable end of a selection to INDEX.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |
     |  __getitem__ = cget(self, key)
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  __setitem__(self, key, value)
     |
     |  __str__(self)
     |      Return the window path name of this widget.
     |
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |
     |  anchor = grid_anchor(self, anchor=None)
     |
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |
     |      This command is equivalent to:
     |
     |      selection_get(CLIPBOARD)
     |
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |
     |  config = configure(self, cnf=None, **kw)
     |
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |
     |  deletecommand(self, name)
     |      Internal function.
     |
     |      Delete the Tcl command provided in NAME.
     |
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |
     |  focus = focus_set(self)
     |
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |
     |      Return None if the application does not have the focus.
     |
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |
     |  focus_set(self)
     |      Direct input focus to this widget.
     |
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |
     |  getdouble(self, s)
     |
     |  getint(self, s)
     |
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |
     |  grab_set(self)
     |      Set grab for this widget.
     |
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |
     |      The default anchor is nw.
     |
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  image_names(self)
     |      Return a list of all existing image names.
     |
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |
     |  info_patchlevel(self)
     |      Returns the exact version of the Tcl library.
     |
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |
     |  lift = tkraise(self, aboveThis=None)
     |
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |
     |  option_clear(self)
     |      Clear the option database.
     |
     |      It will be reloaded if option_add is called.
     |
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |
     |      Values with higher priority override lower values.
     |
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |
     |      An optional second parameter gives the numeric
     |      priority.
     |
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |
     |  register = _register(self, func, subst=None, needcleanup=1)
     |
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |
     |  size = grid_size(self)
     |
     |  slaves = pack_slaves(self)
     |
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget the event SEQUENCE.
     |
     |      If FUNCID is given, only unbind the function identified with FUNCID
     |      and also delete the corresponding Tcl command.
     |
     |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
     |      unbound.
     |
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |
     |      If no parameter is given self is used.
     |
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |
     |      If no parameter is given self is used.
     |
     |  waitvar = wait_variable(self, name='PY_VAR')
     |
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |
     |  winfo_class(self)
     |      Return window class name of this widget.
     |
     |  winfo_colormapfull(self)
     |      Return True if at the last color request the colormap was full.
     |
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |
     |  winfo_height(self)
     |      Return height of this widget.
     |
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |
     |  winfo_name(self)
     |      Return the name of this widget.
     |
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |
     |  winfo_rgb(self, color)
     |      Return a tuple of integer RGB values in range(65536) for color in this widget.
     |
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_width(self)
     |      Return the width of this widget.
     |
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |
     |  forget = pack_forget(self)
     |
     |  info = pack_info(self)
     |
     |  pack = pack_configure(self, cnf={}, **kw)
     |
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |
     |  place = place_configure(self, cnf={}, **kw)
     |
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |
     |  place_forget(self)
     |      Unmap this widget.
     |
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |
     |  grid = grid_configure(self, cnf={}, **kw)
     |
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |
     |  grid_forget(self)
     |      Unmap this widget.
     |
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |
     |  location = grid_location(self, x, y)
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from XView:
     |
     |  xview(self, *args)
     |      Query and change the horizontal position of the view.
     |
     |  xview_moveto(self, fraction)
     |      Adjusts the view in the window so that FRACTION of the
     |      total width of the canvas is off-screen to the left.
     |
     |  xview_scroll(self, number, what)
     |      Shift the x-view according to NUMBER which is measured in "units"
     |      or "pages" (WHAT).

    class Event(builtins.object)
     |  Container for the properties of an event.
     |
     |  Instances of this type are generated if one of the following events occurs:
     |
     |  KeyPress, KeyRelease - for keyboard events
     |  ButtonPress, ButtonRelease, Motion, Enter, Leave, MouseWheel - for mouse events
     |  Visibility, Unmap, Map, Expose, FocusIn, FocusOut, Circulate,
     |  Colormap, Gravity, Reparent, Property, Destroy, Activate,
     |  Deactivate - for window events.
     |
     |  If a callback function for one of these events is registered
     |  using bind, bind_all, bind_class, or tag_bind, the callback is
     |  called with an Event as first argument. It will have the
     |  following attributes (in braces are the event types for which
     |  the attribute is valid):
     |
     |      serial - serial number of event
     |  num - mouse button pressed (ButtonPress, ButtonRelease)
     |  focus - whether the window has the focus (Enter, Leave)
     |  height - height of the exposed window (Configure, Expose)
     |  width - width of the exposed window (Configure, Expose)
     |  keycode - keycode of the pressed key (KeyPress, KeyRelease)
     |  state - state of the event as a number (ButtonPress, ButtonRelease,
     |                          Enter, KeyPress, KeyRelease,
     |                          Leave, Motion)
     |  state - state as a string (Visibility)
     |  time - when the event occurred
     |  x - x-position of the mouse
     |  y - y-position of the mouse
     |  x_root - x-position of the mouse on the screen
     |           (ButtonPress, ButtonRelease, KeyPress, KeyRelease, Motion)
     |  y_root - y-position of the mouse on the screen
     |           (ButtonPress, ButtonRelease, KeyPress, KeyRelease, Motion)
     |  char - pressed character (KeyPress, KeyRelease)
     |  send_event - see X/Windows documentation
     |  keysym - keysym of the event as a string (KeyPress, KeyRelease)
     |  keysym_num - keysym of the event as a number (KeyPress, KeyRelease)
     |  type - type of the event as a number
     |  widget - widget in which the event occurred
     |  delta - delta of wheel movement (MouseWheel)
     |
     |  Methods defined here:
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object

    class EventType(enum.StrEnum)
     |  EventType(*values)
     |
     |  An enumeration.
     |
     |  Method resolution order:
     |      EventType
     |      enum.StrEnum
     |      builtins.str
     |      enum.ReprEnum
     |      enum.Enum
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __format__(self, format_spec, /)
     |      Return a formatted version of the string as described by format_spec.
     |
     |  __new__(cls, value)
     |      Create and return a new object.  See help(type) for accurate signature.
     |
     |  __str__(self, /)
     |      Return str(self).
     |
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |
     |  Activate = <EventType.Activate: '36'>
     |
     |  ButtonPress = <EventType.ButtonPress: '4'>
     |
     |  ButtonRelease = <EventType.ButtonRelease: '5'>
     |
     |  Circulate = <EventType.Circulate: '26'>
     |
     |  CirculateRequest = <EventType.CirculateRequest: '27'>
     |
     |  ClientMessage = <EventType.ClientMessage: '33'>
     |
     |  Colormap = <EventType.Colormap: '32'>
     |
     |  Configure = <EventType.Configure: '22'>
     |
     |  ConfigureRequest = <EventType.ConfigureRequest: '23'>
     |
     |  Create = <EventType.Create: '16'>
     |
     |  Deactivate = <EventType.Deactivate: '37'>
     |
     |  Destroy = <EventType.Destroy: '17'>
     |
     |  Enter = <EventType.Enter: '7'>
     |
     |  Expose = <EventType.Expose: '12'>
     |
     |  FocusIn = <EventType.FocusIn: '9'>
     |
     |  FocusOut = <EventType.FocusOut: '10'>
     |
     |  GraphicsExpose = <EventType.GraphicsExpose: '13'>
     |
     |  Gravity = <EventType.Gravity: '24'>
     |
     |  KeyPress = <EventType.KeyPress: '2'>
     |
     |  KeyRelease = <EventType.KeyRelease: '3'>
     |
     |  Keymap = <EventType.Keymap: '11'>
     |
     |  Leave = <EventType.Leave: '8'>
     |
     |  Map = <EventType.Map: '19'>
     |
     |  MapRequest = <EventType.MapRequest: '20'>
     |
     |  Mapping = <EventType.Mapping: '34'>
     |
     |  Motion = <EventType.Motion: '6'>
     |
     |  MouseWheel = <EventType.MouseWheel: '38'>
     |
     |  NoExpose = <EventType.NoExpose: '14'>
     |
     |  Property = <EventType.Property: '28'>
     |
     |  Reparent = <EventType.Reparent: '21'>
     |
     |  ResizeRequest = <EventType.ResizeRequest: '25'>
     |
     |  Selection = <EventType.Selection: '31'>
     |
     |  SelectionClear = <EventType.SelectionClear: '29'>
     |
     |  SelectionRequest = <EventType.SelectionRequest: '30'>
     |
     |  Unmap = <EventType.Unmap: '18'>
     |
     |  VirtualEvent = <EventType.VirtualEvent: '35'>
     |
     |  Visibility = <EventType.Visibility: '15'>
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from enum.StrEnum:
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.str:
     |
     |  __add__(self, value, /)
     |      Return self+value.
     |
     |  __contains__(self, key, /)
     |      Return bool(key in self).
     |
     |  __eq__(self, value, /)
     |      Return self==value.
     |
     |  __ge__(self, value, /)
     |      Return self>=value.
     |
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |
     |  __getitem__(self, key, /)
     |      Return self[key].
     |
     |  __getnewargs__(...)
     |
     |  __gt__(self, value, /)
     |      Return self>value.
     |
     |  __hash__(self, /)
     |      Return hash(self).
     |
     |  __iter__(self, /)
     |      Implement iter(self).
     |
     |  __le__(self, value, /)
     |      Return self<=value.
     |
     |  __len__(self, /)
     |      Return len(self).
     |
     |  __lt__(self, value, /)
     |      Return self<value.
     |
     |  __mod__(self, value, /)
     |      Return self%value.
     |
     |  __mul__(self, value, /)
     |      Return self*value.
     |
     |  __ne__(self, value, /)
     |      Return self!=value.
     |
     |  __rmod__(self, value, /)
     |      Return value%self.
     |
     |  __rmul__(self, value, /)
     |      Return value*self.
     |
     |  __sizeof__(self, /)
     |      Return the size of the string in memory, in bytes.
     |
     |  capitalize(self, /)
     |      Return a capitalized version of the string.
     |
     |      More specifically, make the first character have upper case and the rest lower
     |      case.
     |
     |  casefold(self, /)
     |      Return a version of the string suitable for caseless comparisons.
     |
     |  center(self, width, fillchar=' ', /)
     |      Return a centered string of length width.
     |
     |      Padding is done using the specified fill character (default is a space).
     |
     |  count(...)
     |      S.count(sub[, start[, end]]) -> int
     |
     |      Return the number of non-overlapping occurrences of substring sub in
     |      string S[start:end].  Optional arguments start and end are
     |      interpreted as in slice notation.
     |
     |  encode(self, /, encoding='utf-8', errors='strict')
     |      Encode the string using the codec registered for encoding.
     |
     |      encoding
     |        The encoding in which to encode the string.
     |      errors
     |        The error handling scheme to use for encoding errors.
     |        The default is 'strict' meaning that encoding errors raise a
     |        UnicodeEncodeError.  Other possible values are 'ignore', 'replace' and
     |        'xmlcharrefreplace' as well as any other name registered with
     |        codecs.register_error that can handle UnicodeEncodeErrors.
     |
     |  endswith(...)
     |      S.endswith(suffix[, start[, end]]) -> bool
     |
     |      Return True if S ends with the specified suffix, False otherwise.
     |      With optional start, test S beginning at that position.
     |      With optional end, stop comparing S at that position.
     |      suffix can also be a tuple of strings to try.
     |
     |  expandtabs(self, /, tabsize=8)
     |      Return a copy where all tab characters are expanded using spaces.
     |
     |      If tabsize is not given, a tab size of 8 characters is assumed.
     |
     |  find(...)
     |      S.find(sub[, start[, end]]) -> int
     |
     |      Return the lowest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |
     |      Return -1 on failure.
     |
     |  format(...)
     |      S.format(*args, **kwargs) -> str
     |
     |      Return a formatted version of S, using substitutions from args and kwargs.
     |      The substitutions are identified by braces ('{' and '}').
     |
     |  format_map(...)
     |      S.format_map(mapping) -> str
     |
     |      Return a formatted version of S, using substitutions from mapping.
     |      The substitutions are identified by braces ('{' and '}').
     |
     |  index(...)
     |      S.index(sub[, start[, end]]) -> int
     |
     |      Return the lowest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |
     |      Raises ValueError when the substring is not found.
     |
     |  isalnum(self, /)
     |      Return True if the string is an alpha-numeric string, False otherwise.
     |
     |      A string is alpha-numeric if all characters in the string are alpha-numeric and
     |      there is at least one character in the string.
     |
     |  isalpha(self, /)
     |      Return True if the string is an alphabetic string, False otherwise.
     |
     |      A string is alphabetic if all characters in the string are alphabetic and there
     |      is at least one character in the string.
     |
     |  isascii(self, /)
     |      Return True if all characters in the string are ASCII, False otherwise.
     |
     |      ASCII characters have code points in the range U+0000-U+007F.
     |      Empty string is ASCII too.
     |
     |  isdecimal(self, /)
     |      Return True if the string is a decimal string, False otherwise.
     |
     |      A string is a decimal string if all characters in the string are decimal and
     |      there is at least one character in the string.
     |
     |  isdigit(self, /)
     |      Return True if the string is a digit string, False otherwise.
     |
     |      A string is a digit string if all characters in the string are digits and there
     |      is at least one character in the string.
     |
     |  isidentifier(self, /)
     |      Return True if the string is a valid Python identifier, False otherwise.
     |
     |      Call keyword.iskeyword(s) to test whether string s is a reserved identifier,
     |      such as "def" or "class".
     |
     |  islower(self, /)
     |      Return True if the string is a lowercase string, False otherwise.
     |
     |      A string is lowercase if all cased characters in the string are lowercase and
     |      there is at least one cased character in the string.
     |
     |  isnumeric(self, /)
     |      Return True if the string is a numeric string, False otherwise.
     |
     |      A string is numeric if all characters in the string are numeric and there is at
     |      least one character in the string.
     |
     |  isprintable(self, /)
     |      Return True if the string is printable, False otherwise.
     |
     |      A string is printable if all of its characters are considered printable in
     |      repr() or if it is empty.
     |
     |  isspace(self, /)
     |      Return True if the string is a whitespace string, False otherwise.
     |
     |      A string is whitespace if all characters in the string are whitespace and there
     |      is at least one character in the string.
     |
     |  istitle(self, /)
     |      Return True if the string is a title-cased string, False otherwise.
     |
     |      In a title-cased string, upper- and title-case characters may only
     |      follow uncased characters and lowercase characters only cased ones.
     |
     |  isupper(self, /)
     |      Return True if the string is an uppercase string, False otherwise.
     |
     |      A string is uppercase if all cased characters in the string are uppercase and
     |      there is at least one cased character in the string.
     |
     |  join(self, iterable, /)
     |      Concatenate any number of strings.
     |
     |      The string whose method is called is inserted in between each given string.
     |      The result is returned as a new string.
     |
     |      Example: '.'.join(['ab', 'pq', 'rs']) -> 'ab.pq.rs'
     |
     |  ljust(self, width, fillchar=' ', /)
     |      Return a left-justified string of length width.
     |
     |      Padding is done using the specified fill character (default is a space).
     |
     |  lower(self, /)
     |      Return a copy of the string converted to lowercase.
     |
     |  lstrip(self, chars=None, /)
     |      Return a copy of the string with leading whitespace removed.
     |
     |      If chars is given and not None, remove characters in chars instead.
     |
     |  partition(self, sep, /)
     |      Partition the string into three parts using the given separator.
     |
     |      This will search for the separator in the string.  If the separator is found,
     |      returns a 3-tuple containing the part before the separator, the separator
     |      itself, and the part after it.
     |
     |      If the separator is not found, returns a 3-tuple containing the original string
     |      and two empty strings.
     |
     |  removeprefix(self, prefix, /)
     |      Return a str with the given prefix string removed if present.
     |
     |      If the string starts with the prefix string, return string[len(prefix):].
     |      Otherwise, return a copy of the original string.
     |
     |  removesuffix(self, suffix, /)
     |      Return a str with the given suffix string removed if present.
     |
     |      If the string ends with the suffix string and that suffix is not empty,
     |      return string[:-len(suffix)]. Otherwise, return a copy of the original
     |      string.
     |
     |  replace(self, old, new, count=-1, /)
     |      Return a copy with all occurrences of substring old replaced by new.
     |
     |        count
     |          Maximum number of occurrences to replace.
     |          -1 (the default value) means replace all occurrences.
     |
     |      If the optional argument count is given, only the first count occurrences are
     |      replaced.
     |
     |  rfind(...)
     |      S.rfind(sub[, start[, end]]) -> int
     |
     |      Return the highest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |
     |      Return -1 on failure.
     |
     |  rindex(...)
     |      S.rindex(sub[, start[, end]]) -> int
     |
     |      Return the highest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |
     |      Raises ValueError when the substring is not found.
     |
     |  rjust(self, width, fillchar=' ', /)
     |      Return a right-justified string of length width.
     |
     |      Padding is done using the specified fill character (default is a space).
     |
     |  rpartition(self, sep, /)
     |      Partition the string into three parts using the given separator.
     |
     |      This will search for the separator in the string, starting at the end. If
     |      the separator is found, returns a 3-tuple containing the part before the
     |      separator, the separator itself, and the part after it.
     |
     |      If the separator is not found, returns a 3-tuple containing two empty strings
     |      and the original string.
     |
     |  rsplit(self, /, sep=None, maxsplit=-1)
     |      Return a list of the substrings in the string, using sep as the separator string.
     |
     |        sep
     |          The separator used to split the string.
     |
     |          When set to None (the default value), will split on any whitespace
     |          character (including \n \r \t \f and spaces) and will discard
     |          empty strings from the result.
     |        maxsplit
     |          Maximum number of splits.
     |          -1 (the default value) means no limit.
     |
     |      Splitting starts at the end of the string and works to the front.
     |
     |  rstrip(self, chars=None, /)
     |      Return a copy of the string with trailing whitespace removed.
     |
     |      If chars is given and not None, remove characters in chars instead.
     |
     |  split(self, /, sep=None, maxsplit=-1)
     |      Return a list of the substrings in the string, using sep as the separator string.
     |
     |        sep
     |          The separator used to split the string.
     |
     |          When set to None (the default value), will split on any whitespace
     |          character (including \n \r \t \f and spaces) and will discard
     |          empty strings from the result.
     |        maxsplit
     |          Maximum number of splits.
     |          -1 (the default value) means no limit.
     |
     |      Splitting starts at the front of the string and works to the end.
     |
     |      Note, str.split() is mainly useful for data that has been intentionally
     |      delimited.  With natural text that includes punctuation, consider using
     |      the regular expression module.
     |
     |  splitlines(self, /, keepends=False)
     |      Return a list of the lines in the string, breaking at line boundaries.
     |
     |      Line breaks are not included in the resulting list unless keepends is given and
     |      true.
     |
     |  startswith(...)
     |      S.startswith(prefix[, start[, end]]) -> bool
     |
     |      Return True if S starts with the specified prefix, False otherwise.
     |      With optional start, test S beginning at that position.
     |      With optional end, stop comparing S at that position.
     |      prefix can also be a tuple of strings to try.
     |
     |  strip(self, chars=None, /)
     |      Return a copy of the string with leading and trailing whitespace removed.
     |
     |      If chars is given and not None, remove characters in chars instead.
     |
     |  swapcase(self, /)
     |      Convert uppercase characters to lowercase and lowercase characters to uppercase.
     |
     |  title(self, /)
     |      Return a version of the string where each word is titlecased.
     |
     |      More specifically, words start with uppercased characters and all remaining
     |      cased characters have lower case.
     |
     |  translate(self, table, /)
     |      Replace each character in the string using the given translation table.
     |
     |        table
     |          Translation table, which must be a mapping of Unicode ordinals to
     |          Unicode ordinals, strings, or None.
     |
     |      The table must implement lookup/indexing via __getitem__, for instance a
     |      dictionary or list.  If this operation raises LookupError, the character is
     |      left untouched.  Characters mapped to None are deleted.
     |
     |  upper(self, /)
     |      Return a copy of the string converted to uppercase.
     |
     |  zfill(self, width, /)
     |      Pad a numeric string with zeros on the left, to fill a field of the given width.
     |
     |      The string is never truncated.
     |
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.str:
     |
     |  maketrans(...)
     |      Return a translation table usable for str.translate().
     |
     |      If there is only one argument, it must be a dictionary mapping Unicode
     |      ordinals (integers) or characters to Unicode ordinals, strings or None.
     |      Character keys will be then converted to ordinals.
     |      If there are two arguments, they must be strings of equal length, and
     |      in the resulting dictionary, each character in x will be mapped to the
     |      character at the same position in y. If there is a third argument, it
     |      must be a string, whose characters will be mapped to None in the result.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from enum.Enum:
     |
     |  __dir__(self)
     |      Returns public methods and other interesting attributes.
     |
     |  __init__(self, *args, **kwds)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  __reduce_ex__(self, proto)
     |      Helper for pickle.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from enum.Enum:
     |
     |  name
     |      The name of the Enum member.
     |
     |  value
     |      The value of the Enum member.
     |
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from enum.EnumType:
     |
     |  __members__
     |      Returns a mapping of member name->value.
     |
     |      This mapping lists all enum members, including aliases. Note that this
     |      is a read-only view of the internal mapping.

    class Frame(Widget)
     |  Frame(master=None, cnf={}, **kw)
     |
     |  Frame widget which may contain other widgets and can have a 3D border.
     |
     |  Method resolution order:
     |      Frame
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct a frame widget with the parent MASTER.
     |
     |      Valid resource names: background, bd, bg, borderwidth, class,
     |      colormap, container, cursor, height, highlightbackground,
     |      highlightcolor, highlightthickness, relief, takefocus, visual, width.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |
     |  __getitem__ = cget(self, key)
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  __setitem__(self, key, value)
     |
     |  __str__(self)
     |      Return the window path name of this widget.
     |
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |
     |  anchor = grid_anchor(self, anchor=None)
     |
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |
     |      This command is equivalent to:
     |
     |      selection_get(CLIPBOARD)
     |
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |
     |  config = configure(self, cnf=None, **kw)
     |
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |
     |  deletecommand(self, name)
     |      Internal function.
     |
     |      Delete the Tcl command provided in NAME.
     |
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |
     |  focus = focus_set(self)
     |
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |
     |      Return None if the application does not have the focus.
     |
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |
     |  focus_set(self)
     |      Direct input focus to this widget.
     |
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |
     |  getdouble(self, s)
     |
     |  getint(self, s)
     |
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |
     |  grab_set(self)
     |      Set grab for this widget.
     |
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |
     |      The default anchor is nw.
     |
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  image_names(self)
     |      Return a list of all existing image names.
     |
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |
     |  info_patchlevel(self)
     |      Returns the exact version of the Tcl library.
     |
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |
     |  lift = tkraise(self, aboveThis=None)
     |
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |
     |  option_clear(self)
     |      Clear the option database.
     |
     |      It will be reloaded if option_add is called.
     |
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |
     |      Values with higher priority override lower values.
     |
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |
     |      An optional second parameter gives the numeric
     |      priority.
     |
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |
     |  register = _register(self, func, subst=None, needcleanup=1)
     |
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |
     |  size = grid_size(self)
     |
     |  slaves = pack_slaves(self)
     |
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget the event SEQUENCE.
     |
     |      If FUNCID is given, only unbind the function identified with FUNCID
     |      and also delete the corresponding Tcl command.
     |
     |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
     |      unbound.
     |
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |
     |      If no parameter is given self is used.
     |
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |
     |      If no parameter is given self is used.
     |
     |  waitvar = wait_variable(self, name='PY_VAR')
     |
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |
     |  winfo_class(self)
     |      Return window class name of this widget.
     |
     |  winfo_colormapfull(self)
     |      Return True if at the last color request the colormap was full.
     |
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |
     |  winfo_height(self)
     |      Return height of this widget.
     |
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |
     |  winfo_name(self)
     |      Return the name of this widget.
     |
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |
     |  winfo_rgb(self, color)
     |      Return a tuple of integer RGB values in range(65536) for color in this widget.
     |
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_width(self)
     |      Return the width of this widget.
     |
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |
     |  forget = pack_forget(self)
     |
     |  info = pack_info(self)
     |
     |  pack = pack_configure(self, cnf={}, **kw)
     |
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |
     |  place = place_configure(self, cnf={}, **kw)
     |
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |
     |  place_forget(self)
     |      Unmap this widget.
     |
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |
     |  grid = grid_configure(self, cnf={}, **kw)
     |
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |
     |  grid_forget(self)
     |      Unmap this widget.
     |
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |
     |  location = grid_location(self, x, y)

    class Grid(builtins.object)
     |  Geometry manager Grid.
     |
     |  Base class to use the methods grid_* in every widget.
     |
     |  Methods defined here:
     |
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |
     |  config = grid_configure(self, cnf={}, **kw)
     |
     |  configure = grid_configure(self, cnf={}, **kw)
     |
     |  forget = grid_forget(self)
     |
     |  grid = grid_configure(self, cnf={}, **kw)
     |
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |
     |  grid_forget(self)
     |      Unmap this widget.
     |
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  info = grid_info(self)
     |
     |  location = grid_location(self, x, y)
     |
     |  propagate = grid_propagate(self, flag=['_noarg_'])
     |
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |
     |  size = grid_size(self)
     |
     |  slaves = grid_slaves(self, row=None, column=None)
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object

    class Image(builtins.object)
     |  Image(imgtype, name=None, cnf={}, master=None, **kw)
     |
     |  Base class for images.
     |
     |  Methods defined here:
     |
     |  __del__(self)
     |
     |  __getitem__(self, key)
     |
     |  __init__(self, imgtype, name=None, cnf={}, master=None, **kw)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  __setitem__(self, key, value)
     |
     |  __str__(self)
     |      Return str(self).
     |
     |  config = configure(self, **kw)
     |
     |  configure(self, **kw)
     |      Configure the image.
     |
     |  height(self)
     |      Return the height of the image.
     |
     |  type(self)
     |      Return the type of the image, e.g. "photo" or "bitmap".
     |
     |  width(self)
     |      Return the width of the image.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object

    class IntVar(Variable)
     |  IntVar(master=None, value=None, name=None)
     |
     |  Value holder for integer variables.
     |
     |  Method resolution order:
     |      IntVar
     |      Variable
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, master=None, value=None, name=None)
     |      Construct an integer variable.
     |
     |      MASTER can be given as master widget.
     |      VALUE is an optional value (defaults to 0)
     |      NAME is an optional Tcl name (defaults to PY_VARnum).
     |
     |      If NAME matches an existing variable and VALUE is omitted
     |      then the existing value is retained.
     |
     |  get(self)
     |      Return the value of the variable as an integer.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Variable:
     |
     |  __del__(self)
     |      Unset the variable in Tcl.
     |
     |  __eq__(self, other)
     |      Return self==value.
     |
     |  __str__(self)
     |      Return the name of the variable in Tcl.
     |
     |  initialize = set(self, value)
     |
     |  set(self, value)
     |      Set the variable to VALUE.
     |
     |  trace = trace_variable(self, mode, callback)
     |
     |  trace_add(self, mode, callback)
     |      Define a trace callback for the variable.
     |
     |      Mode is one of "read", "write", "unset", or a list or tuple of
     |      such strings.
     |      Callback must be a function which is called when the variable is
     |      read, written or unset.
     |
     |      Return the name of the callback.
     |
     |  trace_info(self)
     |      Return all trace callback information.
     |
     |  trace_remove(self, mode, cbname)
     |      Delete the trace callback for a variable.
     |
     |      Mode is one of "read", "write", "unset" or a list or tuple of
     |      such strings.  Must be same as were specified in trace_add().
     |      cbname is the name of the callback returned from trace_add().
     |
     |  trace_variable(self, mode, callback)
     |      Define a trace callback for the variable.
     |
     |      MODE is one of "r", "w", "u" for read, write, undefine.
     |      CALLBACK must be a function which is called when
     |      the variable is read, written or undefined.
     |
     |      Return the name of the callback.
     |
     |      This deprecated method wraps a deprecated Tcl method that will
     |      likely be removed in the future.  Use trace_add() instead.
     |
     |  trace_vdelete(self, mode, cbname)
     |      Delete the trace callback for a variable.
     |
     |      MODE is one of "r", "w", "u" for read, write, undefine.
     |      CBNAME is the name of the callback returned from trace_variable or trace.
     |
     |      This deprecated method wraps a deprecated Tcl method that will
     |      likely be removed in the future.  Use trace_remove() instead.
     |
     |  trace_vinfo(self)
     |      Return all trace callback information.
     |
     |      This deprecated method wraps a deprecated Tcl method that will
     |      likely be removed in the future.  Use trace_info() instead.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Variable:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Variable:
     |
     |  __hash__ = None

    class Label(Widget)
     |  Label(master=None, cnf={}, **kw)
     |
     |  Label widget which can display text and bitmaps.
     |
     |  Method resolution order:
     |      Label
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct a label widget with the parent MASTER.
     |
     |      STANDARD OPTIONS
     |
     |          activebackground, activeforeground, anchor,
     |          background, bitmap, borderwidth, cursor,
     |          disabledforeground, font, foreground,
     |          highlightbackground, highlightcolor,
     |          highlightthickness, image, justify,
     |          padx, pady, relief, takefocus, text,
     |          textvariable, underline, wraplength
     |
     |      WIDGET-SPECIFIC OPTIONS
     |
     |          height, state, width
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |
     |  __getitem__ = cget(self, key)
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  __setitem__(self, key, value)
     |
     |  __str__(self)
     |      Return the window path name of this widget.
     |
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |
     |  anchor = grid_anchor(self, anchor=None)
     |
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |
     |      This command is equivalent to:
     |
     |      selection_get(CLIPBOARD)
     |
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |
     |  config = configure(self, cnf=None, **kw)
     |
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |
     |  deletecommand(self, name)
     |      Internal function.
     |
     |      Delete the Tcl command provided in NAME.
     |
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |
     |  focus = focus_set(self)
     |
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |
     |      Return None if the application does not have the focus.
     |
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |
     |  focus_set(self)
     |      Direct input focus to this widget.
     |
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |
     |  getdouble(self, s)
     |
     |  getint(self, s)
     |
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |
     |  grab_set(self)
     |      Set grab for this widget.
     |
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |
     |      The default anchor is nw.
     |
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  image_names(self)
     |      Return a list of all existing image names.
     |
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |
     |  info_patchlevel(self)
     |      Returns the exact version of the Tcl library.
     |
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |
     |  lift = tkraise(self, aboveThis=None)
     |
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |
     |  option_clear(self)
     |      Clear the option database.
     |
     |      It will be reloaded if option_add is called.
     |
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |
     |      Values with higher priority override lower values.
     |
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |
     |      An optional second parameter gives the numeric
     |      priority.
     |
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |
     |  register = _register(self, func, subst=None, needcleanup=1)
     |
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |
     |  size = grid_size(self)
     |
     |  slaves = pack_slaves(self)
     |
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget the event SEQUENCE.
     |
     |      If FUNCID is given, only unbind the function identified with FUNCID
     |      and also delete the corresponding Tcl command.
     |
     |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
     |      unbound.
     |
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |
     |      If no parameter is given self is used.
     |
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |
     |      If no parameter is given self is used.
     |
     |  waitvar = wait_variable(self, name='PY_VAR')
     |
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |
     |  winfo_class(self)
     |      Return window class name of this widget.
     |
     |  winfo_colormapfull(self)
     |      Return True if at the last color request the colormap was full.
     |
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |
     |  winfo_height(self)
     |      Return height of this widget.
     |
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |
     |  winfo_name(self)
     |      Return the name of this widget.
     |
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |
     |  winfo_rgb(self, color)
     |      Return a tuple of integer RGB values in range(65536) for color in this widget.
     |
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_width(self)
     |      Return the width of this widget.
     |
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |
     |  forget = pack_forget(self)
     |
     |  info = pack_info(self)
     |
     |  pack = pack_configure(self, cnf={}, **kw)
     |
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |
     |  place = place_configure(self, cnf={}, **kw)
     |
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |
     |  place_forget(self)
     |      Unmap this widget.
     |
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |
     |  grid = grid_configure(self, cnf={}, **kw)
     |
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |
     |  grid_forget(self)
     |      Unmap this widget.
     |
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |
     |  location = grid_location(self, x, y)

    class LabelFrame(Widget)
     |  LabelFrame(master=None, cnf={}, **kw)
     |
     |  labelframe widget.
     |
     |  Method resolution order:
     |      LabelFrame
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct a labelframe widget with the parent MASTER.
     |
     |      STANDARD OPTIONS
     |
     |          borderwidth, cursor, font, foreground,
     |          highlightbackground, highlightcolor,
     |          highlightthickness, padx, pady, relief,
     |          takefocus, text
     |
     |      WIDGET-SPECIFIC OPTIONS
     |
     |          background, class, colormap, container,
     |          height, labelanchor, labelwidget,
     |          visual, width
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |
     |  __getitem__ = cget(self, key)
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  __setitem__(self, key, value)
     |
     |  __str__(self)
     |      Return the window path name of this widget.
     |
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |
     |  anchor = grid_anchor(self, anchor=None)
     |
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |
     |      This command is equivalent to:
     |
     |      selection_get(CLIPBOARD)
     |
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |
     |  config = configure(self, cnf=None, **kw)
     |
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |
     |  deletecommand(self, name)
     |      Internal function.
     |
     |      Delete the Tcl command provided in NAME.
     |
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |
     |  focus = focus_set(self)
     |
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |
     |      Return None if the application does not have the focus.
     |
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |
     |  focus_set(self)
     |      Direct input focus to this widget.
     |
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |
     |  getdouble(self, s)
     |
     |  getint(self, s)
     |
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |
     |  grab_set(self)
     |      Set grab for this widget.
     |
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |
     |      The default anchor is nw.
     |
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  image_names(self)
     |      Return a list of all existing image names.
     |
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |
     |  info_patchlevel(self)
     |      Returns the exact version of the Tcl library.
     |
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |
     |  lift = tkraise(self, aboveThis=None)
     |
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |
     |  option_clear(self)
     |      Clear the option database.
     |
     |      It will be reloaded if option_add is called.
     |
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |
     |      Values with higher priority override lower values.
     |
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |
     |      An optional second parameter gives the numeric
     |      priority.
     |
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |
     |  register = _register(self, func, subst=None, needcleanup=1)
     |
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |
     |  size = grid_size(self)
     |
     |  slaves = pack_slaves(self)
     |
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget the event SEQUENCE.
     |
     |      If FUNCID is given, only unbind the function identified with FUNCID
     |      and also delete the corresponding Tcl command.
     |
     |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
     |      unbound.
     |
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |
     |      If no parameter is given self is used.
     |
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |
     |      If no parameter is given self is used.
     |
     |  waitvar = wait_variable(self, name='PY_VAR')
     |
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |
     |  winfo_class(self)
     |      Return window class name of this widget.
     |
     |  winfo_colormapfull(self)
     |      Return True if at the last color request the colormap was full.
     |
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |
     |  winfo_height(self)
     |      Return height of this widget.
     |
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |
     |  winfo_name(self)
     |      Return the name of this widget.
     |
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |
     |  winfo_rgb(self, color)
     |      Return a tuple of integer RGB values in range(65536) for color in this widget.
     |
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_width(self)
     |      Return the width of this widget.
     |
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |
     |  forget = pack_forget(self)
     |
     |  info = pack_info(self)
     |
     |  pack = pack_configure(self, cnf={}, **kw)
     |
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |
     |  place = place_configure(self, cnf={}, **kw)
     |
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |
     |  place_forget(self)
     |      Unmap this widget.
     |
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |
     |  grid = grid_configure(self, cnf={}, **kw)
     |
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |
     |  grid_forget(self)
     |      Unmap this widget.
     |
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |
     |  location = grid_location(self, x, y)

    class Listbox(Widget, XView, YView)
     |  Listbox(master=None, cnf={}, **kw)
     |
     |  Listbox widget which can display a list of strings.
     |
     |  Method resolution order:
     |      Listbox
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      XView
     |      YView
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct a listbox widget with the parent MASTER.
     |
     |      Valid resource names: background, bd, bg, borderwidth, cursor,
     |      exportselection, fg, font, foreground, height, highlightbackground,
     |      highlightcolor, highlightthickness, relief, selectbackground,
     |      selectborderwidth, selectforeground, selectmode, setgrid, takefocus,
     |      width, xscrollcommand, yscrollcommand, listvariable.
     |
     |  activate(self, index)
     |      Activate item identified by INDEX.
     |
     |  bbox(self, index)
     |      Return a tuple of X1,Y1,X2,Y2 coordinates for a rectangle
     |      which encloses the item identified by the given index.
     |
     |  curselection(self)
     |      Return the indices of currently selected item.
     |
     |  delete(self, first, last=None)
     |      Delete items from FIRST to LAST (included).
     |
     |  get(self, first, last=None)
     |      Get list of items from FIRST to LAST (included).
     |
     |  index(self, index)
     |      Return index of item identified with INDEX.
     |
     |  insert(self, index, *elements)
     |      Insert ELEMENTS at INDEX.
     |
     |  itemcget(self, index, option)
     |      Return the resource value for an ITEM and an OPTION.
     |
     |  itemconfig = itemconfigure(self, index, cnf=None, **kw)
     |
     |  itemconfigure(self, index, cnf=None, **kw)
     |      Configure resources of an ITEM.
     |
     |      The values for resources are specified as keyword arguments.
     |      To get an overview about the allowed keyword arguments
     |      call the method without arguments.
     |      Valid resource names: background, bg, foreground, fg,
     |      selectbackground, selectforeground.
     |
     |  nearest(self, y)
     |      Get index of item which is nearest to y coordinate Y.
     |
     |  scan_dragto(self, x, y)
     |      Adjust the view of the listbox to 10 times the
     |      difference between X and Y and the coordinates given in
     |      scan_mark.
     |
     |  scan_mark(self, x, y)
     |      Remember the current X, Y coordinates.
     |
     |  see(self, index)
     |      Scroll such that INDEX is visible.
     |
     |  select_anchor = selection_anchor(self, index)
     |
     |  select_clear = selection_clear(self, first, last=None)
     |
     |  select_includes = selection_includes(self, index)
     |
     |  select_set = selection_set(self, first, last=None)
     |
     |  selection_anchor(self, index)
     |      Set the fixed end oft the selection to INDEX.
     |
     |  selection_clear(self, first, last=None)
     |      Clear the selection from FIRST to LAST (included).
     |
     |  selection_includes(self, index)
     |      Return True if INDEX is part of the selection.
     |
     |  selection_set(self, first, last=None)
     |      Set the selection from FIRST to LAST (included) without
     |      changing the currently selected elements.
     |
     |  size(self)
     |      Return the number of elements in the listbox.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |
     |  __getitem__ = cget(self, key)
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  __setitem__(self, key, value)
     |
     |  __str__(self)
     |      Return the window path name of this widget.
     |
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |
     |  anchor = grid_anchor(self, anchor=None)
     |
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |
     |      This command is equivalent to:
     |
     |      selection_get(CLIPBOARD)
     |
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |
     |  config = configure(self, cnf=None, **kw)
     |
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |
     |  deletecommand(self, name)
     |      Internal function.
     |
     |      Delete the Tcl command provided in NAME.
     |
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |
     |  focus = focus_set(self)
     |
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |
     |      Return None if the application does not have the focus.
     |
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |
     |  focus_set(self)
     |      Direct input focus to this widget.
     |
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |
     |  getdouble(self, s)
     |
     |  getint(self, s)
     |
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |
     |  grab_set(self)
     |      Set grab for this widget.
     |
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |
     |      The default anchor is nw.
     |
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  image_names(self)
     |      Return a list of all existing image names.
     |
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |
     |  info_patchlevel(self)
     |      Returns the exact version of the Tcl library.
     |
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |
     |  lift = tkraise(self, aboveThis=None)
     |
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |
     |  option_clear(self)
     |      Clear the option database.
     |
     |      It will be reloaded if option_add is called.
     |
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |
     |      Values with higher priority override lower values.
     |
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |
     |      An optional second parameter gives the numeric
     |      priority.
     |
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |
     |  register = _register(self, func, subst=None, needcleanup=1)
     |
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |
     |  slaves = pack_slaves(self)
     |
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget the event SEQUENCE.
     |
     |      If FUNCID is given, only unbind the function identified with FUNCID
     |      and also delete the corresponding Tcl command.
     |
     |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
     |      unbound.
     |
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |
     |      If no parameter is given self is used.
     |
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |
     |      If no parameter is given self is used.
     |
     |  waitvar = wait_variable(self, name='PY_VAR')
     |
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |
     |  winfo_class(self)
     |      Return window class name of this widget.
     |
     |  winfo_colormapfull(self)
     |      Return True if at the last color request the colormap was full.
     |
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |
     |  winfo_height(self)
     |      Return height of this widget.
     |
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |
     |  winfo_name(self)
     |      Return the name of this widget.
     |
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |
     |  winfo_rgb(self, color)
     |      Return a tuple of integer RGB values in range(65536) for color in this widget.
     |
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_width(self)
     |      Return the width of this widget.
     |
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |
     |  forget = pack_forget(self)
     |
     |  info = pack_info(self)
     |
     |  pack = pack_configure(self, cnf={}, **kw)
     |
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |
     |  place = place_configure(self, cnf={}, **kw)
     |
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |
     |  place_forget(self)
     |      Unmap this widget.
     |
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |
     |  grid = grid_configure(self, cnf={}, **kw)
     |
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |
     |  grid_forget(self)
     |      Unmap this widget.
     |
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |
     |  location = grid_location(self, x, y)
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from XView:
     |
     |  xview(self, *args)
     |      Query and change the horizontal position of the view.
     |
     |  xview_moveto(self, fraction)
     |      Adjusts the view in the window so that FRACTION of the
     |      total width of the canvas is off-screen to the left.
     |
     |  xview_scroll(self, number, what)
     |      Shift the x-view according to NUMBER which is measured in "units"
     |      or "pages" (WHAT).
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from YView:
     |
     |  yview(self, *args)
     |      Query and change the vertical position of the view.
     |
     |  yview_moveto(self, fraction)
     |      Adjusts the view in the window so that FRACTION of the
     |      total height of the canvas is off-screen to the top.
     |
     |  yview_scroll(self, number, what)
     |      Shift the y-view according to NUMBER which is measured in
     |      "units" or "pages" (WHAT).

    class Menu(Widget)
     |  Menu(master=None, cnf={}, **kw)
     |
     |  Menu widget which allows displaying menu bars, pull-down menus and pop-up menus.
     |
     |  Method resolution order:
     |      Menu
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct menu widget with the parent MASTER.
     |
     |      Valid resource names: activebackground, activeborderwidth,
     |      activeforeground, background, bd, bg, borderwidth, cursor,
     |      disabledforeground, fg, font, foreground, postcommand, relief,
     |      selectcolor, takefocus, tearoff, tearoffcommand, title, type.
     |
     |  activate(self, index)
     |      Activate entry at INDEX.
     |
     |  add(self, itemType, cnf={}, **kw)
     |      Internal function.
     |
     |  add_cascade(self, cnf={}, **kw)
     |      Add hierarchical menu item.
     |
     |  add_checkbutton(self, cnf={}, **kw)
     |      Add checkbutton menu item.
     |
     |  add_command(self, cnf={}, **kw)
     |      Add command menu item.
     |
     |  add_radiobutton(self, cnf={}, **kw)
     |      Add radio menu item.
     |
     |  add_separator(self, cnf={}, **kw)
     |      Add separator.
     |
     |  delete(self, index1, index2=None)
     |      Delete menu items between INDEX1 and INDEX2 (included).
     |
     |  entrycget(self, index, option)
     |      Return the resource value of a menu item for OPTION at INDEX.
     |
     |  entryconfig = entryconfigure(self, index, cnf=None, **kw)
     |
     |  entryconfigure(self, index, cnf=None, **kw)
     |      Configure a menu item at INDEX.
     |
     |  index(self, index)
     |      Return the index of a menu item identified by INDEX.
     |
     |  insert(self, index, itemType, cnf={}, **kw)
     |      Internal function.
     |
     |  insert_cascade(self, index, cnf={}, **kw)
     |      Add hierarchical menu item at INDEX.
     |
     |  insert_checkbutton(self, index, cnf={}, **kw)
     |      Add checkbutton menu item at INDEX.
     |
     |  insert_command(self, index, cnf={}, **kw)
     |      Add command menu item at INDEX.
     |
     |  insert_radiobutton(self, index, cnf={}, **kw)
     |      Add radio menu item at INDEX.
     |
     |  insert_separator(self, index, cnf={}, **kw)
     |      Add separator at INDEX.
     |
     |  invoke(self, index)
     |      Invoke a menu item identified by INDEX and execute
     |      the associated command.
     |
     |  post(self, x, y)
     |      Display a menu at position X,Y.
     |
     |  tk_popup(self, x, y, entry='')
     |      Post the menu at position X,Y with entry ENTRY.
     |
     |  type(self, index)
     |      Return the type of the menu item at INDEX.
     |
     |  unpost(self)
     |      Unmap a menu.
     |
     |  xposition(self, index)
     |      Return the x-position of the leftmost pixel of the menu item
     |      at INDEX.
     |
     |  yposition(self, index)
     |      Return the y-position of the topmost pixel of the menu item at INDEX.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |
     |  __getitem__ = cget(self, key)
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  __setitem__(self, key, value)
     |
     |  __str__(self)
     |      Return the window path name of this widget.
     |
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |
     |  anchor = grid_anchor(self, anchor=None)
     |
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |
     |      This command is equivalent to:
     |
     |      selection_get(CLIPBOARD)
     |
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |
     |  config = configure(self, cnf=None, **kw)
     |
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |
     |  deletecommand(self, name)
     |      Internal function.
     |
     |      Delete the Tcl command provided in NAME.
     |
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |
     |  focus = focus_set(self)
     |
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |
     |      Return None if the application does not have the focus.
     |
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |
     |  focus_set(self)
     |      Direct input focus to this widget.
     |
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |
     |  getdouble(self, s)
     |
     |  getint(self, s)
     |
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |
     |  grab_set(self)
     |      Set grab for this widget.
     |
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |
     |      The default anchor is nw.
     |
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  image_names(self)
     |      Return a list of all existing image names.
     |
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |
     |  info_patchlevel(self)
     |      Returns the exact version of the Tcl library.
     |
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |
     |  lift = tkraise(self, aboveThis=None)
     |
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |
     |  option_clear(self)
     |      Clear the option database.
     |
     |      It will be reloaded if option_add is called.
     |
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |
     |      Values with higher priority override lower values.
     |
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |
     |      An optional second parameter gives the numeric
     |      priority.
     |
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |
     |  register = _register(self, func, subst=None, needcleanup=1)
     |
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |
     |  size = grid_size(self)
     |
     |  slaves = pack_slaves(self)
     |
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget the event SEQUENCE.
     |
     |      If FUNCID is given, only unbind the function identified with FUNCID
     |      and also delete the corresponding Tcl command.
     |
     |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
     |      unbound.
     |
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |
     |      If no parameter is given self is used.
     |
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |
     |      If no parameter is given self is used.
     |
     |  waitvar = wait_variable(self, name='PY_VAR')
     |
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |
     |  winfo_class(self)
     |      Return window class name of this widget.
     |
     |  winfo_colormapfull(self)
     |      Return True if at the last color request the colormap was full.
     |
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |
     |  winfo_height(self)
     |      Return height of this widget.
     |
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |
     |  winfo_name(self)
     |      Return the name of this widget.
     |
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |
     |  winfo_rgb(self, color)
     |      Return a tuple of integer RGB values in range(65536) for color in this widget.
     |
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_width(self)
     |      Return the width of this widget.
     |
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |
     |  forget = pack_forget(self)
     |
     |  info = pack_info(self)
     |
     |  pack = pack_configure(self, cnf={}, **kw)
     |
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |
     |  place = place_configure(self, cnf={}, **kw)
     |
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |
     |  place_forget(self)
     |      Unmap this widget.
     |
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |
     |  grid = grid_configure(self, cnf={}, **kw)
     |
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |
     |  grid_forget(self)
     |      Unmap this widget.
     |
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |
     |  location = grid_location(self, x, y)

    class Menubutton(Widget)
     |  Menubutton(master=None, cnf={}, **kw)
     |
     |  Menubutton widget, obsolete since Tk8.0.
     |
     |  Method resolution order:
     |      Menubutton
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct a widget with the parent widget MASTER, a name WIDGETNAME
     |      and appropriate options.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |
     |  __getitem__ = cget(self, key)
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  __setitem__(self, key, value)
     |
     |  __str__(self)
     |      Return the window path name of this widget.
     |
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |
     |  anchor = grid_anchor(self, anchor=None)
     |
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |
     |      This command is equivalent to:
     |
     |      selection_get(CLIPBOARD)
     |
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |
     |  config = configure(self, cnf=None, **kw)
     |
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |
     |  deletecommand(self, name)
     |      Internal function.
     |
     |      Delete the Tcl command provided in NAME.
     |
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |
     |  focus = focus_set(self)
     |
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |
     |      Return None if the application does not have the focus.
     |
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |
     |  focus_set(self)
     |      Direct input focus to this widget.
     |
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |
     |  getdouble(self, s)
     |
     |  getint(self, s)
     |
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |
     |  grab_set(self)
     |      Set grab for this widget.
     |
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |
     |      The default anchor is nw.
     |
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  image_names(self)
     |      Return a list of all existing image names.
     |
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |
     |  info_patchlevel(self)
     |      Returns the exact version of the Tcl library.
     |
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |
     |  lift = tkraise(self, aboveThis=None)
     |
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |
     |  option_clear(self)
     |      Clear the option database.
     |
     |      It will be reloaded if option_add is called.
     |
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |
     |      Values with higher priority override lower values.
     |
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |
     |      An optional second parameter gives the numeric
     |      priority.
     |
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |
     |  register = _register(self, func, subst=None, needcleanup=1)
     |
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |
     |  size = grid_size(self)
     |
     |  slaves = pack_slaves(self)
     |
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget the event SEQUENCE.
     |
     |      If FUNCID is given, only unbind the function identified with FUNCID
     |      and also delete the corresponding Tcl command.
     |
     |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
     |      unbound.
     |
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |
     |      If no parameter is given self is used.
     |
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |
     |      If no parameter is given self is used.
     |
     |  waitvar = wait_variable(self, name='PY_VAR')
     |
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |
     |  winfo_class(self)
     |      Return window class name of this widget.
     |
     |  winfo_colormapfull(self)
     |      Return True if at the last color request the colormap was full.
     |
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |
     |  winfo_height(self)
     |      Return height of this widget.
     |
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |
     |  winfo_name(self)
     |      Return the name of this widget.
     |
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |
     |  winfo_rgb(self, color)
     |      Return a tuple of integer RGB values in range(65536) for color in this widget.
     |
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_width(self)
     |      Return the width of this widget.
     |
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |
     |  forget = pack_forget(self)
     |
     |  info = pack_info(self)
     |
     |  pack = pack_configure(self, cnf={}, **kw)
     |
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |
     |  place = place_configure(self, cnf={}, **kw)
     |
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |
     |  place_forget(self)
     |      Unmap this widget.
     |
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |
     |  grid = grid_configure(self, cnf={}, **kw)
     |
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |
     |  grid_forget(self)
     |      Unmap this widget.
     |
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |
     |  location = grid_location(self, x, y)

    class Message(Widget)
     |  Message(master=None, cnf={}, **kw)
     |
     |  Message widget to display multiline text. Obsolete since Label does it too.
     |
     |  Method resolution order:
     |      Message
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct a widget with the parent widget MASTER, a name WIDGETNAME
     |      and appropriate options.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |
     |  __getitem__ = cget(self, key)
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  __setitem__(self, key, value)
     |
     |  __str__(self)
     |      Return the window path name of this widget.
     |
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |
     |  anchor = grid_anchor(self, anchor=None)
     |
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |
     |      This command is equivalent to:
     |
     |      selection_get(CLIPBOARD)
     |
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |
     |  config = configure(self, cnf=None, **kw)
     |
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |
     |  deletecommand(self, name)
     |      Internal function.
     |
     |      Delete the Tcl command provided in NAME.
     |
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |
     |  focus = focus_set(self)
     |
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |
     |      Return None if the application does not have the focus.
     |
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |
     |  focus_set(self)
     |      Direct input focus to this widget.
     |
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |
     |  getdouble(self, s)
     |
     |  getint(self, s)
     |
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |
     |  grab_set(self)
     |      Set grab for this widget.
     |
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |
     |      The default anchor is nw.
     |
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  image_names(self)
     |      Return a list of all existing image names.
     |
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |
     |  info_patchlevel(self)
     |      Returns the exact version of the Tcl library.
     |
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |
     |  lift = tkraise(self, aboveThis=None)
     |
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |
     |  option_clear(self)
     |      Clear the option database.
     |
     |      It will be reloaded if option_add is called.
     |
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |
     |      Values with higher priority override lower values.
     |
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |
     |      An optional second parameter gives the numeric
     |      priority.
     |
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |
     |  register = _register(self, func, subst=None, needcleanup=1)
     |
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |
     |  size = grid_size(self)
     |
     |  slaves = pack_slaves(self)
     |
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget the event SEQUENCE.
     |
     |      If FUNCID is given, only unbind the function identified with FUNCID
     |      and also delete the corresponding Tcl command.
     |
     |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
     |      unbound.
     |
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |
     |      If no parameter is given self is used.
     |
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |
     |      If no parameter is given self is used.
     |
     |  waitvar = wait_variable(self, name='PY_VAR')
     |
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |
     |  winfo_class(self)
     |      Return window class name of this widget.
     |
     |  winfo_colormapfull(self)
     |      Return True if at the last color request the colormap was full.
     |
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |
     |  winfo_height(self)
     |      Return height of this widget.
     |
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |
     |  winfo_name(self)
     |      Return the name of this widget.
     |
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |
     |  winfo_rgb(self, color)
     |      Return a tuple of integer RGB values in range(65536) for color in this widget.
     |
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_width(self)
     |      Return the width of this widget.
     |
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |
     |  forget = pack_forget(self)
     |
     |  info = pack_info(self)
     |
     |  pack = pack_configure(self, cnf={}, **kw)
     |
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |
     |  place = place_configure(self, cnf={}, **kw)
     |
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |
     |  place_forget(self)
     |      Unmap this widget.
     |
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |
     |  grid = grid_configure(self, cnf={}, **kw)
     |
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |
     |  grid_forget(self)
     |      Unmap this widget.
     |
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |
     |  location = grid_location(self, x, y)

    class Misc(builtins.object)
     |  Internal class.
     |
     |  Base class which defines methods common for interior widgets.
     |
     |  Methods defined here:
     |
     |  __getitem__ = cget(self, key)
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  __setitem__(self, key, value)
     |
     |  __str__(self)
     |      Return the window path name of this widget.
     |
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |
     |  anchor = grid_anchor(self, anchor=None)
     |
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |
     |      This command is equivalent to:
     |
     |      selection_get(CLIPBOARD)
     |
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |
     |  config = configure(self, cnf=None, **kw)
     |
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |
     |  deletecommand(self, name)
     |      Internal function.
     |
     |      Delete the Tcl command provided in NAME.
     |
     |  destroy(self)
     |      Internal function.
     |
     |      Delete all Tcl commands created for
     |      this widget in the Tcl interpreter.
     |
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |
     |  focus = focus_set(self)
     |
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |
     |      Return None if the application does not have the focus.
     |
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |
     |  focus_set(self)
     |      Direct input focus to this widget.
     |
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |
     |  getdouble(self, s)
     |
     |  getint(self, s)
     |
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |
     |  grab_set(self)
     |      Set grab for this widget.
     |
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |
     |      The default anchor is nw.
     |
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  image_names(self)
     |      Return a list of all existing image names.
     |
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |
     |  info_patchlevel(self)
     |      Returns the exact version of the Tcl library.
     |
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |
     |  lift = tkraise(self, aboveThis=None)
     |
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |
     |  option_clear(self)
     |      Clear the option database.
     |
     |      It will be reloaded if option_add is called.
     |
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |
     |      Values with higher priority override lower values.
     |
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |
     |      An optional second parameter gives the numeric
     |      priority.
     |
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |
     |  register = _register(self, func, subst=None, needcleanup=1)
     |
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |
     |  size = grid_size(self)
     |
     |  slaves = pack_slaves(self)
     |
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget the event SEQUENCE.
     |
     |      If FUNCID is given, only unbind the function identified with FUNCID
     |      and also delete the corresponding Tcl command.
     |
     |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
     |      unbound.
     |
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |
     |      If no parameter is given self is used.
     |
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |
     |      If no parameter is given self is used.
     |
     |  waitvar = wait_variable(self, name='PY_VAR')
     |
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |
     |  winfo_class(self)
     |      Return window class name of this widget.
     |
     |  winfo_colormapfull(self)
     |      Return True if at the last color request the colormap was full.
     |
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |
     |  winfo_height(self)
     |      Return height of this widget.
     |
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |
     |  winfo_name(self)
     |      Return the name of this widget.
     |
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |
     |  winfo_rgb(self, color)
     |      Return a tuple of integer RGB values in range(65536) for color in this widget.
     |
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_width(self)
     |      Return the width of this widget.
     |
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object

    class OptionMenu(Menubutton)
     |  OptionMenu(master, variable, value, *values, **kwargs)
     |
     |  OptionMenu which allows the user to select a value from a menu.
     |
     |  Method resolution order:
     |      OptionMenu
     |      Menubutton
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __getitem__(self, name)
     |      Return the resource value for a KEY given as string.
     |
     |  __init__(self, master, variable, value, *values, **kwargs)
     |      Construct an optionmenu widget with the parent MASTER, with
     |      the resource textvariable set to VARIABLE, the initially selected
     |      value VALUE, the other menu values VALUES and an additional
     |      keyword argument command.
     |
     |  destroy(self)
     |      Destroy this widget and the associated menu.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  __setitem__(self, key, value)
     |
     |  __str__(self)
     |      Return the window path name of this widget.
     |
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |
     |  anchor = grid_anchor(self, anchor=None)
     |
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |
     |      This command is equivalent to:
     |
     |      selection_get(CLIPBOARD)
     |
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |
     |  config = configure(self, cnf=None, **kw)
     |
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |
     |  deletecommand(self, name)
     |      Internal function.
     |
     |      Delete the Tcl command provided in NAME.
     |
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |
     |  focus = focus_set(self)
     |
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |
     |      Return None if the application does not have the focus.
     |
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |
     |  focus_set(self)
     |      Direct input focus to this widget.
     |
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |
     |  getdouble(self, s)
     |
     |  getint(self, s)
     |
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |
     |  grab_set(self)
     |      Set grab for this widget.
     |
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |
     |      The default anchor is nw.
     |
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  image_names(self)
     |      Return a list of all existing image names.
     |
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |
     |  info_patchlevel(self)
     |      Returns the exact version of the Tcl library.
     |
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |
     |  lift = tkraise(self, aboveThis=None)
     |
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |
     |  option_clear(self)
     |      Clear the option database.
     |
     |      It will be reloaded if option_add is called.
     |
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |
     |      Values with higher priority override lower values.
     |
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |
     |      An optional second parameter gives the numeric
     |      priority.
     |
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |
     |  register = _register(self, func, subst=None, needcleanup=1)
     |
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |
     |  size = grid_size(self)
     |
     |  slaves = pack_slaves(self)
     |
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget the event SEQUENCE.
     |
     |      If FUNCID is given, only unbind the function identified with FUNCID
     |      and also delete the corresponding Tcl command.
     |
     |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
     |      unbound.
     |
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |
     |      If no parameter is given self is used.
     |
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |
     |      If no parameter is given self is used.
     |
     |  waitvar = wait_variable(self, name='PY_VAR')
     |
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |
     |  winfo_class(self)
     |      Return window class name of this widget.
     |
     |  winfo_colormapfull(self)
     |      Return True if at the last color request the colormap was full.
     |
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |
     |  winfo_height(self)
     |      Return height of this widget.
     |
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |
     |  winfo_name(self)
     |      Return the name of this widget.
     |
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |
     |  winfo_rgb(self, color)
     |      Return a tuple of integer RGB values in range(65536) for color in this widget.
     |
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_width(self)
     |      Return the width of this widget.
     |
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |
     |  forget = pack_forget(self)
     |
     |  info = pack_info(self)
     |
     |  pack = pack_configure(self, cnf={}, **kw)
     |
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |
     |  place = place_configure(self, cnf={}, **kw)
     |
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |
     |  place_forget(self)
     |      Unmap this widget.
     |
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |
     |  grid = grid_configure(self, cnf={}, **kw)
     |
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |
     |  grid_forget(self)
     |      Unmap this widget.
     |
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |
     |  location = grid_location(self, x, y)

    class Pack(builtins.object)
     |  Geometry manager Pack.
     |
     |  Base class to use the methods pack_* in every widget.
     |
     |  Methods defined here:
     |
     |  config = pack_configure(self, cnf={}, **kw)
     |
     |  configure = pack_configure(self, cnf={}, **kw)
     |
     |  forget = pack_forget(self)
     |
     |  info = pack_info(self)
     |
     |  pack = pack_configure(self, cnf={}, **kw)
     |
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |
     |  slaves = pack_slaves(self)
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object

    class PanedWindow(Widget)
     |  PanedWindow(master=None, cnf={}, **kw)
     |
     |  panedwindow widget.
     |
     |  Method resolution order:
     |      PanedWindow
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct a panedwindow widget with the parent MASTER.
     |
     |      STANDARD OPTIONS
     |
     |          background, borderwidth, cursor, height,
     |          orient, relief, width
     |
     |      WIDGET-SPECIFIC OPTIONS
     |
     |          handlepad, handlesize, opaqueresize,
     |          sashcursor, sashpad, sashrelief,
     |          sashwidth, showhandle,
     |
     |  add(self, child, **kw)
     |      Add a child widget to the panedwindow in a new pane.
     |
     |      The child argument is the name of the child widget
     |      followed by pairs of arguments that specify how to
     |      manage the windows. The possible options and values
     |      are the ones accepted by the paneconfigure method.
     |
     |  forget = remove(self, child)
     |
     |  identify(self, x, y)
     |      Identify the panedwindow component at point x, y
     |
     |      If the point is over a sash or a sash handle, the result
     |      is a two element list containing the index of the sash or
     |      handle, and a word indicating whether it is over a sash
     |      or a handle, such as {0 sash} or {2 handle}. If the point
     |      is over any other part of the panedwindow, the result is
     |      an empty list.
     |
     |  panecget(self, child, option)
     |      Query a management option for window.
     |
     |      Option may be any value allowed by the paneconfigure subcommand
     |
     |  paneconfig = paneconfigure(self, tagOrId, cnf=None, **kw)
     |
     |  paneconfigure(self, tagOrId, cnf=None, **kw)
     |      Query or modify the management options for window.
     |
     |      If no option is specified, returns a list describing all
     |      of the available options for pathName.  If option is
     |      specified with no value, then the command returns a list
     |      describing the one named option (this list will be identical
     |      to the corresponding sublist of the value returned if no
     |      option is specified). If one or more option-value pairs are
     |      specified, then the command modifies the given widget
     |      option(s) to have the given value(s); in this case the
     |      command returns an empty string. The following options
     |      are supported:
     |
     |      after window
     |          Insert the window after the window specified. window
     |          should be the name of a window already managed by pathName.
     |      before window
     |          Insert the window before the window specified. window
     |          should be the name of a window already managed by pathName.
     |      height size
     |          Specify a height for the window. The height will be the
     |          outer dimension of the window including its border, if
     |          any. If size is an empty string, or if -height is not
     |          specified, then the height requested internally by the
     |          window will be used initially; the height may later be
     |          adjusted by the movement of sashes in the panedwindow.
     |          Size may be any value accepted by Tk_GetPixels.
     |      minsize n
     |          Specifies that the size of the window cannot be made
     |          less than n. This constraint only affects the size of
     |          the widget in the paned dimension -- the x dimension
     |          for horizontal panedwindows, the y dimension for
     |          vertical panedwindows. May be any value accepted by
     |          Tk_GetPixels.
     |      padx n
     |          Specifies a non-negative value indicating how much
     |          extra space to leave on each side of the window in
     |          the X-direction. The value may have any of the forms
     |          accepted by Tk_GetPixels.
     |      pady n
     |          Specifies a non-negative value indicating how much
     |          extra space to leave on each side of the window in
     |          the Y-direction. The value may have any of the forms
     |          accepted by Tk_GetPixels.
     |      sticky style
     |          If a window's pane is larger than the requested
     |          dimensions of the window, this option may be used
     |          to position (or stretch) the window within its pane.
     |          Style is a string that contains zero or more of the
     |          characters n, s, e or w. The string can optionally
     |          contains spaces or commas, but they are ignored. Each
     |          letter refers to a side (north, south, east, or west)
     |          that the window will "stick" to. If both n and s
     |          (or e and w) are specified, the window will be
     |          stretched to fill the entire height (or width) of
     |          its cavity.
     |      width size
     |          Specify a width for the window. The width will be
     |          the outer dimension of the window including its
     |          border, if any. If size is an empty string, or
     |          if -width is not specified, then the width requested
     |          internally by the window will be used initially; the
     |          width may later be adjusted by the movement of sashes
     |          in the panedwindow. Size may be any value accepted by
     |          Tk_GetPixels.
     |
     |  panes(self)
     |      Returns an ordered list of the child panes.
     |
     |  proxy(self, *args)
     |      Internal function.
     |
     |  proxy_coord(self)
     |      Return the x and y pair of the most recent proxy location
     |
     |  proxy_forget(self)
     |      Remove the proxy from the display.
     |
     |  proxy_place(self, x, y)
     |      Place the proxy at the given x and y coordinates.
     |
     |  remove(self, child)
     |      Remove the pane containing child from the panedwindow
     |
     |      All geometry management options for child will be forgotten.
     |
     |  sash(self, *args)
     |      Internal function.
     |
     |  sash_coord(self, index)
     |      Return the current x and y pair for the sash given by index.
     |
     |      Index must be an integer between 0 and 1 less than the
     |      number of panes in the panedwindow. The coordinates given are
     |      those of the top left corner of the region containing the sash.
     |      pathName sash dragto index x y This command computes the
     |      difference between the given coordinates and the coordinates
     |      given to the last sash coord command for the given sash. It then
     |      moves that sash the computed difference. The return value is the
     |      empty string.
     |
     |  sash_mark(self, index)
     |      Records x and y for the sash given by index;
     |
     |      Used in conjunction with later dragto commands to move the sash.
     |
     |  sash_place(self, index, x, y)
     |      Place the sash given by index at the given coordinates
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |
     |  __getitem__ = cget(self, key)
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  __setitem__(self, key, value)
     |
     |  __str__(self)
     |      Return the window path name of this widget.
     |
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |
     |  anchor = grid_anchor(self, anchor=None)
     |
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |
     |      This command is equivalent to:
     |
     |      selection_get(CLIPBOARD)
     |
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |
     |  config = configure(self, cnf=None, **kw)
     |
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |
     |  deletecommand(self, name)
     |      Internal function.
     |
     |      Delete the Tcl command provided in NAME.
     |
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |
     |  focus = focus_set(self)
     |
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |
     |      Return None if the application does not have the focus.
     |
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |
     |  focus_set(self)
     |      Direct input focus to this widget.
     |
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |
     |  getdouble(self, s)
     |
     |  getint(self, s)
     |
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |
     |  grab_set(self)
     |      Set grab for this widget.
     |
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |
     |      The default anchor is nw.
     |
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  image_names(self)
     |      Return a list of all existing image names.
     |
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |
     |  info_patchlevel(self)
     |      Returns the exact version of the Tcl library.
     |
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |
     |  lift = tkraise(self, aboveThis=None)
     |
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |
     |  option_clear(self)
     |      Clear the option database.
     |
     |      It will be reloaded if option_add is called.
     |
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |
     |      Values with higher priority override lower values.
     |
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |
     |      An optional second parameter gives the numeric
     |      priority.
     |
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |
     |  register = _register(self, func, subst=None, needcleanup=1)
     |
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |
     |  size = grid_size(self)
     |
     |  slaves = pack_slaves(self)
     |
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget the event SEQUENCE.
     |
     |      If FUNCID is given, only unbind the function identified with FUNCID
     |      and also delete the corresponding Tcl command.
     |
     |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
     |      unbound.
     |
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |
     |      If no parameter is given self is used.
     |
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |
     |      If no parameter is given self is used.
     |
     |  waitvar = wait_variable(self, name='PY_VAR')
     |
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |
     |  winfo_class(self)
     |      Return window class name of this widget.
     |
     |  winfo_colormapfull(self)
     |      Return True if at the last color request the colormap was full.
     |
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |
     |  winfo_height(self)
     |      Return height of this widget.
     |
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |
     |  winfo_name(self)
     |      Return the name of this widget.
     |
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |
     |  winfo_rgb(self, color)
     |      Return a tuple of integer RGB values in range(65536) for color in this widget.
     |
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_width(self)
     |      Return the width of this widget.
     |
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |
     |  info = pack_info(self)
     |
     |  pack = pack_configure(self, cnf={}, **kw)
     |
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |
     |  place = place_configure(self, cnf={}, **kw)
     |
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |
     |  place_forget(self)
     |      Unmap this widget.
     |
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |
     |  grid = grid_configure(self, cnf={}, **kw)
     |
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |
     |  grid_forget(self)
     |      Unmap this widget.
     |
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |
     |  location = grid_location(self, x, y)

    class PhotoImage(Image)
     |  PhotoImage(name=None, cnf={}, master=None, **kw)
     |
     |  Widget which can display images in PGM, PPM, GIF, PNG format.
     |
     |  Method resolution order:
     |      PhotoImage
     |      Image
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __getitem__(self, key)
     |
     |  __init__(self, name=None, cnf={}, master=None, **kw)
     |      Create an image with NAME.
     |
     |      Valid resource names: data, format, file, gamma, height, palette,
     |      width.
     |
     |  blank(self)
     |      Display a transparent image.
     |
     |  cget(self, option)
     |      Return the value of OPTION.
     |
     |  copy(self)
     |      Return a new PhotoImage with the same image as this widget.
     |
     |  get(self, x, y)
     |      Return the color (red, green, blue) of the pixel at X,Y.
     |
     |  put(self, data, to=None)
     |      Put row formatted colors to image starting from
     |      position TO, e.g. image.put("{red green} {blue yellow}", to=(4,6))
     |
     |  subsample(self, x, y='')
     |      Return a new PhotoImage based on the same image as this widget
     |      but use only every Xth or Yth pixel.  If y is not given, the
     |      default value is the same as x.
     |
     |  transparency_get(self, x, y)
     |      Return True if the pixel at x,y is transparent.
     |
     |  transparency_set(self, x, y, boolean)
     |      Set the transparency of the pixel at x,y.
     |
     |  write(self, filename, format=None, from_coords=None)
     |      Write image to file FILENAME in FORMAT starting from
     |      position FROM_COORDS.
     |
     |  zoom(self, x, y='')
     |      Return a new PhotoImage with the same image as this widget
     |      but zoom it with a factor of x in the X direction and y in the Y
     |      direction.  If y is not given, the default value is the same as x.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Image:
     |
     |  __del__(self)
     |
     |  __setitem__(self, key, value)
     |
     |  __str__(self)
     |      Return str(self).
     |
     |  config = configure(self, **kw)
     |
     |  configure(self, **kw)
     |      Configure the image.
     |
     |  height(self)
     |      Return the height of the image.
     |
     |  type(self)
     |      Return the type of the image, e.g. "photo" or "bitmap".
     |
     |  width(self)
     |      Return the width of the image.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Image:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object

    class Place(builtins.object)
     |  Geometry manager Place.
     |
     |  Base class to use the methods place_* in every widget.
     |
     |  Methods defined here:
     |
     |  config = place_configure(self, cnf={}, **kw)
     |
     |  configure = place_configure(self, cnf={}, **kw)
     |
     |  forget = place_forget(self)
     |
     |  info = place_info(self)
     |
     |  place = place_configure(self, cnf={}, **kw)
     |
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |
     |  place_forget(self)
     |      Unmap this widget.
     |
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  slaves = place_slaves(self)
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object

    class Radiobutton(Widget)
     |  Radiobutton(master=None, cnf={}, **kw)
     |
     |  Radiobutton widget which shows only one of several buttons in on-state.
     |
     |  Method resolution order:
     |      Radiobutton
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct a radiobutton widget with the parent MASTER.
     |
     |      Valid resource names: activebackground, activeforeground, anchor,
     |      background, bd, bg, bitmap, borderwidth, command, cursor,
     |      disabledforeground, fg, font, foreground, height,
     |      highlightbackground, highlightcolor, highlightthickness, image,
     |      indicatoron, justify, padx, pady, relief, selectcolor, selectimage,
     |      state, takefocus, text, textvariable, underline, value, variable,
     |      width, wraplength.
     |
     |  deselect(self)
     |      Put the button in off-state.
     |
     |  flash(self)
     |      Flash the button.
     |
     |  invoke(self)
     |      Toggle the button and invoke a command if given as resource.
     |
     |  select(self)
     |      Put the button in on-state.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |
     |  __getitem__ = cget(self, key)
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  __setitem__(self, key, value)
     |
     |  __str__(self)
     |      Return the window path name of this widget.
     |
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |
     |  anchor = grid_anchor(self, anchor=None)
     |
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |
     |      This command is equivalent to:
     |
     |      selection_get(CLIPBOARD)
     |
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |
     |  config = configure(self, cnf=None, **kw)
     |
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |
     |  deletecommand(self, name)
     |      Internal function.
     |
     |      Delete the Tcl command provided in NAME.
     |
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |
     |  focus = focus_set(self)
     |
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |
     |      Return None if the application does not have the focus.
     |
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |
     |  focus_set(self)
     |      Direct input focus to this widget.
     |
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |
     |  getdouble(self, s)
     |
     |  getint(self, s)
     |
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |
     |  grab_set(self)
     |      Set grab for this widget.
     |
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |
     |      The default anchor is nw.
     |
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  image_names(self)
     |      Return a list of all existing image names.
     |
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |
     |  info_patchlevel(self)
     |      Returns the exact version of the Tcl library.
     |
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |
     |  lift = tkraise(self, aboveThis=None)
     |
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |
     |  option_clear(self)
     |      Clear the option database.
     |
     |      It will be reloaded if option_add is called.
     |
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |
     |      Values with higher priority override lower values.
     |
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |
     |      An optional second parameter gives the numeric
     |      priority.
     |
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |
     |  register = _register(self, func, subst=None, needcleanup=1)
     |
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |
     |  size = grid_size(self)
     |
     |  slaves = pack_slaves(self)
     |
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget the event SEQUENCE.
     |
     |      If FUNCID is given, only unbind the function identified with FUNCID
     |      and also delete the corresponding Tcl command.
     |
     |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
     |      unbound.
     |
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |
     |      If no parameter is given self is used.
     |
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |
     |      If no parameter is given self is used.
     |
     |  waitvar = wait_variable(self, name='PY_VAR')
     |
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |
     |  winfo_class(self)
     |      Return window class name of this widget.
     |
     |  winfo_colormapfull(self)
     |      Return True if at the last color request the colormap was full.
     |
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |
     |  winfo_height(self)
     |      Return height of this widget.
     |
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |
     |  winfo_name(self)
     |      Return the name of this widget.
     |
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |
     |  winfo_rgb(self, color)
     |      Return a tuple of integer RGB values in range(65536) for color in this widget.
     |
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_width(self)
     |      Return the width of this widget.
     |
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |
     |  forget = pack_forget(self)
     |
     |  info = pack_info(self)
     |
     |  pack = pack_configure(self, cnf={}, **kw)
     |
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |
     |  place = place_configure(self, cnf={}, **kw)
     |
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |
     |  place_forget(self)
     |      Unmap this widget.
     |
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |
     |  grid = grid_configure(self, cnf={}, **kw)
     |
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |
     |  grid_forget(self)
     |      Unmap this widget.
     |
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |
     |  location = grid_location(self, x, y)

    class Scale(Widget)
     |  Scale(master=None, cnf={}, **kw)
     |
     |  Scale widget which can display a numerical scale.
     |
     |  Method resolution order:
     |      Scale
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct a scale widget with the parent MASTER.
     |
     |      Valid resource names: activebackground, background, bigincrement, bd,
     |      bg, borderwidth, command, cursor, digits, fg, font, foreground, from,
     |      highlightbackground, highlightcolor, highlightthickness, label,
     |      length, orient, relief, repeatdelay, repeatinterval, resolution,
     |      showvalue, sliderlength, sliderrelief, state, takefocus,
     |      tickinterval, to, troughcolor, variable, width.
     |
     |  coords(self, value=None)
     |      Return a tuple (X,Y) of the point along the centerline of the
     |      trough that corresponds to VALUE or the current value if None is
     |      given.
     |
     |  get(self)
     |      Get the current value as integer or float.
     |
     |  identify(self, x, y)
     |      Return where the point X,Y lies. Valid return values are "slider",
     |      "though1" and "though2".
     |
     |  set(self, value)
     |      Set the value to VALUE.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |
     |  __getitem__ = cget(self, key)
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  __setitem__(self, key, value)
     |
     |  __str__(self)
     |      Return the window path name of this widget.
     |
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |
     |  anchor = grid_anchor(self, anchor=None)
     |
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |
     |      This command is equivalent to:
     |
     |      selection_get(CLIPBOARD)
     |
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |
     |  config = configure(self, cnf=None, **kw)
     |
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |
     |  deletecommand(self, name)
     |      Internal function.
     |
     |      Delete the Tcl command provided in NAME.
     |
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |
     |  focus = focus_set(self)
     |
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |
     |      Return None if the application does not have the focus.
     |
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |
     |  focus_set(self)
     |      Direct input focus to this widget.
     |
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |
     |  getdouble(self, s)
     |
     |  getint(self, s)
     |
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |
     |  grab_set(self)
     |      Set grab for this widget.
     |
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |
     |      The default anchor is nw.
     |
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  image_names(self)
     |      Return a list of all existing image names.
     |
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |
     |  info_patchlevel(self)
     |      Returns the exact version of the Tcl library.
     |
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |
     |  lift = tkraise(self, aboveThis=None)
     |
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |
     |  option_clear(self)
     |      Clear the option database.
     |
     |      It will be reloaded if option_add is called.
     |
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |
     |      Values with higher priority override lower values.
     |
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |
     |      An optional second parameter gives the numeric
     |      priority.
     |
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |
     |  register = _register(self, func, subst=None, needcleanup=1)
     |
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |
     |  size = grid_size(self)
     |
     |  slaves = pack_slaves(self)
     |
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget the event SEQUENCE.
     |
     |      If FUNCID is given, only unbind the function identified with FUNCID
     |      and also delete the corresponding Tcl command.
     |
     |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
     |      unbound.
     |
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |
     |      If no parameter is given self is used.
     |
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |
     |      If no parameter is given self is used.
     |
     |  waitvar = wait_variable(self, name='PY_VAR')
     |
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |
     |  winfo_class(self)
     |      Return window class name of this widget.
     |
     |  winfo_colormapfull(self)
     |      Return True if at the last color request the colormap was full.
     |
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |
     |  winfo_height(self)
     |      Return height of this widget.
     |
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |
     |  winfo_name(self)
     |      Return the name of this widget.
     |
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |
     |  winfo_rgb(self, color)
     |      Return a tuple of integer RGB values in range(65536) for color in this widget.
     |
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_width(self)
     |      Return the width of this widget.
     |
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |
     |  forget = pack_forget(self)
     |
     |  info = pack_info(self)
     |
     |  pack = pack_configure(self, cnf={}, **kw)
     |
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |
     |  place = place_configure(self, cnf={}, **kw)
     |
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |
     |  place_forget(self)
     |      Unmap this widget.
     |
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |
     |  grid = grid_configure(self, cnf={}, **kw)
     |
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |
     |  grid_forget(self)
     |      Unmap this widget.
     |
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |
     |  location = grid_location(self, x, y)

    class Scrollbar(Widget)
     |  Scrollbar(master=None, cnf={}, **kw)
     |
     |  Scrollbar widget which displays a slider at a certain position.
     |
     |  Method resolution order:
     |      Scrollbar
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct a scrollbar widget with the parent MASTER.
     |
     |      Valid resource names: activebackground, activerelief,
     |      background, bd, bg, borderwidth, command, cursor,
     |      elementborderwidth, highlightbackground,
     |      highlightcolor, highlightthickness, jump, orient,
     |      relief, repeatdelay, repeatinterval, takefocus,
     |      troughcolor, width.
     |
     |  activate(self, index=None)
     |      Marks the element indicated by index as active.
     |      The only index values understood by this method are "arrow1",
     |      "slider", or "arrow2".  If any other value is specified then no
     |      element of the scrollbar will be active.  If index is not specified,
     |      the method returns the name of the element that is currently active,
     |      or None if no element is active.
     |
     |  delta(self, deltax, deltay)
     |      Return the fractional change of the scrollbar setting if it
     |      would be moved by DELTAX or DELTAY pixels.
     |
     |  fraction(self, x, y)
     |      Return the fractional value which corresponds to a slider
     |      position of X,Y.
     |
     |  get(self)
     |      Return the current fractional values (upper and lower end)
     |      of the slider position.
     |
     |  identify(self, x, y)
     |      Return the element under position X,Y as one of
     |      "arrow1","slider","arrow2" or "".
     |
     |  set(self, first, last)
     |      Set the fractional values of the slider position (upper and
     |      lower ends as value between 0 and 1).
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |
     |  __getitem__ = cget(self, key)
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  __setitem__(self, key, value)
     |
     |  __str__(self)
     |      Return the window path name of this widget.
     |
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |
     |  anchor = grid_anchor(self, anchor=None)
     |
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |
     |      This command is equivalent to:
     |
     |      selection_get(CLIPBOARD)
     |
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |
     |  config = configure(self, cnf=None, **kw)
     |
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |
     |  deletecommand(self, name)
     |      Internal function.
     |
     |      Delete the Tcl command provided in NAME.
     |
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |
     |  focus = focus_set(self)
     |
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |
     |      Return None if the application does not have the focus.
     |
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |
     |  focus_set(self)
     |      Direct input focus to this widget.
     |
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |
     |  getdouble(self, s)
     |
     |  getint(self, s)
     |
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |
     |  grab_set(self)
     |      Set grab for this widget.
     |
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |
     |      The default anchor is nw.
     |
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  image_names(self)
     |      Return a list of all existing image names.
     |
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |
     |  info_patchlevel(self)
     |      Returns the exact version of the Tcl library.
     |
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |
     |  lift = tkraise(self, aboveThis=None)
     |
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |
     |  option_clear(self)
     |      Clear the option database.
     |
     |      It will be reloaded if option_add is called.
     |
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |
     |      Values with higher priority override lower values.
     |
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |
     |      An optional second parameter gives the numeric
     |      priority.
     |
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |
     |  register = _register(self, func, subst=None, needcleanup=1)
     |
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |
     |  size = grid_size(self)
     |
     |  slaves = pack_slaves(self)
     |
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget the event SEQUENCE.
     |
     |      If FUNCID is given, only unbind the function identified with FUNCID
     |      and also delete the corresponding Tcl command.
     |
     |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
     |      unbound.
     |
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |
     |      If no parameter is given self is used.
     |
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |
     |      If no parameter is given self is used.
     |
     |  waitvar = wait_variable(self, name='PY_VAR')
     |
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |
     |  winfo_class(self)
     |      Return window class name of this widget.
     |
     |  winfo_colormapfull(self)
     |      Return True if at the last color request the colormap was full.
     |
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |
     |  winfo_height(self)
     |      Return height of this widget.
     |
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |
     |  winfo_name(self)
     |      Return the name of this widget.
     |
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |
     |  winfo_rgb(self, color)
     |      Return a tuple of integer RGB values in range(65536) for color in this widget.
     |
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_width(self)
     |      Return the width of this widget.
     |
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |
     |  forget = pack_forget(self)
     |
     |  info = pack_info(self)
     |
     |  pack = pack_configure(self, cnf={}, **kw)
     |
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |
     |  place = place_configure(self, cnf={}, **kw)
     |
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |
     |  place_forget(self)
     |      Unmap this widget.
     |
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |
     |  grid = grid_configure(self, cnf={}, **kw)
     |
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |
     |  grid_forget(self)
     |      Unmap this widget.
     |
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |
     |  location = grid_location(self, x, y)

    class Spinbox(Widget, XView)
     |  Spinbox(master=None, cnf={}, **kw)
     |
     |  spinbox widget.
     |
     |  Method resolution order:
     |      Spinbox
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      XView
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct a spinbox widget with the parent MASTER.
     |
     |      STANDARD OPTIONS
     |
     |          activebackground, background, borderwidth,
     |          cursor, exportselection, font, foreground,
     |          highlightbackground, highlightcolor,
     |          highlightthickness, insertbackground,
     |          insertborderwidth, insertofftime,
     |          insertontime, insertwidth, justify, relief,
     |          repeatdelay, repeatinterval,
     |          selectbackground, selectborderwidth
     |          selectforeground, takefocus, textvariable
     |          xscrollcommand.
     |
     |      WIDGET-SPECIFIC OPTIONS
     |
     |          buttonbackground, buttoncursor,
     |          buttondownrelief, buttonuprelief,
     |          command, disabledbackground,
     |          disabledforeground, format, from,
     |          invalidcommand, increment,
     |          readonlybackground, state, to,
     |          validate, validatecommand values,
     |          width, wrap,
     |
     |  bbox(self, index)
     |      Return a tuple of X1,Y1,X2,Y2 coordinates for a
     |      rectangle which encloses the character given by index.
     |
     |      The first two elements of the list give the x and y
     |      coordinates of the upper-left corner of the screen
     |      area covered by the character (in pixels relative
     |      to the widget) and the last two elements give the
     |      width and height of the character, in pixels. The
     |      bounding box may refer to a region outside the
     |      visible area of the window.
     |
     |  delete(self, first, last=None)
     |      Delete one or more elements of the spinbox.
     |
     |      First is the index of the first character to delete,
     |      and last is the index of the character just after
     |      the last one to delete. If last isn't specified it
     |      defaults to first+1, i.e. a single character is
     |      deleted.  This command returns an empty string.
     |
     |  get(self)
     |      Returns the spinbox's string
     |
     |  icursor(self, index)
     |      Alter the position of the insertion cursor.
     |
     |      The insertion cursor will be displayed just before
     |      the character given by index. Returns an empty string
     |
     |  identify(self, x, y)
     |      Returns the name of the widget at position x, y
     |
     |      Return value is one of: none, buttondown, buttonup, entry
     |
     |  index(self, index)
     |      Returns the numerical index corresponding to index
     |
     |  insert(self, index, s)
     |      Insert string s at index
     |
     |      Returns an empty string.
     |
     |  invoke(self, element)
     |      Causes the specified element to be invoked
     |
     |      The element could be buttondown or buttonup
     |      triggering the action associated with it.
     |
     |  scan(self, *args)
     |      Internal function.
     |
     |  scan_dragto(self, x)
     |      Compute the difference between the given x argument
     |      and the x argument to the last scan mark command
     |
     |      It then adjusts the view left or right by 10 times the
     |      difference in x-coordinates. This command is typically
     |      associated with mouse motion events in the widget, to
     |      produce the effect of dragging the spinbox at high speed
     |      through the window. The return value is an empty string.
     |
     |  scan_mark(self, x)
     |      Records x and the current view in the spinbox window;
     |
     |      used in conjunction with later scan dragto commands.
     |      Typically this command is associated with a mouse button
     |      press in the widget. It returns an empty string.
     |
     |  selection(self, *args)
     |      Internal function.
     |
     |  selection_adjust(self, index)
     |      Locate the end of the selection nearest to the character
     |      given by index,
     |
     |      Then adjust that end of the selection to be at index
     |      (i.e including but not going beyond index). The other
     |      end of the selection is made the anchor point for future
     |      select to commands. If the selection isn't currently in
     |      the spinbox, then a new selection is created to include
     |      the characters between index and the most recent selection
     |      anchor point, inclusive.
     |
     |  selection_clear(self)
     |      Clear the selection
     |
     |      If the selection isn't in this widget then the
     |      command has no effect.
     |
     |  selection_element(self, element=None)
     |      Sets or gets the currently selected element.
     |
     |      If a spinbutton element is specified, it will be
     |      displayed depressed.
     |
     |  selection_from(self, index)
     |      Set the fixed end of a selection to INDEX.
     |
     |  selection_present(self)
     |      Return True if there are characters selected in the spinbox, False
     |      otherwise.
     |
     |  selection_range(self, start, end)
     |      Set the selection from START to END (not included).
     |
     |  selection_to(self, index)
     |      Set the variable end of a selection to INDEX.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |
     |  __getitem__ = cget(self, key)
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  __setitem__(self, key, value)
     |
     |  __str__(self)
     |      Return the window path name of this widget.
     |
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |
     |  anchor = grid_anchor(self, anchor=None)
     |
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |
     |      This command is equivalent to:
     |
     |      selection_get(CLIPBOARD)
     |
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |
     |  config = configure(self, cnf=None, **kw)
     |
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |
     |  deletecommand(self, name)
     |      Internal function.
     |
     |      Delete the Tcl command provided in NAME.
     |
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |
     |  focus = focus_set(self)
     |
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |
     |      Return None if the application does not have the focus.
     |
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |
     |  focus_set(self)
     |      Direct input focus to this widget.
     |
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |
     |  getdouble(self, s)
     |
     |  getint(self, s)
     |
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |
     |  grab_set(self)
     |      Set grab for this widget.
     |
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |
     |      The default anchor is nw.
     |
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  image_names(self)
     |      Return a list of all existing image names.
     |
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |
     |  info_patchlevel(self)
     |      Returns the exact version of the Tcl library.
     |
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |
     |  lift = tkraise(self, aboveThis=None)
     |
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |
     |  option_clear(self)
     |      Clear the option database.
     |
     |      It will be reloaded if option_add is called.
     |
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |
     |      Values with higher priority override lower values.
     |
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |
     |      An optional second parameter gives the numeric
     |      priority.
     |
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |
     |  register = _register(self, func, subst=None, needcleanup=1)
     |
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |
     |  size = grid_size(self)
     |
     |  slaves = pack_slaves(self)
     |
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget the event SEQUENCE.
     |
     |      If FUNCID is given, only unbind the function identified with FUNCID
     |      and also delete the corresponding Tcl command.
     |
     |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
     |      unbound.
     |
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |
     |      If no parameter is given self is used.
     |
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |
     |      If no parameter is given self is used.
     |
     |  waitvar = wait_variable(self, name='PY_VAR')
     |
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |
     |  winfo_class(self)
     |      Return window class name of this widget.
     |
     |  winfo_colormapfull(self)
     |      Return True if at the last color request the colormap was full.
     |
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |
     |  winfo_height(self)
     |      Return height of this widget.
     |
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |
     |  winfo_name(self)
     |      Return the name of this widget.
     |
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |
     |  winfo_rgb(self, color)
     |      Return a tuple of integer RGB values in range(65536) for color in this widget.
     |
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_width(self)
     |      Return the width of this widget.
     |
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |
     |  forget = pack_forget(self)
     |
     |  info = pack_info(self)
     |
     |  pack = pack_configure(self, cnf={}, **kw)
     |
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |
     |  place = place_configure(self, cnf={}, **kw)
     |
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |
     |  place_forget(self)
     |      Unmap this widget.
     |
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |
     |  grid = grid_configure(self, cnf={}, **kw)
     |
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |
     |  grid_forget(self)
     |      Unmap this widget.
     |
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |
     |  location = grid_location(self, x, y)
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from XView:
     |
     |  xview(self, *args)
     |      Query and change the horizontal position of the view.
     |
     |  xview_moveto(self, fraction)
     |      Adjusts the view in the window so that FRACTION of the
     |      total width of the canvas is off-screen to the left.
     |
     |  xview_scroll(self, number, what)
     |      Shift the x-view according to NUMBER which is measured in "units"
     |      or "pages" (WHAT).

    class StringVar(Variable)
     |  StringVar(master=None, value=None, name=None)
     |
     |  Value holder for strings variables.
     |
     |  Method resolution order:
     |      StringVar
     |      Variable
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, master=None, value=None, name=None)
     |      Construct a string variable.
     |
     |      MASTER can be given as master widget.
     |      VALUE is an optional value (defaults to "")
     |      NAME is an optional Tcl name (defaults to PY_VARnum).
     |
     |      If NAME matches an existing variable and VALUE is omitted
     |      then the existing value is retained.
     |
     |  get(self)
     |      Return value of variable as string.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Variable:
     |
     |  __del__(self)
     |      Unset the variable in Tcl.
     |
     |  __eq__(self, other)
     |      Return self==value.
     |
     |  __str__(self)
     |      Return the name of the variable in Tcl.
     |
     |  initialize = set(self, value)
     |
     |  set(self, value)
     |      Set the variable to VALUE.
     |
     |  trace = trace_variable(self, mode, callback)
     |
     |  trace_add(self, mode, callback)
     |      Define a trace callback for the variable.
     |
     |      Mode is one of "read", "write", "unset", or a list or tuple of
     |      such strings.
     |      Callback must be a function which is called when the variable is
     |      read, written or unset.
     |
     |      Return the name of the callback.
     |
     |  trace_info(self)
     |      Return all trace callback information.
     |
     |  trace_remove(self, mode, cbname)
     |      Delete the trace callback for a variable.
     |
     |      Mode is one of "read", "write", "unset" or a list or tuple of
     |      such strings.  Must be same as were specified in trace_add().
     |      cbname is the name of the callback returned from trace_add().
     |
     |  trace_variable(self, mode, callback)
     |      Define a trace callback for the variable.
     |
     |      MODE is one of "r", "w", "u" for read, write, undefine.
     |      CALLBACK must be a function which is called when
     |      the variable is read, written or undefined.
     |
     |      Return the name of the callback.
     |
     |      This deprecated method wraps a deprecated Tcl method that will
     |      likely be removed in the future.  Use trace_add() instead.
     |
     |  trace_vdelete(self, mode, cbname)
     |      Delete the trace callback for a variable.
     |
     |      MODE is one of "r", "w", "u" for read, write, undefine.
     |      CBNAME is the name of the callback returned from trace_variable or trace.
     |
     |      This deprecated method wraps a deprecated Tcl method that will
     |      likely be removed in the future.  Use trace_remove() instead.
     |
     |  trace_vinfo(self)
     |      Return all trace callback information.
     |
     |      This deprecated method wraps a deprecated Tcl method that will
     |      likely be removed in the future.  Use trace_info() instead.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Variable:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Variable:
     |
     |  __hash__ = None

    class TclError(builtins.Exception)
     |  Method resolution order:
     |      TclError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |
     |  Data descriptors defined here:
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |
     |  __reduce__(...)
     |      Helper for pickle.
     |
     |  __repr__(self, /)
     |      Return repr(self).
     |
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |
     |  __setstate__(...)
     |
     |  __str__(self, /)
     |      Return str(self).
     |
     |  add_note(...)
     |      Exception.add_note(note) --
     |      add a note to the exception
     |
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |
     |  __cause__
     |      exception cause
     |
     |  __context__
     |      exception context
     |
     |  __dict__
     |
     |  __suppress_context__
     |
     |  __traceback__
     |
     |  args

    class Text(Widget, XView, YView)
     |  Text(master=None, cnf={}, **kw)
     |
     |  Text widget which can display text in various forms.
     |
     |  Method resolution order:
     |      Text
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      XView
     |      YView
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct a text widget with the parent MASTER.
     |
     |      STANDARD OPTIONS
     |
     |          background, borderwidth, cursor,
     |          exportselection, font, foreground,
     |          highlightbackground, highlightcolor,
     |          highlightthickness, insertbackground,
     |          insertborderwidth, insertofftime,
     |          insertontime, insertwidth, padx, pady,
     |          relief, selectbackground,
     |          selectborderwidth, selectforeground,
     |          setgrid, takefocus,
     |          xscrollcommand, yscrollcommand,
     |
     |      WIDGET-SPECIFIC OPTIONS
     |
     |          autoseparators, height, maxundo,
     |          spacing1, spacing2, spacing3,
     |          state, tabs, undo, width, wrap,
     |
     |  bbox(self, index)
     |      Return a tuple of (x,y,width,height) which gives the bounding
     |      box of the visible part of the character at the given index.
     |
     |  compare(self, index1, op, index2)
     |      Return whether between index INDEX1 and index INDEX2 the
     |      relation OP is satisfied. OP is one of <, <=, ==, >=, >, or !=.
     |
     |  count(self, index1, index2, *args)
     |      Counts the number of relevant things between the two indices.
     |      If index1 is after index2, the result will be a negative number
     |      (and this holds for each of the possible options).
     |
     |      The actual items which are counted depends on the options given by
     |      args. The result is a list of integers, one for the result of each
     |      counting option given. Valid counting options are "chars",
     |      "displaychars", "displayindices", "displaylines", "indices",
     |      "lines", "xpixels" and "ypixels". There is an additional possible
     |      option "update", which if given then all subsequent options ensure
     |      that any possible out of date information is recalculated.
     |
     |  debug(self, boolean=None)
     |      Turn on the internal consistency checks of the B-Tree inside the text
     |      widget according to BOOLEAN.
     |
     |  delete(self, index1, index2=None)
     |      Delete the characters between INDEX1 and INDEX2 (not included).
     |
     |  dlineinfo(self, index)
     |      Return tuple (x,y,width,height,baseline) giving the bounding box
     |      and baseline position of the visible part of the line containing
     |      the character at INDEX.
     |
     |  dump(self, index1, index2=None, command=None, **kw)
     |      Return the contents of the widget between index1 and index2.
     |
     |      The type of contents returned in filtered based on the keyword
     |      parameters; if 'all', 'image', 'mark', 'tag', 'text', or 'window' are
     |      given and true, then the corresponding items are returned. The result
     |      is a list of triples of the form (key, value, index). If none of the
     |      keywords are true then 'all' is used by default.
     |
     |      If the 'command' argument is given, it is called once for each element
     |      of the list of triples, with the values of each triple serving as the
     |      arguments to the function. In this case the list is not returned.
     |
     |  edit(self, *args)
     |      Internal method
     |
     |      This method controls the undo mechanism and
     |      the modified flag. The exact behavior of the
     |      command depends on the option argument that
     |      follows the edit argument. The following forms
     |      of the command are currently supported:
     |
     |      edit_modified, edit_redo, edit_reset, edit_separator
     |      and edit_undo
     |
     |  edit_modified(self, arg=None)
     |      Get or Set the modified flag
     |
     |      If arg is not specified, returns the modified
     |      flag of the widget. The insert, delete, edit undo and
     |      edit redo commands or the user can set or clear the
     |      modified flag. If boolean is specified, sets the
     |      modified flag of the widget to arg.
     |
     |  edit_redo(self)
     |      Redo the last undone edit
     |
     |      When the undo option is true, reapplies the last
     |      undone edits provided no other edits were done since
     |      then. Generates an error when the redo stack is empty.
     |      Does nothing when the undo option is false.
     |
     |  edit_reset(self)
     |      Clears the undo and redo stacks
     |
     |  edit_separator(self)
     |      Inserts a separator (boundary) on the undo stack.
     |
     |      Does nothing when the undo option is false
     |
     |  edit_undo(self)
     |      Undoes the last edit action
     |
     |      If the undo option is true. An edit action is defined
     |      as all the insert and delete commands that are recorded
     |      on the undo stack in between two separators. Generates
     |      an error when the undo stack is empty. Does nothing
     |      when the undo option is false
     |
     |  get(self, index1, index2=None)
     |      Return the text from INDEX1 to INDEX2 (not included).
     |
     |  image_cget(self, index, option)
     |      Return the value of OPTION of an embedded image at INDEX.
     |
     |  image_configure(self, index, cnf=None, **kw)
     |      Configure an embedded image at INDEX.
     |
     |  image_create(self, index, cnf={}, **kw)
     |      Create an embedded image at INDEX.
     |
     |  image_names(self)
     |      Return all names of embedded images in this widget.
     |
     |  index(self, index)
     |      Return the index in the form line.char for INDEX.
     |
     |  insert(self, index, chars, *args)
     |      Insert CHARS before the characters at INDEX. An additional
     |      tag can be given in ARGS. Additional CHARS and tags can follow in ARGS.
     |
     |  mark_gravity(self, markName, direction=None)
     |      Change the gravity of a mark MARKNAME to DIRECTION (LEFT or RIGHT).
     |      Return the current value if None is given for DIRECTION.
     |
     |  mark_names(self)
     |      Return all mark names.
     |
     |  mark_next(self, index)
     |      Return the name of the next mark after INDEX.
     |
     |  mark_previous(self, index)
     |      Return the name of the previous mark before INDEX.
     |
     |  mark_set(self, markName, index)
     |      Set mark MARKNAME before the character at INDEX.
     |
     |  mark_unset(self, *markNames)
     |      Delete all marks in MARKNAMES.
     |
     |  peer_create(self, newPathName, cnf={}, **kw)
     |      Creates a peer text widget with the given newPathName, and any
     |      optional standard configuration options. By default the peer will
     |      have the same start and end line as the parent widget, but
     |      these can be overridden with the standard configuration options.
     |
     |  peer_names(self)
     |      Returns a list of peers of this widget (this does not include
     |      the widget itself).
     |
     |  replace(self, index1, index2, chars, *args)
     |      Replaces the range of characters between index1 and index2 with
     |      the given characters and tags specified by args.
     |
     |      See the method insert for some more information about args, and the
     |      method delete for information about the indices.
     |
     |  scan_dragto(self, x, y)
     |      Adjust the view of the text to 10 times the
     |      difference between X and Y and the coordinates given in
     |      scan_mark.
     |
     |  scan_mark(self, x, y)
     |      Remember the current X, Y coordinates.
     |
     |  search(self, pattern, index, stopindex=None, forwards=None, backwards=None, exact=None, regexp=None, nocase=None, count=None, elide=None)
     |      Search PATTERN beginning from INDEX until STOPINDEX.
     |      Return the index of the first character of a match or an
     |      empty string.
     |
     |  see(self, index)
     |      Scroll such that the character at INDEX is visible.
     |
     |  tag_add(self, tagName, index1, *args)
     |      Add tag TAGNAME to all characters between INDEX1 and index2 in ARGS.
     |      Additional pairs of indices may follow in ARGS.
     |
     |  tag_bind(self, tagName, sequence, func, add=None)
     |      Bind to all characters with TAGNAME at event SEQUENCE a call to function FUNC.
     |
     |      An additional boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or whether it will
     |      replace the previous function. See bind for the return value.
     |
     |  tag_cget(self, tagName, option)
     |      Return the value of OPTION for tag TAGNAME.
     |
     |  tag_config = tag_configure(self, tagName, cnf=None, **kw)
     |
     |  tag_configure(self, tagName, cnf=None, **kw)
     |      Configure a tag TAGNAME.
     |
     |  tag_delete(self, *tagNames)
     |      Delete all tags in TAGNAMES.
     |
     |  tag_lower(self, tagName, belowThis=None)
     |      Change the priority of tag TAGNAME such that it is lower
     |      than the priority of BELOWTHIS.
     |
     |  tag_names(self, index=None)
     |      Return a list of all tag names.
     |
     |  tag_nextrange(self, tagName, index1, index2=None)
     |      Return a list of start and end index for the first sequence of
     |      characters between INDEX1 and INDEX2 which all have tag TAGNAME.
     |      The text is searched forward from INDEX1.
     |
     |  tag_prevrange(self, tagName, index1, index2=None)
     |      Return a list of start and end index for the first sequence of
     |      characters between INDEX1 and INDEX2 which all have tag TAGNAME.
     |      The text is searched backwards from INDEX1.
     |
     |  tag_raise(self, tagName, aboveThis=None)
     |      Change the priority of tag TAGNAME such that it is higher
     |      than the priority of ABOVETHIS.
     |
     |  tag_ranges(self, tagName)
     |      Return a list of ranges of text which have tag TAGNAME.
     |
     |  tag_remove(self, tagName, index1, index2=None)
     |      Remove tag TAGNAME from all characters between INDEX1 and INDEX2.
     |
     |  tag_unbind(self, tagName, sequence, funcid=None)
     |      Unbind for all characters with TAGNAME for event SEQUENCE  the
     |      function identified with FUNCID.
     |
     |  window_cget(self, index, option)
     |      Return the value of OPTION of an embedded window at INDEX.
     |
     |  window_config = window_configure(self, index, cnf=None, **kw)
     |
     |  window_configure(self, index, cnf=None, **kw)
     |      Configure an embedded window at INDEX.
     |
     |  window_create(self, index, cnf={}, **kw)
     |      Create a window at INDEX.
     |
     |  window_names(self)
     |      Return all names of embedded windows in this widget.
     |
     |  yview_pickplace(self, *what)
     |      Obsolete function, use see.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |
     |  __getitem__ = cget(self, key)
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  __setitem__(self, key, value)
     |
     |  __str__(self)
     |      Return the window path name of this widget.
     |
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |
     |  anchor = grid_anchor(self, anchor=None)
     |
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |
     |      This command is equivalent to:
     |
     |      selection_get(CLIPBOARD)
     |
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |
     |  config = configure(self, cnf=None, **kw)
     |
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |
     |  deletecommand(self, name)
     |      Internal function.
     |
     |      Delete the Tcl command provided in NAME.
     |
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |
     |  focus = focus_set(self)
     |
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |
     |      Return None if the application does not have the focus.
     |
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |
     |  focus_set(self)
     |      Direct input focus to this widget.
     |
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |
     |  getdouble(self, s)
     |
     |  getint(self, s)
     |
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |
     |  grab_set(self)
     |      Set grab for this widget.
     |
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |
     |      The default anchor is nw.
     |
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |
     |  info_patchlevel(self)
     |      Returns the exact version of the Tcl library.
     |
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |
     |  lift = tkraise(self, aboveThis=None)
     |
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |
     |  option_clear(self)
     |      Clear the option database.
     |
     |      It will be reloaded if option_add is called.
     |
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |
     |      Values with higher priority override lower values.
     |
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |
     |      An optional second parameter gives the numeric
     |      priority.
     |
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |
     |  register = _register(self, func, subst=None, needcleanup=1)
     |
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |
     |  size = grid_size(self)
     |
     |  slaves = pack_slaves(self)
     |
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget the event SEQUENCE.
     |
     |      If FUNCID is given, only unbind the function identified with FUNCID
     |      and also delete the corresponding Tcl command.
     |
     |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
     |      unbound.
     |
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |
     |      If no parameter is given self is used.
     |
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |
     |      If no parameter is given self is used.
     |
     |  waitvar = wait_variable(self, name='PY_VAR')
     |
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |
     |  winfo_class(self)
     |      Return window class name of this widget.
     |
     |  winfo_colormapfull(self)
     |      Return True if at the last color request the colormap was full.
     |
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |
     |  winfo_height(self)
     |      Return height of this widget.
     |
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |
     |  winfo_name(self)
     |      Return the name of this widget.
     |
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |
     |  winfo_rgb(self, color)
     |      Return a tuple of integer RGB values in range(65536) for color in this widget.
     |
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_width(self)
     |      Return the width of this widget.
     |
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |
     |  forget = pack_forget(self)
     |
     |  info = pack_info(self)
     |
     |  pack = pack_configure(self, cnf={}, **kw)
     |
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |
     |  place = place_configure(self, cnf={}, **kw)
     |
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |
     |  place_forget(self)
     |      Unmap this widget.
     |
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |
     |  grid = grid_configure(self, cnf={}, **kw)
     |
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |
     |  grid_forget(self)
     |      Unmap this widget.
     |
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |
     |  location = grid_location(self, x, y)
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from XView:
     |
     |  xview(self, *args)
     |      Query and change the horizontal position of the view.
     |
     |  xview_moveto(self, fraction)
     |      Adjusts the view in the window so that FRACTION of the
     |      total width of the canvas is off-screen to the left.
     |
     |  xview_scroll(self, number, what)
     |      Shift the x-view according to NUMBER which is measured in "units"
     |      or "pages" (WHAT).
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from YView:
     |
     |  yview(self, *args)
     |      Query and change the vertical position of the view.
     |
     |  yview_moveto(self, fraction)
     |      Adjusts the view in the window so that FRACTION of the
     |      total height of the canvas is off-screen to the top.
     |
     |  yview_scroll(self, number, what)
     |      Shift the y-view according to NUMBER which is measured in
     |      "units" or "pages" (WHAT).

    class Tk(Misc, Wm)
     |  Tk(screenName=None, baseName=None, className='Tk', useTk=True, sync=False, use=None)
     |
     |  Toplevel widget of Tk which represents mostly the main window
     |  of an application. It has an associated Tcl interpreter.
     |
     |  Method resolution order:
     |      Tk
     |      Misc
     |      Wm
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __getattr__(self, attr)
     |      Delegate attribute access to the interpreter object
     |
     |  __init__(self, screenName=None, baseName=None, className='Tk', useTk=True, sync=False, use=None)
     |      Return a new top level widget on screen SCREENNAME. A new Tcl interpreter will
     |      be created. BASENAME will be used for the identification of the profile file (see
     |      readprofile).
     |      It is constructed from sys.argv[0] without extensions if None is given. CLASSNAME
     |      is the name of the widget class.
     |
     |  destroy(self)
     |      Destroy this and all descendants widgets. This will
     |      end the application of this Tcl interpreter.
     |
     |  loadtk(self)
     |
     |  readprofile(self, baseName, className)
     |      Internal function. It reads .BASENAME.tcl and .CLASSNAME.tcl into
     |      the Tcl Interpreter and calls exec on the contents of .BASENAME.py and
     |      .CLASSNAME.py if such a file exists in the home directory.
     |
     |  report_callback_exception(self, exc, val, tb)
     |      Report callback exception on sys.stderr.
     |
     |      Applications may want to override this internal function, and
     |      should when sys.stderr is None.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |
     |  __getitem__ = cget(self, key)
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  __setitem__(self, key, value)
     |
     |  __str__(self)
     |      Return the window path name of this widget.
     |
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |
     |  anchor = grid_anchor(self, anchor=None)
     |
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |
     |      This command is equivalent to:
     |
     |      selection_get(CLIPBOARD)
     |
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |
     |  config = configure(self, cnf=None, **kw)
     |
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |
     |  deletecommand(self, name)
     |      Internal function.
     |
     |      Delete the Tcl command provided in NAME.
     |
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |
     |  focus = focus_set(self)
     |
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |
     |      Return None if the application does not have the focus.
     |
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |
     |  focus_set(self)
     |      Direct input focus to this widget.
     |
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |
     |  getdouble(self, s)
     |
     |  getint(self, s)
     |
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |
     |  grab_set(self)
     |      Set grab for this widget.
     |
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |
     |      The default anchor is nw.
     |
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  image_names(self)
     |      Return a list of all existing image names.
     |
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |
     |  info_patchlevel(self)
     |      Returns the exact version of the Tcl library.
     |
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |
     |  lift = tkraise(self, aboveThis=None)
     |
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |
     |  option_clear(self)
     |      Clear the option database.
     |
     |      It will be reloaded if option_add is called.
     |
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |
     |      Values with higher priority override lower values.
     |
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |
     |      An optional second parameter gives the numeric
     |      priority.
     |
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |
     |  register = _register(self, func, subst=None, needcleanup=1)
     |
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |
     |  size = grid_size(self)
     |
     |  slaves = pack_slaves(self)
     |
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget the event SEQUENCE.
     |
     |      If FUNCID is given, only unbind the function identified with FUNCID
     |      and also delete the corresponding Tcl command.
     |
     |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
     |      unbound.
     |
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |
     |      If no parameter is given self is used.
     |
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |
     |      If no parameter is given self is used.
     |
     |  waitvar = wait_variable(self, name='PY_VAR')
     |
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |
     |  winfo_class(self)
     |      Return window class name of this widget.
     |
     |  winfo_colormapfull(self)
     |      Return True if at the last color request the colormap was full.
     |
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |
     |  winfo_height(self)
     |      Return height of this widget.
     |
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |
     |  winfo_name(self)
     |      Return the name of this widget.
     |
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |
     |  winfo_rgb(self, color)
     |      Return a tuple of integer RGB values in range(65536) for color in this widget.
     |
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_width(self)
     |      Return the width of this widget.
     |
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Wm:
     |
     |  aspect = wm_aspect(self, minNumer=None, minDenom=None, maxNumer=None, maxDenom=None)
     |
     |  attributes = wm_attributes(self, *args)
     |
     |  client = wm_client(self, name=None)
     |
     |  colormapwindows = wm_colormapwindows(self, *wlist)
     |
     |  command = wm_command(self, value=None)
     |
     |  deiconify = wm_deiconify(self)
     |
     |  focusmodel = wm_focusmodel(self, model=None)
     |
     |  forget = wm_forget(self, window)
     |
     |  frame = wm_frame(self)
     |
     |  geometry = wm_geometry(self, newGeometry=None)
     |
     |  grid = wm_grid(self, baseWidth=None, baseHeight=None, widthInc=None, heightInc=None)
     |
     |  group = wm_group(self, pathName=None)
     |
     |  iconbitmap = wm_iconbitmap(self, bitmap=None, default=None)
     |
     |  iconify = wm_iconify(self)
     |
     |  iconmask = wm_iconmask(self, bitmap=None)
     |
     |  iconname = wm_iconname(self, newName=None)
     |
     |  iconphoto = wm_iconphoto(self, default=False, *args)
     |
     |  iconposition = wm_iconposition(self, x=None, y=None)
     |
     |  iconwindow = wm_iconwindow(self, pathName=None)
     |
     |  manage = wm_manage(self, widget)
     |
     |  maxsize = wm_maxsize(self, width=None, height=None)
     |
     |  minsize = wm_minsize(self, width=None, height=None)
     |
     |  overrideredirect = wm_overrideredirect(self, boolean=None)
     |
     |  positionfrom = wm_positionfrom(self, who=None)
     |
     |  protocol = wm_protocol(self, name=None, func=None)
     |
     |  resizable = wm_resizable(self, width=None, height=None)
     |
     |  sizefrom = wm_sizefrom(self, who=None)
     |
     |  state = wm_state(self, newstate=None)
     |
     |  title = wm_title(self, string=None)
     |
     |  transient = wm_transient(self, master=None)
     |
     |  withdraw = wm_withdraw(self)
     |
     |  wm_aspect(self, minNumer=None, minDenom=None, maxNumer=None, maxDenom=None)
     |      Instruct the window manager to set the aspect ratio (width/height)
     |      of this widget to be between MINNUMER/MINDENOM and MAXNUMER/MAXDENOM. Return a tuple
     |      of the actual values if no argument is given.
     |
     |  wm_attributes(self, *args)
     |      This subcommand returns or sets platform specific attributes
     |
     |      The first form returns a list of the platform specific flags and
     |      their values. The second form returns the value for the specific
     |      option. The third form sets one or more of the values. The values
     |      are as follows:
     |
     |      On Windows, -disabled gets or sets whether the window is in a
     |      disabled state. -toolwindow gets or sets the style of the window
     |      to toolwindow (as defined in the MSDN). -topmost gets or sets
     |      whether this is a topmost window (displays above all other
     |      windows).
     |
     |      On Macintosh, XXXXX
     |
     |      On Unix, there are currently no special attribute values.
     |
     |  wm_client(self, name=None)
     |      Store NAME in WM_CLIENT_MACHINE property of this widget. Return
     |      current value.
     |
     |  wm_colormapwindows(self, *wlist)
     |      Store list of window names (WLIST) into WM_COLORMAPWINDOWS property
     |      of this widget. This list contains windows whose colormaps differ from their
     |      parents. Return current list of widgets if WLIST is empty.
     |
     |  wm_command(self, value=None)
     |      Store VALUE in WM_COMMAND property. It is the command
     |      which shall be used to invoke the application. Return current
     |      command if VALUE is None.
     |
     |  wm_deiconify(self)
     |      Deiconify this widget. If it was never mapped it will not be mapped.
     |      On Windows it will raise this widget and give it the focus.
     |
     |  wm_focusmodel(self, model=None)
     |      Set focus model to MODEL. "active" means that this widget will claim
     |      the focus itself, "passive" means that the window manager shall give
     |      the focus. Return current focus model if MODEL is None.
     |
     |  wm_forget(self, window)
     |      The window will be unmapped from the screen and will no longer
     |      be managed by wm. toplevel windows will be treated like frame
     |      windows once they are no longer managed by wm, however, the menu
     |      option configuration will be remembered and the menus will return
     |      once the widget is managed again.
     |
     |  wm_frame(self)
     |      Return identifier for decorative frame of this widget if present.
     |
     |  wm_geometry(self, newGeometry=None)
     |      Set geometry to NEWGEOMETRY of the form =widthxheight+x+y. Return
     |      current value if None is given.
     |
     |  wm_grid(self, baseWidth=None, baseHeight=None, widthInc=None, heightInc=None)
     |      Instruct the window manager that this widget shall only be
     |      resized on grid boundaries. WIDTHINC and HEIGHTINC are the width and
     |      height of a grid unit in pixels. BASEWIDTH and BASEHEIGHT are the
     |      number of grid units requested in Tk_GeometryRequest.
     |
     |  wm_group(self, pathName=None)
     |      Set the group leader widgets for related widgets to PATHNAME. Return
     |      the group leader of this widget if None is given.
     |
     |  wm_iconbitmap(self, bitmap=None, default=None)
     |      Set bitmap for the iconified widget to BITMAP. Return
     |      the bitmap if None is given.
     |
     |      Under Windows, the DEFAULT parameter can be used to set the icon
     |      for the widget and any descendants that don't have an icon set
     |      explicitly.  DEFAULT can be the relative path to a .ico file
     |      (example: root.iconbitmap(default='myicon.ico') ).  See Tk
     |      documentation for more information.
     |
     |  wm_iconify(self)
     |      Display widget as icon.
     |
     |  wm_iconmask(self, bitmap=None)
     |      Set mask for the icon bitmap of this widget. Return the
     |      mask if None is given.
     |
     |  wm_iconname(self, newName=None)
     |      Set the name of the icon for this widget. Return the name if
     |      None is given.
     |
     |  wm_iconphoto(self, default=False, *args)
     |      Sets the titlebar icon for this window based on the named photo
     |      images passed through args. If default is True, this is applied to
     |      all future created toplevels as well.
     |
     |      The data in the images is taken as a snapshot at the time of
     |      invocation. If the images are later changed, this is not reflected
     |      to the titlebar icons. Multiple images are accepted to allow
     |      different images sizes to be provided. The window manager may scale
     |      provided icons to an appropriate size.
     |
     |      On Windows, the images are packed into a Windows icon structure.
     |      This will override an icon specified to wm_iconbitmap, and vice
     |      versa.
     |
     |      On X, the images are arranged into the _NET_WM_ICON X property,
     |      which most modern window managers support. An icon specified by
     |      wm_iconbitmap may exist simultaneously.
     |
     |      On Macintosh, this currently does nothing.
     |
     |  wm_iconposition(self, x=None, y=None)
     |      Set the position of the icon of this widget to X and Y. Return
     |      a tuple of the current values of X and X if None is given.
     |
     |  wm_iconwindow(self, pathName=None)
     |      Set widget PATHNAME to be displayed instead of icon. Return the current
     |      value if None is given.
     |
     |  wm_manage(self, widget)
     |      The widget specified will become a stand alone top-level window.
     |      The window will be decorated with the window managers title bar,
     |      etc.
     |
     |  wm_maxsize(self, width=None, height=None)
     |      Set max WIDTH and HEIGHT for this widget. If the window is gridded
     |      the values are given in grid units. Return the current values if None
     |      is given.
     |
     |  wm_minsize(self, width=None, height=None)
     |      Set min WIDTH and HEIGHT for this widget. If the window is gridded
     |      the values are given in grid units. Return the current values if None
     |      is given.
     |
     |  wm_overrideredirect(self, boolean=None)
     |      Instruct the window manager to ignore this widget
     |      if BOOLEAN is given with 1. Return the current value if None
     |      is given.
     |
     |  wm_positionfrom(self, who=None)
     |      Instruct the window manager that the position of this widget shall
     |      be defined by the user if WHO is "user", and by its own policy if WHO is
     |      "program".
     |
     |  wm_protocol(self, name=None, func=None)
     |      Bind function FUNC to command NAME for this widget.
     |      Return the function bound to NAME if None is given. NAME could be
     |      e.g. "WM_SAVE_YOURSELF" or "WM_DELETE_WINDOW".
     |
     |  wm_resizable(self, width=None, height=None)
     |      Instruct the window manager whether this width can be resized
     |      in WIDTH or HEIGHT. Both values are boolean values.
     |
     |  wm_sizefrom(self, who=None)
     |      Instruct the window manager that the size of this widget shall
     |      be defined by the user if WHO is "user", and by its own policy if WHO is
     |      "program".
     |
     |  wm_state(self, newstate=None)
     |      Query or set the state of this widget as one of normal, icon,
     |      iconic (see wm_iconwindow), withdrawn, or zoomed (Windows only).
     |
     |  wm_title(self, string=None)
     |      Set the title of this widget.
     |
     |  wm_transient(self, master=None)
     |      Instruct the window manager that this widget is transient
     |      with regard to widget MASTER.
     |
     |  wm_withdraw(self)
     |      Withdraw this widget from the screen such that it is unmapped
     |      and forgotten by the window manager. Re-draw it with wm_deiconify.

    class Toplevel(BaseWidget, Wm)
     |  Toplevel(master=None, cnf={}, **kw)
     |
     |  Toplevel widget, e.g. for dialogs.
     |
     |  Method resolution order:
     |      Toplevel
     |      BaseWidget
     |      Misc
     |      Wm
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct a toplevel widget with the parent MASTER.
     |
     |      Valid resource names: background, bd, bg, borderwidth, class,
     |      colormap, container, cursor, height, highlightbackground,
     |      highlightcolor, highlightthickness, menu, relief, screen, takefocus,
     |      use, visual, width.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |
     |  __getitem__ = cget(self, key)
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  __setitem__(self, key, value)
     |
     |  __str__(self)
     |      Return the window path name of this widget.
     |
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |
     |  anchor = grid_anchor(self, anchor=None)
     |
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |
     |      This command is equivalent to:
     |
     |      selection_get(CLIPBOARD)
     |
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |
     |  config = configure(self, cnf=None, **kw)
     |
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |
     |  deletecommand(self, name)
     |      Internal function.
     |
     |      Delete the Tcl command provided in NAME.
     |
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |
     |  focus = focus_set(self)
     |
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |
     |      Return None if the application does not have the focus.
     |
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |
     |  focus_set(self)
     |      Direct input focus to this widget.
     |
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |
     |  getdouble(self, s)
     |
     |  getint(self, s)
     |
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |
     |  grab_set(self)
     |      Set grab for this widget.
     |
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |
     |      The default anchor is nw.
     |
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  image_names(self)
     |      Return a list of all existing image names.
     |
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |
     |  info_patchlevel(self)
     |      Returns the exact version of the Tcl library.
     |
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |
     |  lift = tkraise(self, aboveThis=None)
     |
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |
     |  option_clear(self)
     |      Clear the option database.
     |
     |      It will be reloaded if option_add is called.
     |
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |
     |      Values with higher priority override lower values.
     |
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |
     |      An optional second parameter gives the numeric
     |      priority.
     |
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |
     |  register = _register(self, func, subst=None, needcleanup=1)
     |
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |
     |  size = grid_size(self)
     |
     |  slaves = pack_slaves(self)
     |
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget the event SEQUENCE.
     |
     |      If FUNCID is given, only unbind the function identified with FUNCID
     |      and also delete the corresponding Tcl command.
     |
     |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
     |      unbound.
     |
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |
     |      If no parameter is given self is used.
     |
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |
     |      If no parameter is given self is used.
     |
     |  waitvar = wait_variable(self, name='PY_VAR')
     |
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |
     |  winfo_class(self)
     |      Return window class name of this widget.
     |
     |  winfo_colormapfull(self)
     |      Return True if at the last color request the colormap was full.
     |
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |
     |  winfo_height(self)
     |      Return height of this widget.
     |
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |
     |  winfo_name(self)
     |      Return the name of this widget.
     |
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |
     |  winfo_rgb(self, color)
     |      Return a tuple of integer RGB values in range(65536) for color in this widget.
     |
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_width(self)
     |      Return the width of this widget.
     |
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Wm:
     |
     |  aspect = wm_aspect(self, minNumer=None, minDenom=None, maxNumer=None, maxDenom=None)
     |
     |  attributes = wm_attributes(self, *args)
     |
     |  client = wm_client(self, name=None)
     |
     |  colormapwindows = wm_colormapwindows(self, *wlist)
     |
     |  command = wm_command(self, value=None)
     |
     |  deiconify = wm_deiconify(self)
     |
     |  focusmodel = wm_focusmodel(self, model=None)
     |
     |  forget = wm_forget(self, window)
     |
     |  frame = wm_frame(self)
     |
     |  geometry = wm_geometry(self, newGeometry=None)
     |
     |  grid = wm_grid(self, baseWidth=None, baseHeight=None, widthInc=None, heightInc=None)
     |
     |  group = wm_group(self, pathName=None)
     |
     |  iconbitmap = wm_iconbitmap(self, bitmap=None, default=None)
     |
     |  iconify = wm_iconify(self)
     |
     |  iconmask = wm_iconmask(self, bitmap=None)
     |
     |  iconname = wm_iconname(self, newName=None)
     |
     |  iconphoto = wm_iconphoto(self, default=False, *args)
     |
     |  iconposition = wm_iconposition(self, x=None, y=None)
     |
     |  iconwindow = wm_iconwindow(self, pathName=None)
     |
     |  manage = wm_manage(self, widget)
     |
     |  maxsize = wm_maxsize(self, width=None, height=None)
     |
     |  minsize = wm_minsize(self, width=None, height=None)
     |
     |  overrideredirect = wm_overrideredirect(self, boolean=None)
     |
     |  positionfrom = wm_positionfrom(self, who=None)
     |
     |  protocol = wm_protocol(self, name=None, func=None)
     |
     |  resizable = wm_resizable(self, width=None, height=None)
     |
     |  sizefrom = wm_sizefrom(self, who=None)
     |
     |  state = wm_state(self, newstate=None)
     |
     |  title = wm_title(self, string=None)
     |
     |  transient = wm_transient(self, master=None)
     |
     |  withdraw = wm_withdraw(self)
     |
     |  wm_aspect(self, minNumer=None, minDenom=None, maxNumer=None, maxDenom=None)
     |      Instruct the window manager to set the aspect ratio (width/height)
     |      of this widget to be between MINNUMER/MINDENOM and MAXNUMER/MAXDENOM. Return a tuple
     |      of the actual values if no argument is given.
     |
     |  wm_attributes(self, *args)
     |      This subcommand returns or sets platform specific attributes
     |
     |      The first form returns a list of the platform specific flags and
     |      their values. The second form returns the value for the specific
     |      option. The third form sets one or more of the values. The values
     |      are as follows:
     |
     |      On Windows, -disabled gets or sets whether the window is in a
     |      disabled state. -toolwindow gets or sets the style of the window
     |      to toolwindow (as defined in the MSDN). -topmost gets or sets
     |      whether this is a topmost window (displays above all other
     |      windows).
     |
     |      On Macintosh, XXXXX
     |
     |      On Unix, there are currently no special attribute values.
     |
     |  wm_client(self, name=None)
     |      Store NAME in WM_CLIENT_MACHINE property of this widget. Return
     |      current value.
     |
     |  wm_colormapwindows(self, *wlist)
     |      Store list of window names (WLIST) into WM_COLORMAPWINDOWS property
     |      of this widget. This list contains windows whose colormaps differ from their
     |      parents. Return current list of widgets if WLIST is empty.
     |
     |  wm_command(self, value=None)
     |      Store VALUE in WM_COMMAND property. It is the command
     |      which shall be used to invoke the application. Return current
     |      command if VALUE is None.
     |
     |  wm_deiconify(self)
     |      Deiconify this widget. If it was never mapped it will not be mapped.
     |      On Windows it will raise this widget and give it the focus.
     |
     |  wm_focusmodel(self, model=None)
     |      Set focus model to MODEL. "active" means that this widget will claim
     |      the focus itself, "passive" means that the window manager shall give
     |      the focus. Return current focus model if MODEL is None.
     |
     |  wm_forget(self, window)
     |      The window will be unmapped from the screen and will no longer
     |      be managed by wm. toplevel windows will be treated like frame
     |      windows once they are no longer managed by wm, however, the menu
     |      option configuration will be remembered and the menus will return
     |      once the widget is managed again.
     |
     |  wm_frame(self)
     |      Return identifier for decorative frame of this widget if present.
     |
     |  wm_geometry(self, newGeometry=None)
     |      Set geometry to NEWGEOMETRY of the form =widthxheight+x+y. Return
     |      current value if None is given.
     |
     |  wm_grid(self, baseWidth=None, baseHeight=None, widthInc=None, heightInc=None)
     |      Instruct the window manager that this widget shall only be
     |      resized on grid boundaries. WIDTHINC and HEIGHTINC are the width and
     |      height of a grid unit in pixels. BASEWIDTH and BASEHEIGHT are the
     |      number of grid units requested in Tk_GeometryRequest.
     |
     |  wm_group(self, pathName=None)
     |      Set the group leader widgets for related widgets to PATHNAME. Return
     |      the group leader of this widget if None is given.
     |
     |  wm_iconbitmap(self, bitmap=None, default=None)
     |      Set bitmap for the iconified widget to BITMAP. Return
     |      the bitmap if None is given.
     |
     |      Under Windows, the DEFAULT parameter can be used to set the icon
     |      for the widget and any descendants that don't have an icon set
     |      explicitly.  DEFAULT can be the relative path to a .ico file
     |      (example: root.iconbitmap(default='myicon.ico') ).  See Tk
     |      documentation for more information.
     |
     |  wm_iconify(self)
     |      Display widget as icon.
     |
     |  wm_iconmask(self, bitmap=None)
     |      Set mask for the icon bitmap of this widget. Return the
     |      mask if None is given.
     |
     |  wm_iconname(self, newName=None)
     |      Set the name of the icon for this widget. Return the name if
     |      None is given.
     |
     |  wm_iconphoto(self, default=False, *args)
     |      Sets the titlebar icon for this window based on the named photo
     |      images passed through args. If default is True, this is applied to
     |      all future created toplevels as well.
     |
     |      The data in the images is taken as a snapshot at the time of
     |      invocation. If the images are later changed, this is not reflected
     |      to the titlebar icons. Multiple images are accepted to allow
     |      different images sizes to be provided. The window manager may scale
     |      provided icons to an appropriate size.
     |
     |      On Windows, the images are packed into a Windows icon structure.
     |      This will override an icon specified to wm_iconbitmap, and vice
     |      versa.
     |
     |      On X, the images are arranged into the _NET_WM_ICON X property,
     |      which most modern window managers support. An icon specified by
     |      wm_iconbitmap may exist simultaneously.
     |
     |      On Macintosh, this currently does nothing.
     |
     |  wm_iconposition(self, x=None, y=None)
     |      Set the position of the icon of this widget to X and Y. Return
     |      a tuple of the current values of X and X if None is given.
     |
     |  wm_iconwindow(self, pathName=None)
     |      Set widget PATHNAME to be displayed instead of icon. Return the current
     |      value if None is given.
     |
     |  wm_manage(self, widget)
     |      The widget specified will become a stand alone top-level window.
     |      The window will be decorated with the window managers title bar,
     |      etc.
     |
     |  wm_maxsize(self, width=None, height=None)
     |      Set max WIDTH and HEIGHT for this widget. If the window is gridded
     |      the values are given in grid units. Return the current values if None
     |      is given.
     |
     |  wm_minsize(self, width=None, height=None)
     |      Set min WIDTH and HEIGHT for this widget. If the window is gridded
     |      the values are given in grid units. Return the current values if None
     |      is given.
     |
     |  wm_overrideredirect(self, boolean=None)
     |      Instruct the window manager to ignore this widget
     |      if BOOLEAN is given with 1. Return the current value if None
     |      is given.
     |
     |  wm_positionfrom(self, who=None)
     |      Instruct the window manager that the position of this widget shall
     |      be defined by the user if WHO is "user", and by its own policy if WHO is
     |      "program".
     |
     |  wm_protocol(self, name=None, func=None)
     |      Bind function FUNC to command NAME for this widget.
     |      Return the function bound to NAME if None is given. NAME could be
     |      e.g. "WM_SAVE_YOURSELF" or "WM_DELETE_WINDOW".
     |
     |  wm_resizable(self, width=None, height=None)
     |      Instruct the window manager whether this width can be resized
     |      in WIDTH or HEIGHT. Both values are boolean values.
     |
     |  wm_sizefrom(self, who=None)
     |      Instruct the window manager that the size of this widget shall
     |      be defined by the user if WHO is "user", and by its own policy if WHO is
     |      "program".
     |
     |  wm_state(self, newstate=None)
     |      Query or set the state of this widget as one of normal, icon,
     |      iconic (see wm_iconwindow), withdrawn, or zoomed (Windows only).
     |
     |  wm_title(self, string=None)
     |      Set the title of this widget.
     |
     |  wm_transient(self, master=None)
     |      Instruct the window manager that this widget is transient
     |      with regard to widget MASTER.
     |
     |  wm_withdraw(self)
     |      Withdraw this widget from the screen such that it is unmapped
     |      and forgotten by the window manager. Re-draw it with wm_deiconify.

    class Variable(builtins.object)
     |  Variable(master=None, value=None, name=None)
     |
     |  Class to define value holders for e.g. buttons.
     |
     |  Subclasses StringVar, IntVar, DoubleVar, BooleanVar are specializations
     |  that constrain the type of the value returned from get().
     |
     |  Methods defined here:
     |
     |  __del__(self)
     |      Unset the variable in Tcl.
     |
     |  __eq__(self, other)
     |      Return self==value.
     |
     |  __init__(self, master=None, value=None, name=None)
     |      Construct a variable
     |
     |      MASTER can be given as master widget.
     |      VALUE is an optional value (defaults to "")
     |      NAME is an optional Tcl name (defaults to PY_VARnum).
     |
     |      If NAME matches an existing variable and VALUE is omitted
     |      then the existing value is retained.
     |
     |  __str__(self)
     |      Return the name of the variable in Tcl.
     |
     |  get(self)
     |      Return value of variable.
     |
     |  initialize = set(self, value)
     |
     |  set(self, value)
     |      Set the variable to VALUE.
     |
     |  trace = trace_variable(self, mode, callback)
     |
     |  trace_add(self, mode, callback)
     |      Define a trace callback for the variable.
     |
     |      Mode is one of "read", "write", "unset", or a list or tuple of
     |      such strings.
     |      Callback must be a function which is called when the variable is
     |      read, written or unset.
     |
     |      Return the name of the callback.
     |
     |  trace_info(self)
     |      Return all trace callback information.
     |
     |  trace_remove(self, mode, cbname)
     |      Delete the trace callback for a variable.
     |
     |      Mode is one of "read", "write", "unset" or a list or tuple of
     |      such strings.  Must be same as were specified in trace_add().
     |      cbname is the name of the callback returned from trace_add().
     |
     |  trace_variable(self, mode, callback)
     |      Define a trace callback for the variable.
     |
     |      MODE is one of "r", "w", "u" for read, write, undefine.
     |      CALLBACK must be a function which is called when
     |      the variable is read, written or undefined.
     |
     |      Return the name of the callback.
     |
     |      This deprecated method wraps a deprecated Tcl method that will
     |      likely be removed in the future.  Use trace_add() instead.
     |
     |  trace_vdelete(self, mode, cbname)
     |      Delete the trace callback for a variable.
     |
     |      MODE is one of "r", "w", "u" for read, write, undefine.
     |      CBNAME is the name of the callback returned from trace_variable or trace.
     |
     |      This deprecated method wraps a deprecated Tcl method that will
     |      likely be removed in the future.  Use trace_remove() instead.
     |
     |  trace_vinfo(self)
     |      Return all trace callback information.
     |
     |      This deprecated method wraps a deprecated Tcl method that will
     |      likely be removed in the future.  Use trace_info() instead.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |
     |  __hash__ = None

    class Widget(BaseWidget, Pack, Place, Grid)
     |  Widget(master, widgetName, cnf={}, kw={}, extra=())
     |
     |  Internal class.
     |
     |  Base class for a widget which can be positioned with the geometry managers
     |  Pack, Place or Grid.
     |
     |  Method resolution order:
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      builtins.object
     |
     |  Methods inherited from BaseWidget:
     |
     |  __init__(self, master, widgetName, cnf={}, kw={}, extra=())
     |      Construct a widget with the parent widget MASTER, a name WIDGETNAME
     |      and appropriate options.
     |
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |
     |  __getitem__ = cget(self, key)
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  __setitem__(self, key, value)
     |
     |  __str__(self)
     |      Return the window path name of this widget.
     |
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |
     |  anchor = grid_anchor(self, anchor=None)
     |
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |
     |      This command is equivalent to:
     |
     |      selection_get(CLIPBOARD)
     |
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |
     |  config = configure(self, cnf=None, **kw)
     |
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |
     |  deletecommand(self, name)
     |      Internal function.
     |
     |      Delete the Tcl command provided in NAME.
     |
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |
     |  focus = focus_set(self)
     |
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |
     |      Return None if the application does not have the focus.
     |
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |
     |  focus_set(self)
     |      Direct input focus to this widget.
     |
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |
     |  getdouble(self, s)
     |
     |  getint(self, s)
     |
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |
     |  grab_set(self)
     |      Set grab for this widget.
     |
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |
     |      The default anchor is nw.
     |
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  image_names(self)
     |      Return a list of all existing image names.
     |
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |
     |  info_patchlevel(self)
     |      Returns the exact version of the Tcl library.
     |
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |
     |  lift = tkraise(self, aboveThis=None)
     |
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |
     |  option_clear(self)
     |      Clear the option database.
     |
     |      It will be reloaded if option_add is called.
     |
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |
     |      Values with higher priority override lower values.
     |
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |
     |      An optional second parameter gives the numeric
     |      priority.
     |
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |
     |  register = _register(self, func, subst=None, needcleanup=1)
     |
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |
     |  size = grid_size(self)
     |
     |  slaves = pack_slaves(self)
     |
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget the event SEQUENCE.
     |
     |      If FUNCID is given, only unbind the function identified with FUNCID
     |      and also delete the corresponding Tcl command.
     |
     |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
     |      unbound.
     |
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |
     |      If no parameter is given self is used.
     |
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |
     |      If no parameter is given self is used.
     |
     |  waitvar = wait_variable(self, name='PY_VAR')
     |
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |
     |  winfo_class(self)
     |      Return window class name of this widget.
     |
     |  winfo_colormapfull(self)
     |      Return True if at the last color request the colormap was full.
     |
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |
     |  winfo_height(self)
     |      Return height of this widget.
     |
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |
     |  winfo_name(self)
     |      Return the name of this widget.
     |
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |
     |  winfo_rgb(self, color)
     |      Return a tuple of integer RGB values in range(65536) for color in this widget.
     |
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_width(self)
     |      Return the width of this widget.
     |
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |
     |  forget = pack_forget(self)
     |
     |  info = pack_info(self)
     |
     |  pack = pack_configure(self, cnf={}, **kw)
     |
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |
     |  place = place_configure(self, cnf={}, **kw)
     |
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |
     |  place_forget(self)
     |      Unmap this widget.
     |
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |
     |  grid = grid_configure(self, cnf={}, **kw)
     |
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |
     |  grid_forget(self)
     |      Unmap this widget.
     |
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |
     |  location = grid_location(self, x, y)

    class Wm(builtins.object)
     |  Provides functions for the communication with the window manager.
     |
     |  Methods defined here:
     |
     |  aspect = wm_aspect(self, minNumer=None, minDenom=None, maxNumer=None, maxDenom=None)
     |
     |  attributes = wm_attributes(self, *args)
     |
     |  client = wm_client(self, name=None)
     |
     |  colormapwindows = wm_colormapwindows(self, *wlist)
     |
     |  command = wm_command(self, value=None)
     |
     |  deiconify = wm_deiconify(self)
     |
     |  focusmodel = wm_focusmodel(self, model=None)
     |
     |  forget = wm_forget(self, window)
     |
     |  frame = wm_frame(self)
     |
     |  geometry = wm_geometry(self, newGeometry=None)
     |
     |  grid = wm_grid(self, baseWidth=None, baseHeight=None, widthInc=None, heightInc=None)
     |
     |  group = wm_group(self, pathName=None)
     |
     |  iconbitmap = wm_iconbitmap(self, bitmap=None, default=None)
     |
     |  iconify = wm_iconify(self)
     |
     |  iconmask = wm_iconmask(self, bitmap=None)
     |
     |  iconname = wm_iconname(self, newName=None)
     |
     |  iconphoto = wm_iconphoto(self, default=False, *args)
     |
     |  iconposition = wm_iconposition(self, x=None, y=None)
     |
     |  iconwindow = wm_iconwindow(self, pathName=None)
     |
     |  manage = wm_manage(self, widget)
     |
     |  maxsize = wm_maxsize(self, width=None, height=None)
     |
     |  minsize = wm_minsize(self, width=None, height=None)
     |
     |  overrideredirect = wm_overrideredirect(self, boolean=None)
     |
     |  positionfrom = wm_positionfrom(self, who=None)
     |
     |  protocol = wm_protocol(self, name=None, func=None)
     |
     |  resizable = wm_resizable(self, width=None, height=None)
     |
     |  sizefrom = wm_sizefrom(self, who=None)
     |
     |  state = wm_state(self, newstate=None)
     |
     |  title = wm_title(self, string=None)
     |
     |  transient = wm_transient(self, master=None)
     |
     |  withdraw = wm_withdraw(self)
     |
     |  wm_aspect(self, minNumer=None, minDenom=None, maxNumer=None, maxDenom=None)
     |      Instruct the window manager to set the aspect ratio (width/height)
     |      of this widget to be between MINNUMER/MINDENOM and MAXNUMER/MAXDENOM. Return a tuple
     |      of the actual values if no argument is given.
     |
     |  wm_attributes(self, *args)
     |      This subcommand returns or sets platform specific attributes
     |
     |      The first form returns a list of the platform specific flags and
     |      their values. The second form returns the value for the specific
     |      option. The third form sets one or more of the values. The values
     |      are as follows:
     |
     |      On Windows, -disabled gets or sets whether the window is in a
     |      disabled state. -toolwindow gets or sets the style of the window
     |      to toolwindow (as defined in the MSDN). -topmost gets or sets
     |      whether this is a topmost window (displays above all other
     |      windows).
     |
     |      On Macintosh, XXXXX
     |
     |      On Unix, there are currently no special attribute values.
     |
     |  wm_client(self, name=None)
     |      Store NAME in WM_CLIENT_MACHINE property of this widget. Return
     |      current value.
     |
     |  wm_colormapwindows(self, *wlist)
     |      Store list of window names (WLIST) into WM_COLORMAPWINDOWS property
     |      of this widget. This list contains windows whose colormaps differ from their
     |      parents. Return current list of widgets if WLIST is empty.
     |
     |  wm_command(self, value=None)
     |      Store VALUE in WM_COMMAND property. It is the command
     |      which shall be used to invoke the application. Return current
     |      command if VALUE is None.
     |
     |  wm_deiconify(self)
     |      Deiconify this widget. If it was never mapped it will not be mapped.
     |      On Windows it will raise this widget and give it the focus.
     |
     |  wm_focusmodel(self, model=None)
     |      Set focus model to MODEL. "active" means that this widget will claim
     |      the focus itself, "passive" means that the window manager shall give
     |      the focus. Return current focus model if MODEL is None.
     |
     |  wm_forget(self, window)
     |      The window will be unmapped from the screen and will no longer
     |      be managed by wm. toplevel windows will be treated like frame
     |      windows once they are no longer managed by wm, however, the menu
     |      option configuration will be remembered and the menus will return
     |      once the widget is managed again.
     |
     |  wm_frame(self)
     |      Return identifier for decorative frame of this widget if present.
     |
     |  wm_geometry(self, newGeometry=None)
     |      Set geometry to NEWGEOMETRY of the form =widthxheight+x+y. Return
     |      current value if None is given.
     |
     |  wm_grid(self, baseWidth=None, baseHeight=None, widthInc=None, heightInc=None)
     |      Instruct the window manager that this widget shall only be
     |      resized on grid boundaries. WIDTHINC and HEIGHTINC are the width and
     |      height of a grid unit in pixels. BASEWIDTH and BASEHEIGHT are the
     |      number of grid units requested in Tk_GeometryRequest.
     |
     |  wm_group(self, pathName=None)
     |      Set the group leader widgets for related widgets to PATHNAME. Return
     |      the group leader of this widget if None is given.
     |
     |  wm_iconbitmap(self, bitmap=None, default=None)
     |      Set bitmap for the iconified widget to BITMAP. Return
     |      the bitmap if None is given.
     |
     |      Under Windows, the DEFAULT parameter can be used to set the icon
     |      for the widget and any descendants that don't have an icon set
     |      explicitly.  DEFAULT can be the relative path to a .ico file
     |      (example: root.iconbitmap(default='myicon.ico') ).  See Tk
     |      documentation for more information.
     |
     |  wm_iconify(self)
     |      Display widget as icon.
     |
     |  wm_iconmask(self, bitmap=None)
     |      Set mask for the icon bitmap of this widget. Return the
     |      mask if None is given.
     |
     |  wm_iconname(self, newName=None)
     |      Set the name of the icon for this widget. Return the name if
     |      None is given.
     |
     |  wm_iconphoto(self, default=False, *args)
     |      Sets the titlebar icon for this window based on the named photo
     |      images passed through args. If default is True, this is applied to
     |      all future created toplevels as well.
     |
     |      The data in the images is taken as a snapshot at the time of
     |      invocation. If the images are later changed, this is not reflected
     |      to the titlebar icons. Multiple images are accepted to allow
     |      different images sizes to be provided. The window manager may scale
     |      provided icons to an appropriate size.
     |
     |      On Windows, the images are packed into a Windows icon structure.
     |      This will override an icon specified to wm_iconbitmap, and vice
     |      versa.
     |
     |      On X, the images are arranged into the _NET_WM_ICON X property,
     |      which most modern window managers support. An icon specified by
     |      wm_iconbitmap may exist simultaneously.
     |
     |      On Macintosh, this currently does nothing.
     |
     |  wm_iconposition(self, x=None, y=None)
     |      Set the position of the icon of this widget to X and Y. Return
     |      a tuple of the current values of X and X if None is given.
     |
     |  wm_iconwindow(self, pathName=None)
     |      Set widget PATHNAME to be displayed instead of icon. Return the current
     |      value if None is given.
     |
     |  wm_manage(self, widget)
     |      The widget specified will become a stand alone top-level window.
     |      The window will be decorated with the window managers title bar,
     |      etc.
     |
     |  wm_maxsize(self, width=None, height=None)
     |      Set max WIDTH and HEIGHT for this widget. If the window is gridded
     |      the values are given in grid units. Return the current values if None
     |      is given.
     |
     |  wm_minsize(self, width=None, height=None)
     |      Set min WIDTH and HEIGHT for this widget. If the window is gridded
     |      the values are given in grid units. Return the current values if None
     |      is given.
     |
     |  wm_overrideredirect(self, boolean=None)
     |      Instruct the window manager to ignore this widget
     |      if BOOLEAN is given with 1. Return the current value if None
     |      is given.
     |
     |  wm_positionfrom(self, who=None)
     |      Instruct the window manager that the position of this widget shall
     |      be defined by the user if WHO is "user", and by its own policy if WHO is
     |      "program".
     |
     |  wm_protocol(self, name=None, func=None)
     |      Bind function FUNC to command NAME for this widget.
     |      Return the function bound to NAME if None is given. NAME could be
     |      e.g. "WM_SAVE_YOURSELF" or "WM_DELETE_WINDOW".
     |
     |  wm_resizable(self, width=None, height=None)
     |      Instruct the window manager whether this width can be resized
     |      in WIDTH or HEIGHT. Both values are boolean values.
     |
     |  wm_sizefrom(self, who=None)
     |      Instruct the window manager that the size of this widget shall
     |      be defined by the user if WHO is "user", and by its own policy if WHO is
     |      "program".
     |
     |  wm_state(self, newstate=None)
     |      Query or set the state of this widget as one of normal, icon,
     |      iconic (see wm_iconwindow), withdrawn, or zoomed (Windows only).
     |
     |  wm_title(self, string=None)
     |      Set the title of this widget.
     |
     |  wm_transient(self, master=None)
     |      Instruct the window manager that this widget is transient
     |      with regard to widget MASTER.
     |
     |  wm_withdraw(self)
     |      Withdraw this widget from the screen such that it is unmapped
     |      and forgotten by the window manager. Re-draw it with wm_deiconify.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object

    class XView(builtins.object)
     |  Mix-in class for querying and changing the horizontal position
     |  of a widget's window.
     |
     |  Methods defined here:
     |
     |  xview(self, *args)
     |      Query and change the horizontal position of the view.
     |
     |  xview_moveto(self, fraction)
     |      Adjusts the view in the window so that FRACTION of the
     |      total width of the canvas is off-screen to the left.
     |
     |  xview_scroll(self, number, what)
     |      Shift the x-view according to NUMBER which is measured in "units"
     |      or "pages" (WHAT).
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object

    class YView(builtins.object)
     |  Mix-in class for querying and changing the vertical position
     |  of a widget's window.
     |
     |  Methods defined here:
     |
     |  yview(self, *args)
     |      Query and change the vertical position of the view.
     |
     |  yview_moveto(self, fraction)
     |      Adjusts the view in the window so that FRACTION of the
     |      total height of the canvas is off-screen to the top.
     |
     |  yview_scroll(self, number, what)
     |      Shift the y-view according to NUMBER which is measured in
     |      "units" or "pages" (WHAT).
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object

    getdouble = class float(object)
     |  getdouble(x=0, /)
     |
     |  Convert a string or number to a floating point number, if possible.
     |
     |  Methods defined here:
     |
     |  __abs__(self, /)
     |      abs(self)
     |
     |  __add__(self, value, /)
     |      Return self+value.
     |
     |  __bool__(self, /)
     |      True if self else False
     |
     |  __ceil__(self, /)
     |      Return the ceiling as an Integral.
     |
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |
     |  __eq__(self, value, /)
     |      Return self==value.
     |
     |  __float__(self, /)
     |      float(self)
     |
     |  __floor__(self, /)
     |      Return the floor as an Integral.
     |
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |
     |  __format__(self, format_spec, /)
     |      Formats the float according to format_spec.
     |
     |  __ge__(self, value, /)
     |      Return self>=value.
     |
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |
     |  __getnewargs__(self, /)
     |
     |  __gt__(self, value, /)
     |      Return self>value.
     |
     |  __hash__(self, /)
     |      Return hash(self).
     |
     |  __int__(self, /)
     |      int(self)
     |
     |  __le__(self, value, /)
     |      Return self<=value.
     |
     |  __lt__(self, value, /)
     |      Return self<value.
     |
     |  __mod__(self, value, /)
     |      Return self%value.
     |
     |  __mul__(self, value, /)
     |      Return self*value.
     |
     |  __ne__(self, value, /)
     |      Return self!=value.
     |
     |  __neg__(self, /)
     |      -self
     |
     |  __pos__(self, /)
     |      +self
     |
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |
     |  __radd__(self, value, /)
     |      Return value+self.
     |
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |
     |  __repr__(self, /)
     |      Return repr(self).
     |
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |
     |  __rmod__(self, value, /)
     |      Return value%self.
     |
     |  __rmul__(self, value, /)
     |      Return value*self.
     |
     |  __round__(self, ndigits=None, /)
     |      Return the Integral closest to x, rounding half toward even.
     |
     |      When an argument is passed, work like built-in round(x, ndigits).
     |
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |
     |  __rsub__(self, value, /)
     |      Return value-self.
     |
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |
     |  __sub__(self, value, /)
     |      Return self-value.
     |
     |  __truediv__(self, value, /)
     |      Return self/value.
     |
     |  __trunc__(self, /)
     |      Return the Integral closest to x between 0 and x.
     |
     |  as_integer_ratio(self, /)
     |      Return a pair of integers, whose ratio is exactly equal to the original float.
     |
     |      The ratio is in lowest terms and has a positive denominator.  Raise
     |      OverflowError on infinities and a ValueError on NaNs.
     |
     |      >>> (10.0).as_integer_ratio()
     |      (10, 1)
     |      >>> (0.0).as_integer_ratio()
     |      (0, 1)
     |      >>> (-.25).as_integer_ratio()
     |      (-1, 4)
     |
     |  conjugate(self, /)
     |      Return self, the complex conjugate of any float.
     |
     |  hex(self, /)
     |      Return a hexadecimal representation of a floating-point number.
     |
     |      >>> (-0.1).hex()
     |      '-0x1.999999999999ap-4'
     |      >>> 3.14159.hex()
     |      '0x1.921f9f01b866ep+1'
     |
     |  is_integer(self, /)
     |      Return True if the float is an integer.
     |
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |
     |  __getformat__(typestr, /) from builtins.type
     |      You probably don't want to use this function.
     |
     |        typestr
     |          Must be 'double' or 'float'.
     |
     |      It exists mainly to be used in Python's test suite.
     |
     |      This function returns whichever of 'unknown', 'IEEE, big-endian' or 'IEEE,
     |      little-endian' best describes the format of floating point numbers used by the
     |      C type named by typestr.
     |
     |  fromhex(string, /) from builtins.type
     |      Create a floating-point number from a hexadecimal string.
     |
     |      >>> float.fromhex('0x1.ffffp10')
     |      2047.984375
     |      >>> float.fromhex('-0x1p-1074')
     |      -5e-324
     |
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  imag
     |      the imaginary part of a complex number
     |
     |  real
     |      the real part of a complex number

    getint = class int(object)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |
     |  Built-in subclasses:
     |      bool
     |
     |  Methods defined here:
     |
     |  __abs__(self, /)
     |      abs(self)
     |
     |  __add__(self, value, /)
     |      Return self+value.
     |
     |  __and__(self, value, /)
     |      Return self&value.
     |
     |  __bool__(self, /)
     |      True if self else False
     |
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |
     |  __eq__(self, value, /)
     |      Return self==value.
     |
     |  __float__(self, /)
     |      float(self)
     |
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |
     |  __format__(self, format_spec, /)
     |      Convert to a string according to format_spec.
     |
     |  __ge__(self, value, /)
     |      Return self>=value.
     |
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |
     |  __getnewargs__(self, /)
     |
     |  __gt__(self, value, /)
     |      Return self>value.
     |
     |  __hash__(self, /)
     |      Return hash(self).
     |
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |
     |  __int__(self, /)
     |      int(self)
     |
     |  __invert__(self, /)
     |      ~self
     |
     |  __le__(self, value, /)
     |      Return self<=value.
     |
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |
     |  __lt__(self, value, /)
     |      Return self<value.
     |
     |  __mod__(self, value, /)
     |      Return self%value.
     |
     |  __mul__(self, value, /)
     |      Return self*value.
     |
     |  __ne__(self, value, /)
     |      Return self!=value.
     |
     |  __neg__(self, /)
     |      -self
     |
     |  __or__(self, value, /)
     |      Return self|value.
     |
     |  __pos__(self, /)
     |      +self
     |
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |
     |  __radd__(self, value, /)
     |      Return value+self.
     |
     |  __rand__(self, value, /)
     |      Return value&self.
     |
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |
     |  __repr__(self, /)
     |      Return repr(self).
     |
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |
     |  __rmod__(self, value, /)
     |      Return value%self.
     |
     |  __rmul__(self, value, /)
     |      Return value*self.
     |
     |  __ror__(self, value, /)
     |      Return value|self.
     |
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |
     |      Rounding with an ndigits argument also returns an integer.
     |
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |
     |  __rsub__(self, value, /)
     |      Return value-self.
     |
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |
     |  __rxor__(self, value, /)
     |      Return value^self.
     |
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |
     |  __sub__(self, value, /)
     |      Return self-value.
     |
     |  __truediv__(self, value, /)
     |      Return self/value.
     |
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |
     |  __xor__(self, value, /)
     |      Return self^value.
     |
     |  as_integer_ratio(self, /)
     |      Return a pair of integers, whose ratio is equal to the original int.
     |
     |      The ratio is in lowest terms and has a positive denominator.
     |
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |
     |  bit_count(self, /)
     |      Number of ones in the binary representation of the absolute value of self.
     |
     |      Also known as the population count.
     |
     |      >>> bin(13)
     |      '0b1101'
     |      >>> (13).bit_count()
     |      3
     |
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |
     |  is_integer(self, /)
     |      Returns True. Exists for duck type compatibility with float.is_integer.
     |
     |  to_bytes(self, /, length=1, byteorder='big', *, signed=False)
     |      Return an array of bytes representing an integer.
     |
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.  Default
     |        is length 1.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.  Default is to use 'big'.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |
     |  from_bytes(bytes, byteorder='big', *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.  Default is to use 'big'.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  denominator
     |      the denominator of a rational number in lowest terms
     |
     |  imag
     |      the imaginary part of a complex number
     |
     |  numerator
     |      the numerator of a rational number in lowest terms
     |
     |  real
     |      the real part of a complex number

FUNCTIONS
    NoDefaultRoot()
        Inhibit setting of default root window.

        Call this function to inhibit that the first instance of
        Tk is used for windows without an explicit parent window.

    Tcl(screenName=None, baseName=None, className='Tk', useTk=False)

    getboolean(s)
        Convert Tcl object to True or False.

    image_names()

    image_types()

    mainloop(n=0)
        Run the main loop of Tcl.

DATA
    ACTIVE = 'active'
    ALL = 'all'
    ANCHOR = 'anchor'
    ARC = 'arc'
    BASELINE = 'baseline'
    BEVEL = 'bevel'
    BOTH = 'both'
    BOTTOM = 'bottom'
    BROWSE = 'browse'
    BUTT = 'butt'
    CASCADE = 'cascade'
    CENTER = 'center'
    CHAR = 'char'
    CHECKBUTTON = 'checkbutton'
    CHORD = 'chord'
    COMMAND = 'command'
    CURRENT = 'current'
    DISABLED = 'disabled'
    DOTBOX = 'dotbox'
    E = 'e'
    END = 'end'
    EW = 'ew'
    EXCEPTION = 8
    EXTENDED = 'extended'
    FALSE = 0
    FIRST = 'first'
    FLAT = 'flat'
    GROOVE = 'groove'
    HIDDEN = 'hidden'
    HORIZONTAL = 'horizontal'
    INSERT = 'insert'
    INSIDE = 'inside'
    LAST = 'last'
    LEFT = 'left'
    MITER = 'miter'
    MOVETO = 'moveto'
    MULTIPLE = 'multiple'
    N = 'n'
    NE = 'ne'
    NO = 0
    NONE = 'none'
    NORMAL = 'normal'
    NS = 'ns'
    NSEW = 'nsew'
    NUMERIC = 'numeric'
    NW = 'nw'
    OFF = 0
    ON = 1
    OUTSIDE = 'outside'
    PAGES = 'pages'
    PIESLICE = 'pieslice'
    PROJECTING = 'projecting'
    RADIOBUTTON = 'radiobutton'
    RAISED = 'raised'
    READABLE = 2
    RIDGE = 'ridge'
    RIGHT = 'right'
    ROUND = 'round'
    S = 's'
    SCROLL = 'scroll'
    SE = 'se'
    SEL = 'sel'
    SEL_FIRST = 'sel.first'
    SEL_LAST = 'sel.last'
    SEPARATOR = 'separator'
    SINGLE = 'single'
    SOLID = 'solid'
    SUNKEN = 'sunken'
    SW = 'sw'
    TOP = 'top'
    TRUE = 1
    TclVersion = 8.6
    TkVersion = 8.6
    UNDERLINE = 'underline'
    UNITS = 'units'
    VERTICAL = 'vertical'
    W = 'w'
    WORD = 'word'
    WRITABLE = 4
    X = 'x'
    Y = 'y'
    YES = 1
    __all__ = ['TclError', 'NO', 'FALSE', 'OFF', 'YES', 'TRUE', 'ON', 'N',...

FILE
    /home/santosg/miniconda3/lib/python3.12/tkinter/__init__.py


None
