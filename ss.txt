172
numinput
==========100===============numinput=====================
Help on function numinput in module turtle:

numinput(title, prompt, default=None, minval=None, maxval=None)
    Pop up a dialog window for input of a number.

    Arguments: title is the title of the dialog window,
    prompt is a text mostly describing what numerical information to input.
    default: default value
    minval: minimum value for input
    maxval: maximum value for input

    The number input must be in the range minval .. maxval if these are
    given. If not, a hint is issued and the dialog remains open for
    correction. Return the number input.
    If the dialog is canceled,  return None.

    Example:
    >>> numinput("Poker", "Your stakes:", 1000, minval=10, maxval=10000)

onclick
==========101===============onclick=====================
Help on function onclick in module turtle:

onclick(fun, btn=1, add=None)
    Bind fun to mouse-click event on this turtle on canvas.

    Arguments:
    fun --  a function with two arguments, to which will be assigned
            the coordinates of the clicked point on the canvas.
    btn --  number of the mouse-button defaults to 1 (left mouse button).
    add --  True or False. If True, new binding will be added, otherwise
            it will replace a former binding.

    Example for the anonymous turtle, i. e. the procedural way:

    >>> def turn(x, y):
    ...     left(360)
    ...
    >>> onclick(turn)  # Now clicking into the turtle will turn it.
    >>> onclick(None)  # event-binding will be removed

ondrag
==========102===============ondrag=====================
Help on function ondrag in module turtle:

ondrag(fun, btn=1, add=None)
    Bind fun to mouse-move event on this turtle on canvas.

    Arguments:
    fun -- a function with two arguments, to which will be assigned
           the coordinates of the clicked point on the canvas.
    btn -- number of the mouse-button defaults to 1 (left mouse button).

    Every sequence of mouse-move-events on a turtle is preceded by a
    mouse-click event on that

    Example:
    >>> ondrag(goto)

    Subsequently clicking and dragging a Turtle will move it
    across the screen thereby producing handdrawings (if pen is
    down).

onkey
==========103===============onkey=====================
Help on function onkey in module turtle:

onkey(fun, key)
    Bind fun to key-release event of key.

    Arguments:
    fun -- a function with no arguments
    key -- a string: key (e.g. "a") or key-symbol (e.g. "space")

    In order to be able to register key-events, TurtleScreen
    must have focus. (See method listen.)

    Example:

    >>> def f():
    ...     fd(50)
    ...     lt(60)
    ...
    >>> onkey(f, "Up")
    >>> listen()

    Subsequently the turtle can be moved by repeatedly pressing
    the up-arrow key, consequently drawing a hexagon

onkeypress
==========104===============onkeypress=====================
Help on function onkeypress in module turtle:

onkeypress(fun, key=None)
    Bind fun to key-press event of key if key is given,
    or to any key-press-event if no key is given.

    Arguments:
    fun -- a function with no arguments
    key -- a string: key (e.g. "a") or key-symbol (e.g. "space")

    In order to be able to register key-events, TurtleScreen
    must have focus. (See method listen.)

    Example (for a TurtleScreen instance named screen
    and a Turtle instance named turtle):

    >>> def f():
    ...     fd(50)
    ...     lt(60)
    ...
    >>> onkeypress(f, "Up")
    >>> listen()

    Subsequently the turtle can be moved by repeatedly pressing
    the up-arrow key, or by keeping pressed the up-arrow key.
    consequently drawing a hexagon.

onkeyrelease
==========105===============onkeyrelease=====================
Help on function onkeyrelease in module turtle:

onkeyrelease(fun, key)
    Bind fun to key-release event of key.

    Arguments:
    fun -- a function with no arguments
    key -- a string: key (e.g. "a") or key-symbol (e.g. "space")

    In order to be able to register key-events, TurtleScreen
    must have focus. (See method listen.)

    Example:

    >>> def f():
    ...     fd(50)
    ...     lt(60)
    ...
    >>> onkey(f, "Up")
    >>> listen()

    Subsequently the turtle can be moved by repeatedly pressing
    the up-arrow key, consequently drawing a hexagon

onrelease
==========106===============onrelease=====================
Help on function onrelease in module turtle:

onrelease(fun, btn=1, add=None)
    Bind fun to mouse-button-release event on this turtle on canvas.

    Arguments:
    fun -- a function with two arguments, to which will be assigned
            the coordinates of the clicked point on the canvas.
    btn --  number of the mouse-button defaults to 1 (left mouse button).

    Example (for a MyTurtle instance named joe):
    >>> class MyTurtle(Turtle):
    ...     def glow(self,x,y):
    ...             self.fillcolor("red")
    ...     def unglow(self,x,y):
    ...             self.fillcolor("")
    ...
    >>> joe = MyTurtle()
    >>> joe.onclick(joe.glow)
    >>> joe.onrelease(joe.unglow)

    Clicking on joe turns fillcolor red, unclicking turns it to
    transparent.

onscreenclick
==========107===============onscreenclick=====================
Help on function onscreenclick in module turtle:

onscreenclick(fun, btn=1, add=None)
    Bind fun to mouse-click event on canvas.

    Arguments:
    fun -- a function with two arguments, the coordinates of the
           clicked point on the canvas.
    btn -- the number of the mouse-button, defaults to 1

    Example (for a TurtleScreen instance named screen)

    >>> onclick(goto)
    >>> # Subsequently clicking into the TurtleScreen will
    >>> # make the turtle move to the clicked point.
    >>> onclick(None)

ontimer
==========108===============ontimer=====================
Help on function ontimer in module turtle:

ontimer(fun, t=0)
    Install a timer, which calls fun after t milliseconds.

    Arguments:
    fun -- a function with no arguments.
    t -- a number >= 0

    Example:

    >>> running = True
    >>> def f():
    ...     if running:
    ...             fd(50)
    ...             lt(60)
    ...             ontimer(f, 250)
    ...
    >>> f()   # makes the turtle marching around
    >>> running = False

pd
==========109===============pd=====================
Help on function pd in module turtle:

pd()
    Pull the pen down -- drawing when moving.

    Aliases: pendown | pd | down

    No argument.

    Example:
    >>> pendown()

pen
==========110===============pen=====================
Help on function pen in module turtle:

pen(pen=None, **pendict)
    Return or set the pen's attributes.

    Arguments:
        pen -- a dictionary with some or all of the below listed keys.
        **pendict -- one or more keyword-arguments with the below
                     listed keys as keywords.

    Return or set the pen's attributes in a 'pen-dictionary'
    with the following key/value pairs:
       "shown"      :   True/False
       "pendown"    :   True/False
       "pencolor"   :   color-string or color-tuple
       "fillcolor"  :   color-string or color-tuple
       "pensize"    :   positive number
       "speed"      :   number in range 0..10
       "resizemode" :   "auto" or "user" or "noresize"
       "stretchfactor": (positive number, positive number)
       "shearfactor":   number
       "outline"    :   positive number
       "tilt"       :   number

    This dictionary can be used as argument for a subsequent
    pen()-call to restore the former pen-state. Moreover one
    or more of these attributes can be provided as keyword-arguments.
    This can be used to set several pen attributes in one statement.


    Examples:
    >>> pen(fillcolor="black", pencolor="red", pensize=10)
    >>> pen()
    {'pensize': 10, 'shown': True, 'resizemode': 'auto', 'outline': 1,
    'pencolor': 'red', 'pendown': True, 'fillcolor': 'black',
    'stretchfactor': (1,1), 'speed': 3, 'shearfactor': 0.0}
    >>> penstate=pen()
    >>> color("yellow","")
    >>> penup()
    >>> pen()
    {'pensize': 10, 'shown': True, 'resizemode': 'auto', 'outline': 1,
    'pencolor': 'yellow', 'pendown': False, 'fillcolor': '',
    'stretchfactor': (1,1), 'speed': 3, 'shearfactor': 0.0}
    >>> p.pen(penstate, fillcolor="green")
    >>> p.pen()
    {'pensize': 10, 'shown': True, 'resizemode': 'auto', 'outline': 1,
    'pencolor': 'red', 'pendown': True, 'fillcolor': 'green',
    'stretchfactor': (1,1), 'speed': 3, 'shearfactor': 0.0}

pencolor
==========111===============pencolor=====================
Help on function pencolor in module turtle:

pencolor(*args)
    Return or set the pencolor.

    Arguments:
    Four input formats are allowed:
      - pencolor()
        Return the current pencolor as color specification string,
        possibly in hex-number format (see example).
        May be used as input to another color/pencolor/fillcolor call.
      - pencolor(colorstring)
        s is a Tk color specification string, such as "red" or "yellow"
      - pencolor((r, g, b))
        *a tuple* of r, g, and b, which represent, an RGB color,
        and each of r, g, and b are in the range 0..colormode,
        where colormode is either 1.0 or 255
      - pencolor(r, g, b)
        r, g, and b represent an RGB color, and each of r, g, and b
        are in the range 0..colormode

    If turtleshape is a polygon, the outline of that polygon is drawn
    with the newly set pencolor.

    Example:
    >>> pencolor('brown')
    >>> tup = (0.2, 0.8, 0.55)
    >>> pencolor(tup)
    >>> pencolor()
    '#33cc8c'

pendown
==========112===============pendown=====================
Help on function pendown in module turtle:

pendown()
    Pull the pen down -- drawing when moving.

    Aliases: pendown | pd | down

    No argument.

    Example:
    >>> pendown()

pensize
==========113===============pensize=====================
Help on function pensize in module turtle:

pensize(width=None)
    Set or return the line thickness.

    Aliases:  pensize | width

    Argument:
    width -- positive number

    Set the line thickness to width or return it. If resizemode is set
    to "auto" and turtleshape is a polygon, that polygon is drawn with
    the same line thickness. If no argument is given, current pensize
    is returned.

    Example:
    >>> pensize()
    1
    >>> pensize(10)   # from here on lines of width 10 are drawn

penup
==========114===============penup=====================
Help on function penup in module turtle:

penup()
    Pull the pen up -- no drawing when moving.

    Aliases: penup | pu | up

    No argument

    Example:
    >>> penup()

pos
==========115===============pos=====================
Help on function pos in module turtle:

pos()
    Return the turtle's current location (x,y), as a Vec2D-vector.

    Aliases: pos | position

    No arguments.

    Example:
    >>> pos()
    (0.00, 240.00)

position
==========116===============position=====================
Help on function position in module turtle:

position()
    Return the turtle's current location (x,y), as a Vec2D-vector.

    Aliases: pos | position

    No arguments.

    Example:
    >>> pos()
    (0.00, 240.00)

pu
==========117===============pu=====================
Help on function pu in module turtle:

pu()
    Pull the pen up -- no drawing when moving.

    Aliases: penup | pu | up

    No argument

    Example:
    >>> penup()

radians
==========118===============radians=====================
Help on function radians in module turtle:

radians()
    Set the angle measurement units to radians.

    No arguments.

    Example:
    >>> heading()
    90
    >>> radians()
    >>> heading()
    1.5707963267948966

read_docstrings
==========119===============read_docstrings=====================
Help on function read_docstrings in module turtle:

read_docstrings(lang)
    Read in docstrings from lang-specific docstring dictionary.

    Transfer docstrings, translated to lang, from a dictionary-file
    to the methods of classes Screen and Turtle and - in revised form -
    to the corresponding functions.

readconfig
==========120===============readconfig=====================
Help on function readconfig in module turtle:

readconfig(cfgdict)
    Read config-files, change configuration-dict accordingly.

    If there is a turtle.cfg file in the current working directory,
    read it from there. If this contains an importconfig-value,
    say 'myway', construct filename turtle_mayway.cfg else use
    turtle.cfg and read it from the import-directory, where
    turtle.py is located.
    Update configuration dictionary first according to config-file,
    in the import directory, then according to config-file in the
    current working directory.
    If no config-file is found, the default configuration is used.

register_shape
==========121===============register_shape=====================
Help on function register_shape in module turtle:

register_shape(name, shape=None)
    Adds a turtle shape to TurtleScreen's shapelist.

    Arguments:
    (1) name is the name of a gif-file and shape is None.
        Installs the corresponding image shape.
        !! Image-shapes DO NOT rotate when turning the turtle,
        !! so they do not display the heading of the turtle!
    (2) name is an arbitrary string and shape is a tuple
        of pairs of coordinates. Installs the corresponding
        polygon shape
    (3) name is an arbitrary string and shape is a
        (compound) Shape object. Installs the corresponding
        compound shape.
    To use a shape, you have to issue the command shape(shapename).

    call: register_shape("turtle.gif")
    --or: register_shape("tri", ((0,0), (10,10), (-10,10)))

    Example:
    >>> register_shape("triangle", ((5,-3),(0,5),(-5,-3)))

reset
==========122===============reset=====================
Help on function reset in module turtle:

reset()
    Delete the turtle's drawings and restore its default values.

    No argument.

    Delete the turtle's drawings from the screen, re-center the turtle
    and set variables to the default values.

    Example:
    >>> position()
    (0.00,-22.00)
    >>> heading()
    100.0
    >>> reset()
    >>> position()
    (0.00,0.00)
    >>> heading()
    0.0

resetscreen
==========123===============resetscreen=====================
Help on function resetscreen in module turtle:

resetscreen()
    Reset all Turtles on the Screen to their initial state.

    No argument.

    Example:
    >>> reset()

resizemode
==========124===============resizemode=====================
Help on function resizemode in module turtle:

resizemode(rmode=None)
    Set resizemode to one of the values: "auto", "user", "noresize".

    (Optional) Argument:
    rmode -- one of the strings "auto", "user", "noresize"

    Different resizemodes have the following effects:
      - "auto" adapts the appearance of the turtle
               corresponding to the value of pensize.
      - "user" adapts the appearance of the turtle according to the
               values of stretchfactor and outlinewidth (outline),
               which are set by shapesize()
      - "noresize" no adaption of the turtle's appearance takes place.
    If no argument is given, return current resizemode.
    resizemode("user") is called by a call of shapesize with arguments.


    Examples:
    >>> resizemode("noresize")
    >>> resizemode()
    'noresize'

right
==========125===============right=====================
Help on function right in module turtle:

right(angle)
    Turn turtle right by angle units.

    Aliases: right | rt

    Argument:
    angle -- a number (integer or float)

    Turn turtle right by angle units. (Units are by default degrees,
    but can be set via the degrees() and radians() functions.)
    Angle orientation depends on mode. (See this.)

    Example:
    >>> heading()
    22.0
    >>> right(45)
    >>> heading()
    337.0

rt
==========126===============rt=====================
Help on function rt in module turtle:

rt(angle)
    Turn turtle right by angle units.

    Aliases: right | rt

    Argument:
    angle -- a number (integer or float)

    Turn turtle right by angle units. (Units are by default degrees,
    but can be set via the degrees() and radians() functions.)
    Angle orientation depends on mode. (See this.)

    Example:
    >>> heading()
    22.0
    >>> right(45)
    >>> heading()
    337.0

screensize
==========127===============screensize=====================
Help on function screensize in module turtle:

screensize(canvwidth=None, canvheight=None, bg=None)
    Resize the canvas the turtles are drawing on.

    Optional arguments:
    canvwidth -- positive integer, new width of canvas in pixels
    canvheight --  positive integer, new height of canvas in pixels
    bg -- colorstring or color-tuple, new backgroundcolor
    If no arguments are given, return current (canvaswidth, canvasheight)

    Do not alter the drawing window. To observe hidden parts of
    the canvas use the scrollbars. (Can make visible those parts
    of a drawing, which were outside the canvas before!)

    Example (for a Turtle instance named turtle):
    >>> turtle.screensize(2000,1500)
    >>> # e.g. to search for an erroneously escaped turtle ;-)

seth
==========128===============seth=====================
Help on function seth in module turtle:

seth(to_angle)
    Set the orientation of the turtle to to_angle.

    Aliases:  setheading | seth

    Argument:
    to_angle -- a number (integer or float)

    Set the orientation of the turtle to to_angle.
    Here are some common directions in degrees:

     standard - mode:          logo-mode:
    -------------------|--------------------
       0 - east                0 - north
      90 - north              90 - east
     180 - west              180 - south
     270 - south             270 - west

    Example:
    >>> setheading(90)
    >>> heading()
    90

setheading
==========129===============setheading=====================
Help on function setheading in module turtle:

setheading(to_angle)
    Set the orientation of the turtle to to_angle.

    Aliases:  setheading | seth

    Argument:
    to_angle -- a number (integer or float)

    Set the orientation of the turtle to to_angle.
    Here are some common directions in degrees:

     standard - mode:          logo-mode:
    -------------------|--------------------
       0 - east                0 - north
      90 - north              90 - east
     180 - west              180 - south
     270 - south             270 - west

    Example:
    >>> setheading(90)
    >>> heading()
    90

setpos
==========130===============setpos=====================
Help on function setpos in module turtle:

setpos(x, y=None)
    Move turtle to an absolute position.

    Aliases: setpos | setposition | goto:

    Arguments:
    x -- a number      or     a pair/vector of numbers
    y -- a number             None

    call: goto(x, y)         # two coordinates
    --or: goto((x, y))       # a pair (tuple) of coordinates
    --or: goto(vec)          # e.g. as returned by pos()

    Move turtle to an absolute position. If the pen is down,
    a line will be drawn. The turtle's orientation does not change.

    Example:
    >>> tp = pos()
    >>> tp
    (0.00, 0.00)
    >>> setpos(60,30)
    >>> pos()
    (60.00,30.00)
    >>> setpos((20,80))
    >>> pos()
    (20.00,80.00)
    >>> setpos(tp)
    >>> pos()
    (0.00,0.00)

setposition
==========131===============setposition=====================
Help on function setposition in module turtle:

setposition(x, y=None)
    Move turtle to an absolute position.

    Aliases: setpos | setposition | goto:

    Arguments:
    x -- a number      or     a pair/vector of numbers
    y -- a number             None

    call: goto(x, y)         # two coordinates
    --or: goto((x, y))       # a pair (tuple) of coordinates
    --or: goto(vec)          # e.g. as returned by pos()

    Move turtle to an absolute position. If the pen is down,
    a line will be drawn. The turtle's orientation does not change.

    Example:
    >>> tp = pos()
    >>> tp
    (0.00, 0.00)
    >>> setpos(60,30)
    >>> pos()
    (60.00,30.00)
    >>> setpos((20,80))
    >>> pos()
    (20.00,80.00)
    >>> setpos(tp)
    >>> pos()
    (0.00,0.00)

settiltangle
==========132===============settiltangle=====================
Help on function settiltangle in module turtle:

settiltangle(angle)
    Rotate the turtleshape to point in the specified direction

    Argument: angle -- number

    Rotate the turtleshape to point in the direction specified by angle,
    regardless of its current tilt-angle. DO NOT change the turtle's
    heading (direction of movement).

    Deprecated since Python 3.1

    Examples:
    >>> shape("circle")
    >>> shapesize(5,2)
    >>> settiltangle(45)
    >>> stamp()
    >>> fd(50)
    >>> settiltangle(-45)
    >>> stamp()
    >>> fd(50)

setundobuffer
==========133===============setundobuffer=====================
Help on function setundobuffer in module turtle:

setundobuffer(size)
    Set or disable undobuffer.

    Argument:
    size -- an integer or None

    If size is an integer an empty undobuffer of given size is installed.
    Size gives the maximum number of turtle-actions that can be undone
    by the undo() function.
    If size is None, no undobuffer is present.

    Example:
    >>> setundobuffer(42)

setup
==========134===============setup=====================
Help on function setup in module turtle:

setup(width=0.5, height=0.75, startx=None, starty=None)
    Set the size and position of the main window.

    Arguments:
    width: as integer a size in pixels, as float a fraction of the
      Default is 50% of
    height: as integer the height in pixels, as float a fraction of the
       Default is 75% of
    startx: if positive, starting position in pixels from the left
      edge of the screen, if negative from the right edge
      Default, startx=None is to center window horizontally.
    starty: if positive, starting position in pixels from the top
      edge of the screen, if negative from the bottom edge
      Default, starty=None is to center window vertically.

    Examples:
    >>> setup (width=200, height=200, startx=0, starty=0)

    sets window to 200x200 pixels, in upper left of screen

    >>> setup(width=.75, height=0.5, startx=None, starty=None)

    sets window to 75% of screen by 50% of screen and centers

setworldcoordinates
==========135===============setworldcoordinates=====================
Help on function setworldcoordinates in module turtle:

setworldcoordinates(llx, lly, urx, ury)
    Set up a user defined coordinate-system.

    Arguments:
    llx -- a number, x-coordinate of lower left corner of canvas
    lly -- a number, y-coordinate of lower left corner of canvas
    urx -- a number, x-coordinate of upper right corner of canvas
    ury -- a number, y-coordinate of upper right corner of canvas

    Set up user coodinat-system and switch to mode 'world' if necessary.
    This performs a reset. If mode 'world' is already active,
    all drawings are redrawn according to the new coordinates.

    But ATTENTION: in user-defined coordinatesystems angles may appear
    distorted. (see Screen.mode())

    Example:
    >>> setworldcoordinates(-10,-0.5,50,1.5)
    >>> for _ in range(36):
    ...     left(10)
    ...     forward(0.5)

setx
==========136===============setx=====================
Help on function setx in module turtle:

setx(x)
    Set the turtle's first coordinate to x

    Argument:
    x -- a number (integer or float)

    Set the turtle's first coordinate to x, leave second coordinate
    unchanged.

    Example:
    >>> position()
    (0.00, 240.00)
    >>> setx(10)
    >>> position()
    (10.00, 240.00)

sety
==========137===============sety=====================
Help on function sety in module turtle:

sety(y)
    Set the turtle's second coordinate to y

    Argument:
    y -- a number (integer or float)

    Set the turtle's first coordinate to x, second coordinate remains
    unchanged.

    Example:
    >>> position()
    (0.00, 40.00)
    >>> sety(-10)
    >>> position()
    (0.00, -10.00)

shape
==========138===============shape=====================
Help on function shape in module turtle:

shape(name=None)
    Set turtle shape to shape with given name / return current shapename.

    Optional argument:
    name -- a string, which is a valid shapename

    Set turtle shape to shape with given name or, if name is not given,
    return name of current shape.
    Shape with name must exist in the TurtleScreen's shape dictionary.
    Initially there are the following polygon shapes:
    'arrow', 'turtle', 'circle', 'square', 'triangle', 'classic'.
    To learn about how to deal with shapes see Screen-method register_shape.

    Example:
    >>> shape()
    'arrow'
    >>> shape("turtle")
    >>> shape()
    'turtle'

shapesize
==========139===============shapesize=====================
Help on function shapesize in module turtle:

shapesize(stretch_wid=None, stretch_len=None, outline=None)
    Set/return turtle's stretchfactors/outline. Set resizemode to "user".

    Optional arguments:
       stretch_wid : positive number
       stretch_len : positive number
       outline  : positive number

    Return or set the pen's attributes x/y-stretchfactors and/or outline.
    Set resizemode to "user".
    If and only if resizemode is set to "user", the turtle will be displayed
    stretched according to its stretchfactors:
    stretch_wid is stretchfactor perpendicular to orientation
    stretch_len is stretchfactor in direction of turtles orientation.
    outline determines the width of the shapes's outline.

    Examples:
    >>> resizemode("user")
    >>> shapesize(5, 5, 12)
    >>> shapesize(outline=8)

shapetransform
==========140===============shapetransform=====================
Help on function shapetransform in module turtle:

shapetransform(t11=None, t12=None, t21=None, t22=None)
    Set or return the current transformation matrix of the turtle shape.

    Optional arguments: t11, t12, t21, t22 -- numbers.

    If none of the matrix elements are given, return the transformation
    matrix.
    Otherwise set the given elements and transform the turtleshape
    according to the matrix consisting of first row t11, t12 and
    second row t21, 22.
    Modify stretchfactor, shearfactor and tiltangle according to the
    given matrix.

    Examples:
    >>> shape("square")
    >>> shapesize(4,2)
    >>> shearfactor(-0.5)
    >>> shapetransform()
    (4.0, -1.0, -0.0, 2.0)

shearfactor
==========141===============shearfactor=====================
Help on function shearfactor in module turtle:

shearfactor(shear=None)
    Set or return the current shearfactor.

    Optional argument: shear -- number, tangent of the shear angle

    Shear the turtleshape according to the given shearfactor shear,
    which is the tangent of the shear angle. DO NOT change the
    turtle's heading (direction of movement).
    If shear is not given: return the current shearfactor, i. e. the
    tangent of the shear angle, by which lines parallel to the
    heading of the turtle are sheared.

    Examples:
    >>> shape("circle")
    >>> shapesize(5,2)
    >>> shearfactor(0.5)
    >>> shearfactor()
    >>> 0.5

showturtle
==========142===============showturtle=====================
Help on function showturtle in module turtle:

showturtle()
    Makes the turtle visible.

    Aliases: showturtle | st

    No argument.

    Example:
    >>> hideturtle()
    >>> showturtle()

simpledialog
==========143===============simpledialog=====================
Help on module tkinter.simpledialog in tkinter:

NAME
    tkinter.simpledialog - This modules handles dialog boxes.

MODULE REFERENCE
    https://docs.python.org/3.12/library/tkinter.simpledialog.html

    The following documentation is automatically generated from the Python
    source files.  It may be incomplete, incorrect or include features that
    are considered implementation detail and may vary between Python
    implementations.  When in doubt, consult the module reference at the
    location listed above.

DESCRIPTION
    It contains the following public symbols:

    SimpleDialog -- A simple but flexible modal dialog box

    Dialog -- a base class for dialogs

    askinteger -- get an integer from the user

    askfloat -- get a float from the user

    askstring -- get a string from the user

CLASSES
    builtins.object
        SimpleDialog
    tkinter.Toplevel(tkinter.BaseWidget, tkinter.Wm)
        Dialog

    class Dialog(tkinter.Toplevel)
     |  Dialog(parent, title=None)
     |
     |  Class to open dialogs.
     |
     |  This class is intended as a base class for custom dialogs
     |
     |  Method resolution order:
     |      Dialog
     |      tkinter.Toplevel
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Wm
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, parent, title=None)
     |      Initialize a dialog.
     |
     |      Arguments:
     |
     |          parent -- a parent window (the application window)
     |
     |          title -- the dialog title
     |
     |  apply(self)
     |      process the data
     |
     |      This method is called automatically to process the data, *after*
     |      the dialog is destroyed. By default, it does nothing.
     |
     |  body(self, master)
     |      create dialog body.
     |
     |      return widget that should have initial focus.
     |      This method should be overridden, and is called
     |      by the __init__ method.
     |
     |  buttonbox(self)
     |      add standard button box.
     |
     |      override if you do not want the standard buttons
     |
     |  cancel(self, event=None)
     |
     |  destroy(self)
     |      Destroy the window
     |
     |  ok(self, event=None)
     |
     |  validate(self)
     |      validate the data
     |
     |      This method is called automatically to validate the data before the
     |      dialog is destroyed. By default, it always validates OK.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Misc:
     |
     |  __getitem__ = cget(self, key)
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  __setitem__(self, key, value)
     |
     |  __str__(self)
     |      Return the window path name of this widget.
     |
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |
     |  anchor = grid_anchor(self, anchor=None)
     |
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |
     |      This command is equivalent to:
     |
     |      selection_get(CLIPBOARD)
     |
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |
     |  config = configure(self, cnf=None, **kw)
     |
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |
     |  deletecommand(self, name)
     |      Internal function.
     |
     |      Delete the Tcl command provided in NAME.
     |
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |
     |  focus = focus_set(self)
     |
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |
     |      Return None if the application does not have the focus.
     |
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |
     |  focus_set(self)
     |      Direct input focus to this widget.
     |
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |
     |  getdouble(self, s)
     |
     |  getint(self, s)
     |
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |
     |  grab_set(self)
     |      Set grab for this widget.
     |
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |
     |      The default anchor is nw.
     |
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  image_names(self)
     |      Return a list of all existing image names.
     |
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |
     |  info_patchlevel(self)
     |      Returns the exact version of the Tcl library.
     |
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |
     |  lift = tkraise(self, aboveThis=None)
     |
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |
     |  option_clear(self)
     |      Clear the option database.
     |
     |      It will be reloaded if option_add is called.
     |
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |
     |      Values with higher priority override lower values.
     |
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |
     |      An optional second parameter gives the numeric
     |      priority.
     |
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |
     |  register = _register(self, func, subst=None, needcleanup=1)
     |
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |
     |  size = grid_size(self)
     |
     |  slaves = pack_slaves(self)
     |
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget the event SEQUENCE.
     |
     |      If FUNCID is given, only unbind the function identified with FUNCID
     |      and also delete the corresponding Tcl command.
     |
     |      Otherwise destroy the current binding for SEQUENCE, leaving SEQUENCE
     |      unbound.
     |
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |
     |      If no parameter is given self is used.
     |
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |
     |      If no parameter is given self is used.
     |
     |  waitvar = wait_variable(self, name='PY_VAR')
     |
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |
     |  winfo_class(self)
     |      Return window class name of this widget.
     |
     |  winfo_colormapfull(self)
     |      Return True if at the last color request the colormap was full.
     |
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |
     |  winfo_height(self)
     |      Return height of this widget.
     |
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |
     |  winfo_name(self)
     |      Return the name of this widget.
     |
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |
     |  winfo_rgb(self, color)
     |      Return a tuple of integer RGB values in range(65536) for color in this widget.
     |
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_width(self)
     |      Return the width of this widget.
     |
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tkinter.Misc:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Wm:
     |
     |  aspect = wm_aspect(self, minNumer=None, minDenom=None, maxNumer=None, maxDenom=None)
     |
     |  attributes = wm_attributes(self, *args)
     |
     |  client = wm_client(self, name=None)
     |
     |  colormapwindows = wm_colormapwindows(self, *wlist)
     |
     |  command = wm_command(self, value=None)
     |
     |  deiconify = wm_deiconify(self)
     |
     |  focusmodel = wm_focusmodel(self, model=None)
     |
     |  forget = wm_forget(self, window)
     |
     |  frame = wm_frame(self)
     |
     |  geometry = wm_geometry(self, newGeometry=None)
     |
     |  grid = wm_grid(self, baseWidth=None, baseHeight=None, widthInc=None, heightInc=None)
     |
     |  group = wm_group(self, pathName=None)
     |
     |  iconbitmap = wm_iconbitmap(self, bitmap=None, default=None)
     |
     |  iconify = wm_iconify(self)
     |
     |  iconmask = wm_iconmask(self, bitmap=None)
     |
     |  iconname = wm_iconname(self, newName=None)
     |
     |  iconphoto = wm_iconphoto(self, default=False, *args)
     |
     |  iconposition = wm_iconposition(self, x=None, y=None)
     |
     |  iconwindow = wm_iconwindow(self, pathName=None)
     |
     |  manage = wm_manage(self, widget)
     |
     |  maxsize = wm_maxsize(self, width=None, height=None)
     |
     |  minsize = wm_minsize(self, width=None, height=None)
     |
     |  overrideredirect = wm_overrideredirect(self, boolean=None)
     |
     |  positionfrom = wm_positionfrom(self, who=None)
     |
     |  protocol = wm_protocol(self, name=None, func=None)
     |
     |  resizable = wm_resizable(self, width=None, height=None)
     |
     |  sizefrom = wm_sizefrom(self, who=None)
     |
     |  state = wm_state(self, newstate=None)
     |
     |  title = wm_title(self, string=None)
     |
     |  transient = wm_transient(self, master=None)
     |
     |  withdraw = wm_withdraw(self)
     |
     |  wm_aspect(self, minNumer=None, minDenom=None, maxNumer=None, maxDenom=None)
     |      Instruct the window manager to set the aspect ratio (width/height)
     |      of this widget to be between MINNUMER/MINDENOM and MAXNUMER/MAXDENOM. Return a tuple
     |      of the actual values if no argument is given.
     |
     |  wm_attributes(self, *args)
     |      This subcommand returns or sets platform specific attributes
     |
     |      The first form returns a list of the platform specific flags and
     |      their values. The second form returns the value for the specific
     |      option. The third form sets one or more of the values. The values
     |      are as follows:
     |
     |      On Windows, -disabled gets or sets whether the window is in a
     |      disabled state. -toolwindow gets or sets the style of the window
     |      to toolwindow (as defined in the MSDN). -topmost gets or sets
     |      whether this is a topmost window (displays above all other
     |      windows).
     |
     |      On Macintosh, XXXXX
     |
     |      On Unix, there are currently no special attribute values.
     |
     |  wm_client(self, name=None)
     |      Store NAME in WM_CLIENT_MACHINE property of this widget. Return
     |      current value.
     |
     |  wm_colormapwindows(self, *wlist)
     |      Store list of window names (WLIST) into WM_COLORMAPWINDOWS property
     |      of this widget. This list contains windows whose colormaps differ from their
     |      parents. Return current list of widgets if WLIST is empty.
     |
     |  wm_command(self, value=None)
     |      Store VALUE in WM_COMMAND property. It is the command
     |      which shall be used to invoke the application. Return current
     |      command if VALUE is None.
     |
     |  wm_deiconify(self)
     |      Deiconify this widget. If it was never mapped it will not be mapped.
     |      On Windows it will raise this widget and give it the focus.
     |
     |  wm_focusmodel(self, model=None)
     |      Set focus model to MODEL. "active" means that this widget will claim
     |      the focus itself, "passive" means that the window manager shall give
     |      the focus. Return current focus model if MODEL is None.
     |
     |  wm_forget(self, window)
     |      The window will be unmapped from the screen and will no longer
     |      be managed by wm. toplevel windows will be treated like frame
     |      windows once they are no longer managed by wm, however, the menu
     |      option configuration will be remembered and the menus will return
     |      once the widget is managed again.
     |
     |  wm_frame(self)
     |      Return identifier for decorative frame of this widget if present.
     |
     |  wm_geometry(self, newGeometry=None)
     |      Set geometry to NEWGEOMETRY of the form =widthxheight+x+y. Return
     |      current value if None is given.
     |
     |  wm_grid(self, baseWidth=None, baseHeight=None, widthInc=None, heightInc=None)
     |      Instruct the window manager that this widget shall only be
     |      resized on grid boundaries. WIDTHINC and HEIGHTINC are the width and
     |      height of a grid unit in pixels. BASEWIDTH and BASEHEIGHT are the
     |      number of grid units requested in Tk_GeometryRequest.
     |
     |  wm_group(self, pathName=None)
     |      Set the group leader widgets for related widgets to PATHNAME. Return
     |      the group leader of this widget if None is given.
     |
     |  wm_iconbitmap(self, bitmap=None, default=None)
     |      Set bitmap for the iconified widget to BITMAP. Return
     |      the bitmap if None is given.
     |
     |      Under Windows, the DEFAULT parameter can be used to set the icon
     |      for the widget and any descendants that don't have an icon set
     |      explicitly.  DEFAULT can be the relative path to a .ico file
     |      (example: root.iconbitmap(default='myicon.ico') ).  See Tk
     |      documentation for more information.
     |
     |  wm_iconify(self)
     |      Display widget as icon.
     |
     |  wm_iconmask(self, bitmap=None)
     |      Set mask for the icon bitmap of this widget. Return the
     |      mask if None is given.
     |
     |  wm_iconname(self, newName=None)
     |      Set the name of the icon for this widget. Return the name if
     |      None is given.
     |
     |  wm_iconphoto(self, default=False, *args)
     |      Sets the titlebar icon for this window based on the named photo
     |      images passed through args. If default is True, this is applied to
     |      all future created toplevels as well.
     |
     |      The data in the images is taken as a snapshot at the time of
     |      invocation. If the images are later changed, this is not reflected
     |      to the titlebar icons. Multiple images are accepted to allow
     |      different images sizes to be provided. The window manager may scale
     |      provided icons to an appropriate size.
     |
     |      On Windows, the images are packed into a Windows icon structure.
     |      This will override an icon specified to wm_iconbitmap, and vice
     |      versa.
     |
     |      On X, the images are arranged into the _NET_WM_ICON X property,
     |      which most modern window managers support. An icon specified by
     |      wm_iconbitmap may exist simultaneously.
     |
     |      On Macintosh, this currently does nothing.
     |
     |  wm_iconposition(self, x=None, y=None)
     |      Set the position of the icon of this widget to X and Y. Return
     |      a tuple of the current values of X and X if None is given.
     |
     |  wm_iconwindow(self, pathName=None)
     |      Set widget PATHNAME to be displayed instead of icon. Return the current
     |      value if None is given.
     |
     |  wm_manage(self, widget)
     |      The widget specified will become a stand alone top-level window.
     |      The window will be decorated with the window managers title bar,
     |      etc.
     |
     |  wm_maxsize(self, width=None, height=None)
     |      Set max WIDTH and HEIGHT for this widget. If the window is gridded
     |      the values are given in grid units. Return the current values if None
     |      is given.
     |
     |  wm_minsize(self, width=None, height=None)
     |      Set min WIDTH and HEIGHT for this widget. If the window is gridded
     |      the values are given in grid units. Return the current values if None
     |      is given.
     |
     |  wm_overrideredirect(self, boolean=None)
     |      Instruct the window manager to ignore this widget
     |      if BOOLEAN is given with 1. Return the current value if None
     |      is given.
     |
     |  wm_positionfrom(self, who=None)
     |      Instruct the window manager that the position of this widget shall
     |      be defined by the user if WHO is "user", and by its own policy if WHO is
     |      "program".
     |
     |  wm_protocol(self, name=None, func=None)
     |      Bind function FUNC to command NAME for this widget.
     |      Return the function bound to NAME if None is given. NAME could be
     |      e.g. "WM_SAVE_YOURSELF" or "WM_DELETE_WINDOW".
     |
     |  wm_resizable(self, width=None, height=None)
     |      Instruct the window manager whether this width can be resized
     |      in WIDTH or HEIGHT. Both values are boolean values.
     |
     |  wm_sizefrom(self, who=None)
     |      Instruct the window manager that the size of this widget shall
     |      be defined by the user if WHO is "user", and by its own policy if WHO is
     |      "program".
     |
     |  wm_state(self, newstate=None)
     |      Query or set the state of this widget as one of normal, icon,
     |      iconic (see wm_iconwindow), withdrawn, or zoomed (Windows only).
     |
     |  wm_title(self, string=None)
     |      Set the title of this widget.
     |
     |  wm_transient(self, master=None)
     |      Instruct the window manager that this widget is transient
     |      with regard to widget MASTER.
     |
     |  wm_withdraw(self)
     |      Withdraw this widget from the screen such that it is unmapped
     |      and forgotten by the window manager. Re-draw it with wm_deiconify.

    class SimpleDialog(builtins.object)
     |  SimpleDialog(master, text='', buttons=[], default=None, cancel=None, title=None, class_=None)
     |
     |  Methods defined here:
     |
     |  __init__(self, master, text='', buttons=[], default=None, cancel=None, title=None, class_=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  done(self, num)
     |
     |  go(self)
     |
     |  return_event(self, event)
     |
     |  wm_delete_window(self)
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object

FUNCTIONS
    askfloat(title, prompt, **kw)
        get a float from the user

        Arguments:

            title -- the dialog title
            prompt -- the label text
            **kw -- see SimpleDialog class

        Return value is a float

    askinteger(title, prompt, **kw)
        get an integer from the user

        Arguments:

            title -- the dialog title
            prompt -- the label text
            **kw -- see SimpleDialog class

        Return value is an integer

    askstring(title, prompt, **kw)
        get a string from the user

        Arguments:

            title -- the dialog title
            prompt -- the label text
            **kw -- see SimpleDialog class

        Return value is a string

DATA
    ACTIVE = 'active'
    ALL = 'all'
    ANCHOR = 'anchor'
    ARC = 'arc'
    BASELINE = 'baseline'
    BEVEL = 'bevel'
    BOTH = 'both'
    BOTTOM = 'bottom'
    BROWSE = 'browse'
    BUTT = 'butt'
    CASCADE = 'cascade'
    CENTER = 'center'
    CHAR = 'char'
    CHECKBUTTON = 'checkbutton'
    CHORD = 'chord'
    COMMAND = 'command'
    CURRENT = 'current'
    DISABLED = 'disabled'
    DOTBOX = 'dotbox'
    E = 'e'
    END = 'end'
    EW = 'ew'
    EXCEPTION = 8
    EXTENDED = 'extended'
    FALSE = 0
    FIRST = 'first'
    FLAT = 'flat'
    GROOVE = 'groove'
    HIDDEN = 'hidden'
    HORIZONTAL = 'horizontal'
    INSERT = 'insert'
    INSIDE = 'inside'
    LAST = 'last'
    LEFT = 'left'
    MITER = 'miter'
    MOVETO = 'moveto'
    MULTIPLE = 'multiple'
    N = 'n'
    NE = 'ne'
    NO = 0
    NONE = 'none'
    NORMAL = 'normal'
    NS = 'ns'
    NSEW = 'nsew'
    NUMERIC = 'numeric'
    NW = 'nw'
    OFF = 0
    ON = 1
    OUTSIDE = 'outside'
    PAGES = 'pages'
    PIESLICE = 'pieslice'
    PROJECTING = 'projecting'
    RADIOBUTTON = 'radiobutton'
    RAISED = 'raised'
    READABLE = 2
    RIDGE = 'ridge'
    RIGHT = 'right'
    ROUND = 'round'
    S = 's'
    SCROLL = 'scroll'
    SE = 'se'
    SEL = 'sel'
    SEL_FIRST = 'sel.first'
    SEL_LAST = 'sel.last'
    SEPARATOR = 'separator'
    SINGLE = 'single'
    SOLID = 'solid'
    SUNKEN = 'sunken'
    SW = 'sw'
    TOP = 'top'
    TRUE = 1
    TclVersion = 8.6
    TkVersion = 8.6
    UNDERLINE = 'underline'
    UNITS = 'units'
    VERTICAL = 'vertical'
    W = 'w'
    WORD = 'word'
    WRITABLE = 4
    X = 'x'
    Y = 'y'
    YES = 1

FILE
    /home/santosg/miniconda3/lib/python3.12/tkinter/simpledialog.py


speed
==========144===============speed=====================
Help on function speed in module turtle:

speed(speed=None)
    Return or set the turtle's speed.

    Optional argument:
    speed -- an integer in the range 0..10 or a speedstring (see below)

    Set the turtle's speed to an integer value in the range 0 .. 10.
    If no argument is given: return current speed.

    If input is a number greater than 10 or smaller than 0.5,
    speed is set to 0.
    Speedstrings  are mapped to speedvalues in the following way:
        'fastest' :  0
        'fast'    :  10
        'normal'  :  6
        'slow'    :  3
        'slowest' :  1
    speeds from 1 to 10 enforce increasingly faster animation of
    line drawing and turtle turning.

    Attention:
    speed = 0 : *no* animation takes place. forward/back makes turtle jump
    and likewise left/right make the turtle turn instantly.

    Example:
    >>> speed(3)

split
==========145===============split=====================
Help on function split in module posixpath:

split(p)
    Split a pathname.  Returns tuple "(head, tail)" where "tail" is
    everything after the final slash.  Either part may be empty.

st
==========146===============st=====================
Help on function st in module turtle:

st()
    Makes the turtle visible.

    Aliases: showturtle | st

    No argument.

    Example:
    >>> hideturtle()
    >>> showturtle()

stamp
==========147===============stamp=====================
Help on function stamp in module turtle:

stamp()
    Stamp a copy of the turtleshape onto the canvas and return its id.

    No argument.

    Stamp a copy of the turtle shape onto the canvas at the current
    turtle position. Return a stamp_id for that stamp, which can be
    used to delete it by calling clearstamp(stamp_id).

    Example:
    >>> color("blue")
    >>> stamp()
    13
    >>> fd(50)

sys
==========148===============sys=====================
Help on built-in module sys:

NAME
    sys

MODULE REFERENCE
    https://docs.python.org/3.12/library/sys.html

    The following documentation is automatically generated from the Python
    source files.  It may be incomplete, incorrect or include features that
    are considered implementation detail and may vary between Python
    implementations.  When in doubt, consult the module reference at the
    location listed above.

DESCRIPTION
    This module provides access to some objects used or maintained by the
    interpreter and to functions that interact strongly with the interpreter.

    Dynamic objects:

    argv -- command line arguments; argv[0] is the script pathname if known
    path -- module search path; path[0] is the script directory, else ''
    modules -- dictionary of loaded modules

    displayhook -- called to show results in an interactive session
    excepthook -- called to handle any uncaught exception other than SystemExit
      To customize printing in an interactive session or to install a custom
      top-level exception handler, assign other functions to replace these.

    stdin -- standard input file object; used by input()
    stdout -- standard output file object; used by print()
    stderr -- standard error object; used for error messages
      By assigning other file objects (or objects that behave like files)
      to these, it is possible to redirect all of the interpreter's I/O.

    last_exc - the last uncaught exception
      Only available in an interactive session after a
      traceback has been printed.
    last_type -- type of last uncaught exception
    last_value -- value of last uncaught exception
    last_traceback -- traceback of last uncaught exception
      These three are the (deprecated) legacy representation of last_exc.

    Static objects:

    builtin_module_names -- tuple of module names built into this interpreter
    copyright -- copyright notice pertaining to this interpreter
    exec_prefix -- prefix used to find the machine-specific Python library
    executable -- absolute path of the executable binary of the Python interpreter
    float_info -- a named tuple with information about the float implementation.
    float_repr_style -- string indicating the style of repr() output for floats
    hash_info -- a named tuple with information about the hash algorithm.
    hexversion -- version information encoded as a single integer
    implementation -- Python implementation information.
    int_info -- a named tuple with information about the int implementation.
    maxsize -- the largest supported length of containers.
    maxunicode -- the value of the largest Unicode code point
    platform -- platform identifier
    prefix -- prefix used to find the Python library
    thread_info -- a named tuple with information about the thread implementation.
    version -- the version of this interpreter as a string
    version_info -- version information as a named tuple
    __stdin__ -- the original stdin; don't touch!
    __stdout__ -- the original stdout; don't touch!
    __stderr__ -- the original stderr; don't touch!
    __displayhook__ -- the original displayhook; don't touch!
    __excepthook__ -- the original excepthook; don't touch!

    Functions:

    displayhook() -- print an object to the screen, and save it in builtins._
    excepthook() -- print an exception and its traceback to sys.stderr
    exception() -- return the current thread's active exception
    exc_info() -- return information about the current thread's active exception
    exit() -- exit the interpreter by raising SystemExit
    getdlopenflags() -- returns flags to be used for dlopen() calls
    getprofile() -- get the global profiling function
    getrefcount() -- return the reference count for an object (plus one :-)
    getrecursionlimit() -- return the max recursion depth for the interpreter
    getsizeof() -- return the size of an object in bytes
    gettrace() -- get the global debug tracing function
    setdlopenflags() -- set the flags to be used for dlopen() calls
    setprofile() -- set the global profiling function
    setrecursionlimit() -- set the max recursion depth for the interpreter
    settrace() -- set the global debug tracing function

SUBMODULES
    monitoring

FUNCTIONS
    __breakpointhook__ = breakpointhook(...)
        breakpointhook(*args, **kws)

        This hook function is called by built-in breakpoint().

    __displayhook__ = displayhook(object, /)
        Print an object to sys.stdout and also save it in builtins._

    __excepthook__ = excepthook(exctype, value, traceback, /)
        Handle an exception by displaying it with a traceback on sys.stderr.

    __unraisablehook__ = unraisablehook(unraisable, /)
        Handle an unraisable exception.

        The unraisable argument has the following attributes:

        * exc_type: Exception type.
        * exc_value: Exception value, can be None.
        * exc_traceback: Exception traceback, can be None.
        * err_msg: Error message, can be None.
        * object: Object causing the exception, can be None.

    activate_stack_trampoline(backend, /)
        Activate stack profiler trampoline *backend*.

    addaudithook(hook)
        Adds a new audit hook callback.

    audit(...)
        audit(event, *args)

        Passes the event to any audit hooks that are attached.

    breakpointhook(...)
        breakpointhook(*args, **kws)

        This hook function is called by built-in breakpoint().

    call_tracing(func, args, /)
        Call func(*args), while tracing is enabled.

        The tracing state is saved, and restored afterwards.  This is intended
        to be called from a debugger from a checkpoint, to recursively debug
        some other code.

    deactivate_stack_trampoline()
        Deactivate the current stack profiler trampoline backend.

        If no stack profiler is activated, this function has no effect.

    displayhook(object, /)
        Print an object to sys.stdout and also save it in builtins._

    exc_info()
        Return current exception information: (type, value, traceback).

        Return information about the most recent exception caught by an except
        clause in the current stack frame or in an older stack frame.

    excepthook(exctype, value, traceback, /)
        Handle an exception by displaying it with a traceback on sys.stderr.

    exception()
        Return the current exception.

        Return the most recent exception caught by an except clause
        in the current stack frame or in an older stack frame, or None
        if no such exception exists.

    exit(status=None, /)
        Exit the interpreter by raising SystemExit(status).

        If the status is omitted or None, it defaults to zero (i.e., success).
        If the status is an integer, it will be used as the system exit status.
        If it is another kind of object, it will be printed and the system
        exit status will be one (i.e., failure).

    get_asyncgen_hooks()
        Return the installed asynchronous generators hooks.

        This returns a namedtuple of the form (firstiter, finalizer).

    get_coroutine_origin_tracking_depth()
        Check status of origin tracking for coroutine objects in this thread.

    get_int_max_str_digits()
        Return the maximum string digits limit for non-binary int<->str conversions.

    getallocatedblocks()
        Return the number of memory blocks currently allocated.

    getdefaultencoding()
        Return the current default encoding used by the Unicode implementation.

    getdlopenflags()
        Return the current value of the flags that are used for dlopen calls.

        The flag constants are defined in the os module.

    getfilesystemencodeerrors()
        Return the error mode used Unicode to OS filename conversion.

    getfilesystemencoding()
        Return the encoding used to convert Unicode filenames to OS filenames.

    getprofile()
        Return the profiling function set with sys.setprofile.

        See the profiler chapter in the library manual.

    getrecursionlimit()
        Return the current value of the recursion limit.

        The recursion limit is the maximum depth of the Python interpreter
        stack.  This limit prevents infinite recursion from causing an overflow
        of the C stack and crashing Python.

    getrefcount(object, /)
        Return the reference count of object.

        The count returned is generally one higher than you might expect,
        because it includes the (temporary) reference as an argument to
        getrefcount().

    getsizeof(...)
        getsizeof(object [, default]) -> int

        Return the size of object in bytes.

    getswitchinterval()
        Return the current thread switch interval; see sys.setswitchinterval().

    gettrace()
        Return the global debug tracing function set with sys.settrace.

        See the debugger chapter in the library manual.

    getunicodeinternedsize()
        Return the number of elements of the unicode interned dictionary

    intern(string, /)
        ``Intern'' the given string.

        This enters the string in the (global) table of interned strings whose
        purpose is to speed up dictionary lookups. Return the string itself or
        the previously interned string object with the same value.

    is_finalizing()
        Return True if Python is exiting.

    is_stack_trampoline_active()
        Return *True* if a stack profiler trampoline is active.

    set_asyncgen_hooks(...)
        set_asyncgen_hooks([firstiter] [, finalizer])

        Set a finalizer for async generators objects.

    set_coroutine_origin_tracking_depth(depth)
        Enable or disable origin tracking for coroutine objects in this thread.

        Coroutine objects will track 'depth' frames of traceback information
        about where they came from, available in their cr_origin attribute.

        Set a depth of 0 to disable.

    set_int_max_str_digits(maxdigits)
        Set the maximum string digits limit for non-binary int<->str conversions.

    setdlopenflags(flags, /)
        Set the flags used by the interpreter for dlopen calls.

        This is used, for example, when the interpreter loads extension
        modules. Among other things, this will enable a lazy resolving of
        symbols when importing a module, if called as sys.setdlopenflags(0).
        To share symbols across extension modules, call as
        sys.setdlopenflags(os.RTLD_GLOBAL).  Symbolic names for the flag
        modules can be found in the os module (RTLD_xxx constants, e.g.
        os.RTLD_LAZY).

    setprofile(...)
        setprofile(function)

        Set the profiling function.  It will be called on each function call
        and return.  See the profiler chapter in the library manual.

    setrecursionlimit(limit, /)
        Set the maximum depth of the Python interpreter stack to n.

        This limit prevents infinite recursion from causing an overflow of the C
        stack and crashing Python.  The highest possible limit is platform-
        dependent.

    setswitchinterval(interval, /)
        Set the ideal thread switching delay inside the Python interpreter.

        The actual frequency of switching threads can be lower if the
        interpreter executes long sequences of uninterruptible code
        (this is implementation-specific and workload-dependent).

        The parameter must represent the desired switching delay in seconds
        A typical value is 0.005 (5 milliseconds).

    settrace(...)
        settrace(function)

        Set the global debug tracing function.  It will be called on each
        function call.  See the debugger chapter in the library manual.

    unraisablehook(unraisable, /)
        Handle an unraisable exception.

        The unraisable argument has the following attributes:

        * exc_type: Exception type.
        * exc_value: Exception value, can be None.
        * exc_traceback: Exception traceback, can be None.
        * err_msg: Error message, can be None.
        * object: Object causing the exception, can be None.

DATA
    __stderr__ = <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf...
    __stdin__ = <_io.TextIOWrapper name='<stdin>' mode='r' encoding='utf-8...
    __stdout__ = <_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf...
    abiflags = ''
    api_version = 1013
    argv = ['p4.py', '100', '150']
    base_exec_prefix = '/home/santosg/miniconda3'
    base_prefix = '/home/santosg/miniconda3'
    builtin_module_names = ('_abc', '_ast', '_codecs', '_collections', '_f...
    byteorder = 'little'
    copyright = 'Copyright (c) 2001-2023 Python Software Foundati...ematis...
    dont_write_bytecode = False
    exec_prefix = '/home/santosg/miniconda3'
    executable = '/home/santosg/miniconda3/bin/python'
    flags = sys.flags(debug=0, inspect=0, interactive=0, opt...ding=0, saf...
    float_info = sys.float_info(max=1.7976931348623157e+308, max_...epsilo...
    float_repr_style = 'short'
    hash_info = sys.hash_info(width=64, modulus=2305843009213693...iphash1...
    hexversion = 51118832
    implementation = namespace(name='cpython', cache_tag='cpython-312...xv...
    int_info = sys.int_info(bits_per_digit=30, sizeof_digit=4, ..._str_dig...
    maxsize = 9223372036854775807
    maxunicode = 1114111
    meta_path = [<_distutils_hack.DistutilsMetaFinder object>, <class '_fr...
    modules = {'__future__': <module '__future__' from '/home/santosg/mini...
    orig_argv = ['python', 'p4.py', '100', '150']
    path = ['/home/santosg/Python_Ayuda', '/home/santosg/miniconda3/lib/py...
    path_hooks = [<class 'zipimport.zipimporter'>, <function FileFinder.pa...
    path_importer_cache = {'/home/santosg/.local/lib/python3.12/site-packa...
    platform = 'linux'
    platlibdir = 'lib'
    prefix = '/home/santosg/miniconda3'
    pycache_prefix = None
    stderr = <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>
    stdin = <_io.TextIOWrapper name='<stdin>' mode='r' encoding='utf-8'>
    stdlib_module_names = frozenset({'__future__', '_abc', '_aix_support',...
    stdout = <_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>
    thread_info = sys.thread_info(name='pthread', lock='semaphore', versio...
    version = '3.12.2 | packaged by conda-forge | (main, Feb 16 2024, 20:5...
    version_info = sys.version_info(major=3, minor=12, micro=2, releaselev...
    warnoptions = []

FILE
    (built-in)


teleport
==========149===============teleport=====================
Help on function teleport in module turtle:

teleport(x=None, y=None, *, fill_gap: bool = False) -> None
    Instantly move turtle to an absolute position.

    Arguments:
    x -- a number      or     None
    y -- a number             None
    fill_gap -- a boolean     This argument must be specified by name.

    call: teleport(x, y)         # two coordinates
    --or: teleport(x)            # teleport to x position, keeping y as is
    --or: teleport(y=y)          # teleport to y position, keeping x as is
    --or: teleport(x, y, fill_gap=True)
                                 # teleport but fill the gap in between

    Move turtle to an absolute position. Unlike goto(x, y), a line will not
    be drawn. The turtle's orientation does not change. If currently
    filling, the polygon(s) teleported from will be filled after leaving,
    and filling will begin again after teleporting. This can be disabled
    with fill_gap=True, which makes the imaginary line traveled during
    teleporting act as a fill barrier like in goto(x, y).

    Example:
    >>> tp = pos()
    >>> tp
    (0.00,0.00)
    >>> teleport(60)
    >>> pos()
    (60.00,0.00)
    >>> teleport(y=10)
    >>> pos()
    (60.00,10.00)
    >>> teleport(20, 30)
    >>> pos()
    (20.00,30.00)

textinput
==========150===============textinput=====================
Help on function textinput in module turtle:

textinput(title, prompt)
    Pop up a dialog window for input of a string.

    Arguments: title is the title of the dialog window,
    prompt is a text mostly describing what information to input.

    Return the string input
    If the dialog is canceled, return None.

    Example:
    >>> textinput("NIM", "Name of first player:")

