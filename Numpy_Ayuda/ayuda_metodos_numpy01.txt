20
Help on _ArrayFunctionDispatcher in module numpy:

amax(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>)
    Return the maximum of an array or maximum along an axis.

    `amax` is an alias of `~numpy.max`.

    See Also
    --------
    max : alias of this function
    ndarray.max : equivalent method

None
Help on _ArrayFunctionDispatcher in module numpy:

append(arr, values, axis=None)
    Append values to the end of an array.

    Parameters
    ----------
    arr : array_like
        Values are appended to a copy of this array.
    values : array_like
        These values are appended to a copy of `arr`.  It must be of the
        correct shape (the same shape as `arr`, excluding `axis`).  If
        `axis` is not specified, `values` can be any shape and will be
        flattened before use.
    axis : int, optional
        The axis along which `values` are appended.  If `axis` is not
        given, both `arr` and `values` are flattened before use.

    Returns
    -------
    append : ndarray
        A copy of `arr` with `values` appended to `axis`.  Note that
        `append` does not occur in-place: a new array is allocated and
        filled.  If `axis` is None, `out` is a flattened array.

    See Also
    --------
    insert : Insert elements into an array.
    delete : Delete elements from an array.

    Examples
    --------
    >>> np.append([1, 2, 3], [[4, 5, 6], [7, 8, 9]])
    array([1, 2, 3, ..., 7, 8, 9])

    When `axis` is specified, `values` must have the correct shape.

    >>> np.append([[1, 2, 3], [4, 5, 6]], [[7, 8, 9]], axis=0)
    array([[1, 2, 3],
           [4, 5, 6],
           [7, 8, 9]])
    >>> np.append([[1, 2, 3], [4, 5, 6]], [7, 8, 9], axis=0)
    Traceback (most recent call last):
        ...
    ValueError: all the input arrays must have same number of dimensions, but
    the array at index 0 has 2 dimension(s) and the array at index 1 has 1
    dimension(s)

None
Help on _ArrayFunctionDispatcher in module numpy:

apply_along_axis(func1d, axis, arr, *args, **kwargs)
    Apply a function to 1-D slices along the given axis.

    Execute `func1d(a, *args, **kwargs)` where `func1d` operates on 1-D arrays
    and `a` is a 1-D slice of `arr` along `axis`.

    This is equivalent to (but faster than) the following use of `ndindex` and
    `s_`, which sets each of ``ii``, ``jj``, and ``kk`` to a tuple of indices::

        Ni, Nk = a.shape[:axis], a.shape[axis+1:]
        for ii in ndindex(Ni):
            for kk in ndindex(Nk):
                f = func1d(arr[ii + s_[:,] + kk])
                Nj = f.shape
                for jj in ndindex(Nj):
                    out[ii + jj + kk] = f[jj]

    Equivalently, eliminating the inner loop, this can be expressed as::

        Ni, Nk = a.shape[:axis], a.shape[axis+1:]
        for ii in ndindex(Ni):
            for kk in ndindex(Nk):
                out[ii + s_[...,] + kk] = func1d(arr[ii + s_[:,] + kk])

    Parameters
    ----------
    func1d : function (M,) -> (Nj...)
        This function should accept 1-D arrays. It is applied to 1-D
        slices of `arr` along the specified axis.
    axis : integer
        Axis along which `arr` is sliced.
    arr : ndarray (Ni..., M, Nk...)
        Input array.
    args : any
        Additional arguments to `func1d`.
    kwargs : any
        Additional named arguments to `func1d`.

        .. versionadded:: 1.9.0


    Returns
    -------
    out : ndarray  (Ni..., Nj..., Nk...)
        The output array. The shape of `out` is identical to the shape of
        `arr`, except along the `axis` dimension. This axis is removed, and
        replaced with new dimensions equal to the shape of the return value
        of `func1d`. So if `func1d` returns a scalar `out` will have one
        fewer dimensions than `arr`.

    See Also
    --------
    apply_over_axes : Apply a function repeatedly over multiple axes.

    Examples
    --------
    >>> def my_func(a):
    ...     """Average first and last element of a 1-D array"""
    ...     return (a[0] + a[-1]) * 0.5
    >>> b = np.array([[1,2,3], [4,5,6], [7,8,9]])
    >>> np.apply_along_axis(my_func, 0, b)
    array([4., 5., 6.])
    >>> np.apply_along_axis(my_func, 1, b)
    array([2.,  5.,  8.])

    For a function that returns a 1D array, the number of dimensions in
    `outarr` is the same as `arr`.

    >>> b = np.array([[8,1,7], [4,3,9], [5,2,6]])
    >>> np.apply_along_axis(sorted, 1, b)
    array([[1, 7, 8],
           [3, 4, 9],
           [2, 5, 6]])

    For a function that returns a higher dimensional array, those dimensions
    are inserted in place of the `axis` dimension.

    >>> b = np.array([[1,2,3], [4,5,6], [7,8,9]])
    >>> np.apply_along_axis(np.diag, -1, b)
    array([[[1, 0, 0],
            [0, 2, 0],
            [0, 0, 3]],
           [[4, 0, 0],
            [0, 5, 0],
            [0, 0, 6]],
           [[7, 0, 0],
            [0, 8, 0],
            [0, 0, 9]]])

None
Help on built-in function arange in module numpy:

arange(...)
    arange([start,] stop[, step,], dtype=None, *, like=None)

    Return evenly spaced values within a given interval.

    ``arange`` can be called with a varying number of positional arguments:

    * ``arange(stop)``: Values are generated within the half-open interval
      ``[0, stop)`` (in other words, the interval including `start` but
      excluding `stop`).
    * ``arange(start, stop)``: Values are generated within the half-open
      interval ``[start, stop)``.
    * ``arange(start, stop, step)`` Values are generated within the half-open
      interval ``[start, stop)``, with spacing between values given by
      ``step``.

    For integer arguments the function is roughly equivalent to the Python
    built-in :py:class:`range`, but returns an ndarray rather than a ``range``
    instance.

    When using a non-integer step, such as 0.1, it is often better to use
    `numpy.linspace`.

    See the Warning sections below for more information.

    Parameters
    ----------
    start : integer or real, optional
        Start of interval.  The interval includes this value.  The default
        start value is 0.
    stop : integer or real
        End of interval.  The interval does not include this value, except
        in some cases where `step` is not an integer and floating point
        round-off affects the length of `out`.
    step : integer or real, optional
        Spacing between values.  For any output `out`, this is the distance
        between two adjacent values, ``out[i+1] - out[i]``.  The default
        step size is 1.  If `step` is specified as a position argument,
        `start` must also be given.
    dtype : dtype, optional
        The type of the output array.  If `dtype` is not given, infer the data
        type from the other input arguments.
    like : array_like, optional
        Reference object to allow the creation of arrays which are not
        NumPy arrays. If an array-like passed in as ``like`` supports
        the ``__array_function__`` protocol, the result will be defined
        by it. In this case, it ensures the creation of an array object
        compatible with that passed in via this argument.

        .. versionadded:: 1.20.0

    Returns
    -------
    arange : ndarray
        Array of evenly spaced values.

        For floating point arguments, the length of the result is
        ``ceil((stop - start)/step)``.  Because of floating point overflow,
        this rule may result in the last element of `out` being greater
        than `stop`.

    Warnings
    --------
    The length of the output might not be numerically stable.

    Another stability issue is due to the internal implementation of
    `numpy.arange`.
    The actual step value used to populate the array is
    ``dtype(start + step) - dtype(start)`` and not `step`. Precision loss
    can occur here, due to casting or due to using floating points when
    `start` is much larger than `step`. This can lead to unexpected
    behaviour. For example::

      >>> np.arange(0, 5, 0.5, dtype=int)
      array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
      >>> np.arange(-3, 3, 0.5, dtype=int)
      array([-3, -2, -1,  0,  1,  2,  3,  4,  5,  6,  7,  8])

    In such cases, the use of `numpy.linspace` should be preferred.

    The built-in :py:class:`range` generates :std:doc:`Python built-in integers
    that have arbitrary size <python:c-api/long>`, while `numpy.arange`
    produces `numpy.int32` or `numpy.int64` numbers. This may result in
    incorrect results for large integer values::

      >>> power = 40
      >>> modulo = 10000
      >>> x1 = [(n ** power) % modulo for n in range(8)]
      >>> x2 = [(n ** power) % modulo for n in np.arange(8)]
      >>> print(x1)
      [0, 1, 7776, 8801, 6176, 625, 6576, 4001]  # correct
      >>> print(x2)
      [0, 1, 7776, 7185, 0, 5969, 4816, 3361]  # incorrect

    See Also
    --------
    numpy.linspace : Evenly spaced numbers with careful handling of endpoints.
    numpy.ogrid: Arrays of evenly spaced numbers in N-dimensions.
    numpy.mgrid: Grid-shaped arrays of evenly spaced numbers in N-dimensions.
    :ref:`how-to-partition`

    Examples
    --------
    >>> np.arange(3)
    array([0, 1, 2])
    >>> np.arange(3.0)
    array([ 0.,  1.,  2.])
    >>> np.arange(3,7)
    array([3, 4, 5, 6])
    >>> np.arange(3,7,2)
    array([3, 5])

None
Help on _ArrayFunctionDispatcher in module numpy:

argmax(a, axis=None, out=None, *, keepdims=<no value>)
    Returns the indices of the maximum values along an axis.

    Parameters
    ----------
    a : array_like
        Input array.
    axis : int, optional
        By default, the index is into the flattened array, otherwise
        along the specified axis.
    out : array, optional
        If provided, the result will be inserted into this array. It should
        be of the appropriate shape and dtype.
    keepdims : bool, optional
        If this is set to True, the axes which are reduced are left
        in the result as dimensions with size one. With this option,
        the result will broadcast correctly against the array.

        .. versionadded:: 1.22.0

    Returns
    -------
    index_array : ndarray of ints
        Array of indices into the array. It has the same shape as `a.shape`
        with the dimension along `axis` removed. If `keepdims` is set to True,
        then the size of `axis` will be 1 with the resulting array having same
        shape as `a.shape`.

    See Also
    --------
    ndarray.argmax, argmin
    amax : The maximum value along a given axis.
    unravel_index : Convert a flat index into an index tuple.
    take_along_axis : Apply ``np.expand_dims(index_array, axis)``
                      from argmax to an array as if by calling max.

    Notes
    -----
    In case of multiple occurrences of the maximum values, the indices
    corresponding to the first occurrence are returned.

    Examples
    --------
    >>> a = np.arange(6).reshape(2,3) + 10
    >>> a
    array([[10, 11, 12],
           [13, 14, 15]])
    >>> np.argmax(a)
    5
    >>> np.argmax(a, axis=0)
    array([1, 1, 1])
    >>> np.argmax(a, axis=1)
    array([2, 2])

    Indexes of the maximal elements of a N-dimensional array:

    >>> ind = np.unravel_index(np.argmax(a, axis=None), a.shape)
    >>> ind
    (1, 2)
    >>> a[ind]
    15

    >>> b = np.arange(6)
    >>> b[1] = 5
    >>> b
    array([0, 5, 2, 3, 4, 5])
    >>> np.argmax(b)  # Only the first occurrence is returned.
    1

    >>> x = np.array([[4,2,3], [1,0,3]])
    >>> index_array = np.argmax(x, axis=-1)
    >>> # Same as np.amax(x, axis=-1, keepdims=True)
    >>> np.take_along_axis(x, np.expand_dims(index_array, axis=-1), axis=-1)
    array([[4],
           [3]])
    >>> # Same as np.amax(x, axis=-1)
    >>> np.take_along_axis(x, np.expand_dims(index_array, axis=-1), axis=-1).squeeze(axis=-1)
    array([4, 3])

    Setting `keepdims` to `True`,

    >>> x = np.arange(24).reshape((2, 3, 4))
    >>> res = np.argmax(x, axis=1, keepdims=True)
    >>> res.shape
    (2, 1, 4)

None
Help on _ArrayFunctionDispatcher in module numpy:

around(a, decimals=0, out=None)
    Round an array to the given number of decimals.

    `around` is an alias of `~numpy.round`.

    See Also
    --------
    ndarray.round : equivalent method
    round : alias for this function
    ceil, fix, floor, rint, trunc

None
Help on built-in function array in module numpy:

array(...)
    array(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0,
          like=None)

    Create an array.

    Parameters
    ----------
    object : array_like
        An array, any object exposing the array interface, an object whose
        ``__array__`` method returns an array, or any (nested) sequence.
        If object is a scalar, a 0-dimensional array containing object is
        returned.
    dtype : data-type, optional
        The desired data-type for the array. If not given, NumPy will try to use
        a default ``dtype`` that can represent the values (by applying promotion
        rules when necessary.)
    copy : bool, optional
        If true (default), then the object is copied.  Otherwise, a copy will
        only be made if ``__array__`` returns a copy, if obj is a nested
        sequence, or if a copy is needed to satisfy any of the other
        requirements (``dtype``, ``order``, etc.).
    order : {'K', 'A', 'C', 'F'}, optional
        Specify the memory layout of the array. If object is not an array, the
        newly created array will be in C order (row major) unless 'F' is
        specified, in which case it will be in Fortran order (column major).
        If object is an array the following holds.

        ===== ========= ===================================================
        order  no copy                     copy=True
        ===== ========= ===================================================
        'K'   unchanged F & C order preserved, otherwise most similar order
        'A'   unchanged F order if input is F and not C, otherwise C order
        'C'   C order   C order
        'F'   F order   F order
        ===== ========= ===================================================

        When ``copy=False`` and a copy is made for other reasons, the result is
        the same as if ``copy=True``, with some exceptions for 'A', see the
        Notes section. The default order is 'K'.
    subok : bool, optional
        If True, then sub-classes will be passed-through, otherwise
        the returned array will be forced to be a base-class array (default).
    ndmin : int, optional
        Specifies the minimum number of dimensions that the resulting
        array should have.  Ones will be prepended to the shape as
        needed to meet this requirement.
    like : array_like, optional
        Reference object to allow the creation of arrays which are not
        NumPy arrays. If an array-like passed in as ``like`` supports
        the ``__array_function__`` protocol, the result will be defined
        by it. In this case, it ensures the creation of an array object
        compatible with that passed in via this argument.

        .. versionadded:: 1.20.0

    Returns
    -------
    out : ndarray
        An array object satisfying the specified requirements.

    See Also
    --------
    empty_like : Return an empty array with shape and type of input.
    ones_like : Return an array of ones with shape and type of input.
    zeros_like : Return an array of zeros with shape and type of input.
    full_like : Return a new array with shape of input filled with value.
    empty : Return a new uninitialized array.
    ones : Return a new array setting values to one.
    zeros : Return a new array setting values to zero.
    full : Return a new array of given shape filled with value.


    Notes
    -----
    When order is 'A' and ``object`` is an array in neither 'C' nor 'F' order,
    and a copy is forced by a change in dtype, then the order of the result is
    not necessarily 'C' as expected. This is likely a bug.

    Examples
    --------
    >>> np.array([1, 2, 3])
    array([1, 2, 3])

    Upcasting:

    >>> np.array([1, 2, 3.0])
    array([ 1.,  2.,  3.])

    More than one dimension:

    >>> np.array([[1, 2], [3, 4]])
    array([[1, 2],
           [3, 4]])

    Minimum dimensions 2:

    >>> np.array([1, 2, 3], ndmin=2)
    array([[1, 2, 3]])

    Type provided:

    >>> np.array([1, 2, 3], dtype=complex)
    array([ 1.+0.j,  2.+0.j,  3.+0.j])

    Data-type consisting of more than one element:

    >>> x = np.array([(1,2),(3,4)],dtype=[('a','<i4'),('b','<i4')])
    >>> x['a']
    array([1, 3])

    Creating an array from sub-classes:

    >>> np.array(np.mat('1 2; 3 4'))
    array([[1, 2],
           [3, 4]])

    >>> np.array(np.mat('1 2; 3 4'), subok=True)
    matrix([[1, 2],
            [3, 4]])

None
Help on function bartlett in module numpy:

bartlett(M)
    Return the Bartlett window.

    The Bartlett window is very similar to a triangular window, except
    that the end points are at zero.  It is often used in signal
    processing for tapering a signal, without generating too much
    ripple in the frequency domain.

    Parameters
    ----------
    M : int
        Number of points in the output window. If zero or less, an
        empty array is returned.

    Returns
    -------
    out : array
        The triangular window, with the maximum value normalized to one
        (the value one appears only if the number of samples is odd), with
        the first and last samples equal to zero.

    See Also
    --------
    blackman, hamming, hanning, kaiser

    Notes
    -----
    The Bartlett window is defined as

    .. math:: w(n) = \frac{2}{M-1} \left(
              \frac{M-1}{2} - \left|n - \frac{M-1}{2}\right|
              \right)

    Most references to the Bartlett window come from the signal processing
    literature, where it is used as one of many windowing functions for
    smoothing values.  Note that convolution with this window produces linear
    interpolation.  It is also known as an apodization (which means "removing
    the foot", i.e. smoothing discontinuities at the beginning and end of the
    sampled signal) or tapering function. The Fourier transform of the
    Bartlett window is the product of two sinc functions. Note the excellent
    discussion in Kanasewich [2]_.

    References
    ----------
    .. [1] M.S. Bartlett, "Periodogram Analysis and Continuous Spectra",
           Biometrika 37, 1-16, 1950.
    .. [2] E.R. Kanasewich, "Time Sequence Analysis in Geophysics",
           The University of Alberta Press, 1975, pp. 109-110.
    .. [3] A.V. Oppenheim and R.W. Schafer, "Discrete-Time Signal
           Processing", Prentice-Hall, 1999, pp. 468-471.
    .. [4] Wikipedia, "Window function",
           https://en.wikipedia.org/wiki/Window_function
    .. [5] W.H. Press,  B.P. Flannery, S.A. Teukolsky, and W.T. Vetterling,
           "Numerical Recipes", Cambridge University Press, 1986, page 429.

    Examples
    --------
    >>> import matplotlib.pyplot as plt
    >>> np.bartlett(12)
    array([ 0.        ,  0.18181818,  0.36363636,  0.54545455,  0.72727273, # may vary
            0.90909091,  0.90909091,  0.72727273,  0.54545455,  0.36363636,
            0.18181818,  0.        ])

    Plot the window and its frequency response (requires SciPy and matplotlib):

    >>> from numpy.fft import fft, fftshift
    >>> window = np.bartlett(51)
    >>> plt.plot(window)
    [<matplotlib.lines.Line2D object at 0x...>]
    >>> plt.title("Bartlett window")
    Text(0.5, 1.0, 'Bartlett window')
    >>> plt.ylabel("Amplitude")
    Text(0, 0.5, 'Amplitude')
    >>> plt.xlabel("Sample")
    Text(0.5, 0, 'Sample')
    >>> plt.show()

    >>> plt.figure()
    <Figure size 640x480 with 0 Axes>
    >>> A = fft(window, 2048) / 25.5
    >>> mag = np.abs(fftshift(A))
    >>> freq = np.linspace(-0.5, 0.5, len(A))
    >>> with np.errstate(divide='ignore', invalid='ignore'):
    ...     response = 20 * np.log10(mag)
    ...
    >>> response = np.clip(response, -100, 100)
    >>> plt.plot(freq, response)
    [<matplotlib.lines.Line2D object at 0x...>]
    >>> plt.title("Frequency response of Bartlett window")
    Text(0.5, 1.0, 'Frequency response of Bartlett window')
    >>> plt.ylabel("Magnitude [dB]")
    Text(0, 0.5, 'Magnitude [dB]')
    >>> plt.xlabel("Normalized frequency [cycles per sample]")
    Text(0.5, 0, 'Normalized frequency [cycles per sample]')
    >>> _ = plt.axis('tight')
    >>> plt.show()

None
Help on CClass in module numpy.lib.index_tricks object:

class CClass(AxisConcatenator)
 |  Translates slice objects to concatenation along the second axis.
 |
 |  This is short-hand for ``np.r_['-1,2,0', index expression]``, which is
 |  useful because of its common occurrence. In particular, arrays will be
 |  stacked along their last axis after being upgraded to at least 2-D with
 |  1's post-pended to the shape (column vectors made out of 1-D arrays).
 |
 |  See Also
 |  --------
 |  column_stack : Stack 1-D arrays as columns into a 2-D array.
 |  r_ : For more detailed documentation.
 |
 |  Examples
 |  --------
 |  >>> np.c_[np.array([1,2,3]), np.array([4,5,6])]
 |  array([[1, 4],
 |         [2, 5],
 |         [3, 6]])
 |  >>> np.c_[np.array([[1,2,3]]), 0, 0, np.array([[4,5,6]])]
 |  array([[1, 2, 3, ..., 4, 5, 6]])
 |
 |  Method resolution order:
 |      CClass
 |      AxisConcatenator
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  __init__(self)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from AxisConcatenator:
 |
 |  __getitem__(self, key)
 |
 |  __len__(self)
 |
 |  ----------------------------------------------------------------------
 |  Static methods inherited from AxisConcatenator:
 |
 |  concatenate(...)
 |      concatenate((a1, a2, ...), axis=0, out=None, dtype=None, casting="same_kind")
 |
 |      Join a sequence of arrays along an existing axis.
 |
 |      Parameters
 |      ----------
 |      a1, a2, ... : sequence of array_like
 |          The arrays must have the same shape, except in the dimension
 |          corresponding to `axis` (the first, by default).
 |      axis : int, optional
 |          The axis along which the arrays will be joined.  If axis is None,
 |          arrays are flattened before use.  Default is 0.
 |      out : ndarray, optional
 |          If provided, the destination to place the result. The shape must be
 |          correct, matching that of what concatenate would have returned if no
 |          out argument were specified.
 |      dtype : str or dtype
 |          If provided, the destination array will have this dtype. Cannot be
 |          provided together with `out`.
 |
 |          .. versionadded:: 1.20.0
 |
 |      casting : {'no', 'equiv', 'safe', 'same_kind', 'unsafe'}, optional
 |          Controls what kind of data casting may occur. Defaults to 'same_kind'.
 |
 |          .. versionadded:: 1.20.0
 |
 |      Returns
 |      -------
 |      res : ndarray
 |          The concatenated array.
 |
 |      See Also
 |      --------
 |      ma.concatenate : Concatenate function that preserves input masks.
 |      array_split : Split an array into multiple sub-arrays of equal or
 |                    near-equal size.
 |      split : Split array into a list of multiple sub-arrays of equal size.
 |      hsplit : Split array into multiple sub-arrays horizontally (column wise).
 |      vsplit : Split array into multiple sub-arrays vertically (row wise).
 |      dsplit : Split array into multiple sub-arrays along the 3rd axis (depth).
 |      stack : Stack a sequence of arrays along a new axis.
 |      block : Assemble arrays from blocks.
 |      hstack : Stack arrays in sequence horizontally (column wise).
 |      vstack : Stack arrays in sequence vertically (row wise).
 |      dstack : Stack arrays in sequence depth wise (along third dimension).
 |      column_stack : Stack 1-D arrays as columns into a 2-D array.
 |
 |      Notes
 |      -----
 |      When one or more of the arrays to be concatenated is a MaskedArray,
 |      this function will return a MaskedArray object instead of an ndarray,
 |      but the input masks are *not* preserved. In cases where a MaskedArray
 |      is expected as input, use the ma.concatenate function from the masked
 |      array module instead.
 |
 |      Examples
 |      --------
 |      >>> a = np.array([[1, 2], [3, 4]])
 |      >>> b = np.array([[5, 6]])
 |      >>> np.concatenate((a, b), axis=0)
 |      array([[1, 2],
 |             [3, 4],
 |             [5, 6]])
 |      >>> np.concatenate((a, b.T), axis=1)
 |      array([[1, 2, 5],
 |             [3, 4, 6]])
 |      >>> np.concatenate((a, b), axis=None)
 |      array([1, 2, 3, 4, 5, 6])
 |
 |      This function will not preserve masking of MaskedArray inputs.
 |
 |      >>> a = np.ma.arange(3)
 |      >>> a[1] = np.ma.masked
 |      >>> b = np.arange(2, 5)
 |      >>> a
 |      masked_array(data=[0, --, 2],
 |                   mask=[False,  True, False],
 |             fill_value=999999)
 |      >>> b
 |      array([2, 3, 4])
 |      >>> np.concatenate([a, b])
 |      masked_array(data=[0, 1, 2, 2, 3, 4],
 |                   mask=False,
 |             fill_value=999999)
 |      >>> np.ma.concatenate([a, b])
 |      masked_array(data=[0, --, 2, 2, 3, 4],
 |                   mask=[False,  True, False, False, False, False],
 |             fill_value=999999)
 |
 |  makemat = class matrix(ndarray)
 |   |  makemat(data, dtype=None, copy=True)
 |   |
 |   |  matrix(data, dtype=None, copy=True)
 |   |
 |   |  .. note:: It is no longer recommended to use this class, even for linear
 |   |            algebra. Instead use regular arrays. The class may be removed
 |   |            in the future.
 |   |
 |   |  Returns a matrix from an array-like object, or from a string of data.
 |   |  A matrix is a specialized 2-D array that retains its 2-D nature
 |   |  through operations.  It has certain special operators, such as ``*``
 |   |  (matrix multiplication) and ``**`` (matrix power).
 |   |
 |   |  Parameters
 |   |  ----------
 |   |  data : array_like or string
 |   |     If `data` is a string, it is interpreted as a matrix with commas
 |   |     or spaces separating columns, and semicolons separating rows.
 |   |  dtype : data-type
 |   |     Data-type of the output matrix.
 |   |  copy : bool
 |   |     If `data` is already an `ndarray`, then this flag determines
 |   |     whether the data is copied (the default), or whether a view is
 |   |     constructed.
 |   |
 |   |  See Also
 |   |  --------
 |   |  array
 |   |
 |   |  Examples
 |   |  --------
 |   |  >>> a = np.matrix('1 2; 3 4')
 |   |  >>> a
 |   |  matrix([[1, 2],
 |   |          [3, 4]])
 |   |
 |   |  >>> np.matrix([[1, 2], [3, 4]])
 |   |  matrix([[1, 2],
 |   |          [3, 4]])
 |   |
 |   |  Method resolution order:
 |   |      matrix
 |   |      ndarray
 |   |      builtins.object
 |   |
 |   |  Methods defined here:
 |   |
 |   |  __array_finalize__(self, obj)
 |   |      a.__array_finalize__(obj, /)
 |   |
 |   |      Present so subclasses can call super. Does nothing.
 |   |
 |   |  __getitem__(self, index)
 |   |      Return self[key].
 |   |
 |   |  __imul__(self, other)
 |   |      Return self*=value.
 |   |
 |   |  __ipow__(self, other)
 |   |      Return self**=value.
 |   |
 |   |  __mul__(self, other)
 |   |      Return self*value.
 |   |
 |   |  __pow__(self, other)
 |   |      Return pow(self, value, mod).
 |   |
 |   |  __rmul__(self, other)
 |   |      Return value*self.
 |   |
 |   |  __rpow__(self, other)
 |   |      Return pow(value, self, mod).
 |   |
 |   |  all(self, axis=None, out=None)
 |   |      Test whether all matrix elements along a given axis evaluate to True.
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      See `numpy.all` for complete descriptions
 |   |
 |   |      See Also
 |   |      --------
 |   |      numpy.all
 |   |
 |   |      Notes
 |   |      -----
 |   |      This is the same as `ndarray.all`, but it returns a `matrix` object.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> x = np.matrix(np.arange(12).reshape((3,4))); x
 |   |      matrix([[ 0,  1,  2,  3],
 |   |              [ 4,  5,  6,  7],
 |   |              [ 8,  9, 10, 11]])
 |   |      >>> y = x[0]; y
 |   |      matrix([[0, 1, 2, 3]])
 |   |      >>> (x == y)
 |   |      matrix([[ True,  True,  True,  True],
 |   |              [False, False, False, False],
 |   |              [False, False, False, False]])
 |   |      >>> (x == y).all()
 |   |      False
 |   |      >>> (x == y).all(0)
 |   |      matrix([[False, False, False, False]])
 |   |      >>> (x == y).all(1)
 |   |      matrix([[ True],
 |   |              [False],
 |   |              [False]])
 |   |
 |   |  any(self, axis=None, out=None)
 |   |      Test whether any array element along a given axis evaluates to True.
 |   |
 |   |      Refer to `numpy.any` for full documentation.
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      axis : int, optional
 |   |          Axis along which logical OR is performed
 |   |      out : ndarray, optional
 |   |          Output to existing array instead of creating new one, must have
 |   |          same shape as expected output
 |   |
 |   |      Returns
 |   |      -------
 |   |          any : bool, ndarray
 |   |              Returns a single bool if `axis` is ``None``; otherwise,
 |   |              returns `ndarray`
 |   |
 |   |  argmax(self, axis=None, out=None)
 |   |      Indexes of the maximum values along an axis.
 |   |
 |   |      Return the indexes of the first occurrences of the maximum values
 |   |      along the specified axis.  If axis is None, the index is for the
 |   |      flattened matrix.
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      See `numpy.argmax` for complete descriptions
 |   |
 |   |      See Also
 |   |      --------
 |   |      numpy.argmax
 |   |
 |   |      Notes
 |   |      -----
 |   |      This is the same as `ndarray.argmax`, but returns a `matrix` object
 |   |      where `ndarray.argmax` would return an `ndarray`.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> x = np.matrix(np.arange(12).reshape((3,4))); x
 |   |      matrix([[ 0,  1,  2,  3],
 |   |              [ 4,  5,  6,  7],
 |   |              [ 8,  9, 10, 11]])
 |   |      >>> x.argmax()
 |   |      11
 |   |      >>> x.argmax(0)
 |   |      matrix([[2, 2, 2, 2]])
 |   |      >>> x.argmax(1)
 |   |      matrix([[3],
 |   |              [3],
 |   |              [3]])
 |   |
 |   |  argmin(self, axis=None, out=None)
 |   |      Indexes of the minimum values along an axis.
 |   |
 |   |      Return the indexes of the first occurrences of the minimum values
 |   |      along the specified axis.  If axis is None, the index is for the
 |   |      flattened matrix.
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      See `numpy.argmin` for complete descriptions.
 |   |
 |   |      See Also
 |   |      --------
 |   |      numpy.argmin
 |   |
 |   |      Notes
 |   |      -----
 |   |      This is the same as `ndarray.argmin`, but returns a `matrix` object
 |   |      where `ndarray.argmin` would return an `ndarray`.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> x = -np.matrix(np.arange(12).reshape((3,4))); x
 |   |      matrix([[  0,  -1,  -2,  -3],
 |   |              [ -4,  -5,  -6,  -7],
 |   |              [ -8,  -9, -10, -11]])
 |   |      >>> x.argmin()
 |   |      11
 |   |      >>> x.argmin(0)
 |   |      matrix([[2, 2, 2, 2]])
 |   |      >>> x.argmin(1)
 |   |      matrix([[3],
 |   |              [3],
 |   |              [3]])
 |   |
 |   |  flatten(self, order='C')
 |   |      Return a flattened copy of the matrix.
 |   |
 |   |      All `N` elements of the matrix are placed into a single row.
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      order : {'C', 'F', 'A', 'K'}, optional
 |   |          'C' means to flatten in row-major (C-style) order. 'F' means to
 |   |          flatten in column-major (Fortran-style) order. 'A' means to
 |   |          flatten in column-major order if `m` is Fortran *contiguous* in
 |   |          memory, row-major order otherwise. 'K' means to flatten `m` in
 |   |          the order the elements occur in memory. The default is 'C'.
 |   |
 |   |      Returns
 |   |      -------
 |   |      y : matrix
 |   |          A copy of the matrix, flattened to a `(1, N)` matrix where `N`
 |   |          is the number of elements in the original matrix.
 |   |
 |   |      See Also
 |   |      --------
 |   |      ravel : Return a flattened array.
 |   |      flat : A 1-D flat iterator over the matrix.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> m = np.matrix([[1,2], [3,4]])
 |   |      >>> m.flatten()
 |   |      matrix([[1, 2, 3, 4]])
 |   |      >>> m.flatten('F')
 |   |      matrix([[1, 3, 2, 4]])
 |   |
 |   |  getA = A(self)
 |   |      Return `self` as an `ndarray` object.
 |   |
 |   |      Equivalent to ``np.asarray(self)``.
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      None
 |   |
 |   |      Returns
 |   |      -------
 |   |      ret : ndarray
 |   |          `self` as an `ndarray`
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> x = np.matrix(np.arange(12).reshape((3,4))); x
 |   |      matrix([[ 0,  1,  2,  3],
 |   |              [ 4,  5,  6,  7],
 |   |              [ 8,  9, 10, 11]])
 |   |      >>> x.getA()
 |   |      array([[ 0,  1,  2,  3],
 |   |             [ 4,  5,  6,  7],
 |   |             [ 8,  9, 10, 11]])
 |   |
 |   |  getA1 = A1(self)
 |   |      Return `self` as a flattened `ndarray`.
 |   |
 |   |      Equivalent to ``np.asarray(x).ravel()``
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      None
 |   |
 |   |      Returns
 |   |      -------
 |   |      ret : ndarray
 |   |          `self`, 1-D, as an `ndarray`
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> x = np.matrix(np.arange(12).reshape((3,4))); x
 |   |      matrix([[ 0,  1,  2,  3],
 |   |              [ 4,  5,  6,  7],
 |   |              [ 8,  9, 10, 11]])
 |   |      >>> x.getA1()
 |   |      array([ 0,  1,  2, ...,  9, 10, 11])
 |   |
 |   |  getH = H(self)
 |   |      Returns the (complex) conjugate transpose of `self`.
 |   |
 |   |      Equivalent to ``np.transpose(self)`` if `self` is real-valued.
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      None
 |   |
 |   |      Returns
 |   |      -------
 |   |      ret : matrix object
 |   |          complex conjugate transpose of `self`
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> x = np.matrix(np.arange(12).reshape((3,4)))
 |   |      >>> z = x - 1j*x; z
 |   |      matrix([[  0. +0.j,   1. -1.j,   2. -2.j,   3. -3.j],
 |   |              [  4. -4.j,   5. -5.j,   6. -6.j,   7. -7.j],
 |   |              [  8. -8.j,   9. -9.j,  10.-10.j,  11.-11.j]])
 |   |      >>> z.getH()
 |   |      matrix([[ 0. -0.j,  4. +4.j,  8. +8.j],
 |   |              [ 1. +1.j,  5. +5.j,  9. +9.j],
 |   |              [ 2. +2.j,  6. +6.j, 10.+10.j],
 |   |              [ 3. +3.j,  7. +7.j, 11.+11.j]])
 |   |
 |   |  getI = I(self)
 |   |      Returns the (multiplicative) inverse of invertible `self`.
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      None
 |   |
 |   |      Returns
 |   |      -------
 |   |      ret : matrix object
 |   |          If `self` is non-singular, `ret` is such that ``ret * self`` ==
 |   |          ``self * ret`` == ``np.matrix(np.eye(self[0,:].size))`` all return
 |   |          ``True``.
 |   |
 |   |      Raises
 |   |      ------
 |   |      numpy.linalg.LinAlgError: Singular matrix
 |   |          If `self` is singular.
 |   |
 |   |      See Also
 |   |      --------
 |   |      linalg.inv
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> m = np.matrix('[1, 2; 3, 4]'); m
 |   |      matrix([[1, 2],
 |   |              [3, 4]])
 |   |      >>> m.getI()
 |   |      matrix([[-2. ,  1. ],
 |   |              [ 1.5, -0.5]])
 |   |      >>> m.getI() * m
 |   |      matrix([[ 1.,  0.], # may vary
 |   |              [ 0.,  1.]])
 |   |
 |   |  getT = T(self)
 |   |      Returns the transpose of the matrix.
 |   |
 |   |      Does *not* conjugate!  For the complex conjugate transpose, use ``.H``.
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      None
 |   |
 |   |      Returns
 |   |      -------
 |   |      ret : matrix object
 |   |          The (non-conjugated) transpose of the matrix.
 |   |
 |   |      See Also
 |   |      --------
 |   |      transpose, getH
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> m = np.matrix('[1, 2; 3, 4]')
 |   |      >>> m
 |   |      matrix([[1, 2],
 |   |              [3, 4]])
 |   |      >>> m.getT()
 |   |      matrix([[1, 3],
 |   |              [2, 4]])
 |   |
 |   |  max(self, axis=None, out=None)
 |   |      Return the maximum value along an axis.
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      See `amax` for complete descriptions
 |   |
 |   |      See Also
 |   |      --------
 |   |      amax, ndarray.max
 |   |
 |   |      Notes
 |   |      -----
 |   |      This is the same as `ndarray.max`, but returns a `matrix` object
 |   |      where `ndarray.max` would return an ndarray.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> x = np.matrix(np.arange(12).reshape((3,4))); x
 |   |      matrix([[ 0,  1,  2,  3],
 |   |              [ 4,  5,  6,  7],
 |   |              [ 8,  9, 10, 11]])
 |   |      >>> x.max()
 |   |      11
 |   |      >>> x.max(0)
 |   |      matrix([[ 8,  9, 10, 11]])
 |   |      >>> x.max(1)
 |   |      matrix([[ 3],
 |   |              [ 7],
 |   |              [11]])
 |   |
 |   |  mean(self, axis=None, dtype=None, out=None)
 |   |      Returns the average of the matrix elements along the given axis.
 |   |
 |   |      Refer to `numpy.mean` for full documentation.
 |   |
 |   |      See Also
 |   |      --------
 |   |      numpy.mean
 |   |
 |   |      Notes
 |   |      -----
 |   |      Same as `ndarray.mean` except that, where that returns an `ndarray`,
 |   |      this returns a `matrix` object.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> x = np.matrix(np.arange(12).reshape((3, 4)))
 |   |      >>> x
 |   |      matrix([[ 0,  1,  2,  3],
 |   |              [ 4,  5,  6,  7],
 |   |              [ 8,  9, 10, 11]])
 |   |      >>> x.mean()
 |   |      5.5
 |   |      >>> x.mean(0)
 |   |      matrix([[4., 5., 6., 7.]])
 |   |      >>> x.mean(1)
 |   |      matrix([[ 1.5],
 |   |              [ 5.5],
 |   |              [ 9.5]])
 |   |
 |   |  min(self, axis=None, out=None)
 |   |      Return the minimum value along an axis.
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      See `amin` for complete descriptions.
 |   |
 |   |      See Also
 |   |      --------
 |   |      amin, ndarray.min
 |   |
 |   |      Notes
 |   |      -----
 |   |      This is the same as `ndarray.min`, but returns a `matrix` object
 |   |      where `ndarray.min` would return an ndarray.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> x = -np.matrix(np.arange(12).reshape((3,4))); x
 |   |      matrix([[  0,  -1,  -2,  -3],
 |   |              [ -4,  -5,  -6,  -7],
 |   |              [ -8,  -9, -10, -11]])
 |   |      >>> x.min()
 |   |      -11
 |   |      >>> x.min(0)
 |   |      matrix([[ -8,  -9, -10, -11]])
 |   |      >>> x.min(1)
 |   |      matrix([[ -3],
 |   |              [ -7],
 |   |              [-11]])
 |   |
 |   |  prod(self, axis=None, dtype=None, out=None)
 |   |      Return the product of the array elements over the given axis.
 |   |
 |   |      Refer to `prod` for full documentation.
 |   |
 |   |      See Also
 |   |      --------
 |   |      prod, ndarray.prod
 |   |
 |   |      Notes
 |   |      -----
 |   |      Same as `ndarray.prod`, except, where that returns an `ndarray`, this
 |   |      returns a `matrix` object instead.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> x = np.matrix(np.arange(12).reshape((3,4))); x
 |   |      matrix([[ 0,  1,  2,  3],
 |   |              [ 4,  5,  6,  7],
 |   |              [ 8,  9, 10, 11]])
 |   |      >>> x.prod()
 |   |      0
 |   |      >>> x.prod(0)
 |   |      matrix([[  0,  45, 120, 231]])
 |   |      >>> x.prod(1)
 |   |      matrix([[   0],
 |   |              [ 840],
 |   |              [7920]])
 |   |
 |   |  ptp(self, axis=None, out=None)
 |   |      Peak-to-peak (maximum - minimum) value along the given axis.
 |   |
 |   |      Refer to `numpy.ptp` for full documentation.
 |   |
 |   |      See Also
 |   |      --------
 |   |      numpy.ptp
 |   |
 |   |      Notes
 |   |      -----
 |   |      Same as `ndarray.ptp`, except, where that would return an `ndarray` object,
 |   |      this returns a `matrix` object.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> x = np.matrix(np.arange(12).reshape((3,4))); x
 |   |      matrix([[ 0,  1,  2,  3],
 |   |              [ 4,  5,  6,  7],
 |   |              [ 8,  9, 10, 11]])
 |   |      >>> x.ptp()
 |   |      11
 |   |      >>> x.ptp(0)
 |   |      matrix([[8, 8, 8, 8]])
 |   |      >>> x.ptp(1)
 |   |      matrix([[3],
 |   |              [3],
 |   |              [3]])
 |   |
 |   |  ravel(self, order='C')
 |   |      Return a flattened matrix.
 |   |
 |   |      Refer to `numpy.ravel` for more documentation.
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      order : {'C', 'F', 'A', 'K'}, optional
 |   |          The elements of `m` are read using this index order. 'C' means to
 |   |          index the elements in C-like order, with the last axis index
 |   |          changing fastest, back to the first axis index changing slowest.
 |   |          'F' means to index the elements in Fortran-like index order, with
 |   |          the first index changing fastest, and the last index changing
 |   |          slowest. Note that the 'C' and 'F' options take no account of the
 |   |          memory layout of the underlying array, and only refer to the order
 |   |          of axis indexing.  'A' means to read the elements in Fortran-like
 |   |          index order if `m` is Fortran *contiguous* in memory, C-like order
 |   |          otherwise.  'K' means to read the elements in the order they occur
 |   |          in memory, except for reversing the data when strides are negative.
 |   |          By default, 'C' index order is used.
 |   |
 |   |      Returns
 |   |      -------
 |   |      ret : matrix
 |   |          Return the matrix flattened to shape `(1, N)` where `N`
 |   |          is the number of elements in the original matrix.
 |   |          A copy is made only if necessary.
 |   |
 |   |      See Also
 |   |      --------
 |   |      matrix.flatten : returns a similar output matrix but always a copy
 |   |      matrix.flat : a flat iterator on the array.
 |   |      numpy.ravel : related function which returns an ndarray
 |   |
 |   |  squeeze(self, axis=None)
 |   |      Return a possibly reshaped matrix.
 |   |
 |   |      Refer to `numpy.squeeze` for more documentation.
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      axis : None or int or tuple of ints, optional
 |   |          Selects a subset of the axes of length one in the shape.
 |   |          If an axis is selected with shape entry greater than one,
 |   |          an error is raised.
 |   |
 |   |      Returns
 |   |      -------
 |   |      squeezed : matrix
 |   |          The matrix, but as a (1, N) matrix if it had shape (N, 1).
 |   |
 |   |      See Also
 |   |      --------
 |   |      numpy.squeeze : related function
 |   |
 |   |      Notes
 |   |      -----
 |   |      If `m` has a single column then that column is returned
 |   |      as the single row of a matrix.  Otherwise `m` is returned.
 |   |      The returned matrix is always either `m` itself or a view into `m`.
 |   |      Supplying an axis keyword argument will not affect the returned matrix
 |   |      but it may cause an error to be raised.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> c = np.matrix([[1], [2]])
 |   |      >>> c
 |   |      matrix([[1],
 |   |              [2]])
 |   |      >>> c.squeeze()
 |   |      matrix([[1, 2]])
 |   |      >>> r = c.T
 |   |      >>> r
 |   |      matrix([[1, 2]])
 |   |      >>> r.squeeze()
 |   |      matrix([[1, 2]])
 |   |      >>> m = np.matrix([[1, 2], [3, 4]])
 |   |      >>> m.squeeze()
 |   |      matrix([[1, 2],
 |   |              [3, 4]])
 |   |
 |   |  std(self, axis=None, dtype=None, out=None, ddof=0)
 |   |      Return the standard deviation of the array elements along the given axis.
 |   |
 |   |      Refer to `numpy.std` for full documentation.
 |   |
 |   |      See Also
 |   |      --------
 |   |      numpy.std
 |   |
 |   |      Notes
 |   |      -----
 |   |      This is the same as `ndarray.std`, except that where an `ndarray` would
 |   |      be returned, a `matrix` object is returned instead.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> x = np.matrix(np.arange(12).reshape((3, 4)))
 |   |      >>> x
 |   |      matrix([[ 0,  1,  2,  3],
 |   |              [ 4,  5,  6,  7],
 |   |              [ 8,  9, 10, 11]])
 |   |      >>> x.std()
 |   |      3.4520525295346629 # may vary
 |   |      >>> x.std(0)
 |   |      matrix([[ 3.26598632,  3.26598632,  3.26598632,  3.26598632]]) # may vary
 |   |      >>> x.std(1)
 |   |      matrix([[ 1.11803399],
 |   |              [ 1.11803399],
 |   |              [ 1.11803399]])
 |   |
 |   |  sum(self, axis=None, dtype=None, out=None)
 |   |      Returns the sum of the matrix elements, along the given axis.
 |   |
 |   |      Refer to `numpy.sum` for full documentation.
 |   |
 |   |      See Also
 |   |      --------
 |   |      numpy.sum
 |   |
 |   |      Notes
 |   |      -----
 |   |      This is the same as `ndarray.sum`, except that where an `ndarray` would
 |   |      be returned, a `matrix` object is returned instead.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> x = np.matrix([[1, 2], [4, 3]])
 |   |      >>> x.sum()
 |   |      10
 |   |      >>> x.sum(axis=1)
 |   |      matrix([[3],
 |   |              [7]])
 |   |      >>> x.sum(axis=1, dtype='float')
 |   |      matrix([[3.],
 |   |              [7.]])
 |   |      >>> out = np.zeros((2, 1), dtype='float')
 |   |      >>> x.sum(axis=1, dtype='float', out=np.asmatrix(out))
 |   |      matrix([[3.],
 |   |              [7.]])
 |   |
 |   |  tolist(self)
 |   |      Return the matrix as a (possibly nested) list.
 |   |
 |   |      See `ndarray.tolist` for full documentation.
 |   |
 |   |      See Also
 |   |      --------
 |   |      ndarray.tolist
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> x = np.matrix(np.arange(12).reshape((3,4))); x
 |   |      matrix([[ 0,  1,  2,  3],
 |   |              [ 4,  5,  6,  7],
 |   |              [ 8,  9, 10, 11]])
 |   |      >>> x.tolist()
 |   |      [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]
 |   |
 |   |  var(self, axis=None, dtype=None, out=None, ddof=0)
 |   |      Returns the variance of the matrix elements, along the given axis.
 |   |
 |   |      Refer to `numpy.var` for full documentation.
 |   |
 |   |      See Also
 |   |      --------
 |   |      numpy.var
 |   |
 |   |      Notes
 |   |      -----
 |   |      This is the same as `ndarray.var`, except that where an `ndarray` would
 |   |      be returned, a `matrix` object is returned instead.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> x = np.matrix(np.arange(12).reshape((3, 4)))
 |   |      >>> x
 |   |      matrix([[ 0,  1,  2,  3],
 |   |              [ 4,  5,  6,  7],
 |   |              [ 8,  9, 10, 11]])
 |   |      >>> x.var()
 |   |      11.916666666666666
 |   |      >>> x.var(0)
 |   |      matrix([[ 10.66666667,  10.66666667,  10.66666667,  10.66666667]]) # may vary
 |   |      >>> x.var(1)
 |   |      matrix([[1.25],
 |   |              [1.25],
 |   |              [1.25]])
 |   |
 |   |  ----------------------------------------------------------------------
 |   |  Static methods defined here:
 |   |
 |   |  __new__(subtype, data, dtype=None, copy=True)
 |   |      Create and return a new object.  See help(type) for accurate signature.
 |   |
 |   |  ----------------------------------------------------------------------
 |   |  Readonly properties defined here:
 |   |
 |   |  A
 |   |      Return `self` as an `ndarray` object.
 |   |
 |   |      Equivalent to ``np.asarray(self)``.
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      None
 |   |
 |   |      Returns
 |   |      -------
 |   |      ret : ndarray
 |   |          `self` as an `ndarray`
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> x = np.matrix(np.arange(12).reshape((3,4))); x
 |   |      matrix([[ 0,  1,  2,  3],
 |   |              [ 4,  5,  6,  7],
 |   |              [ 8,  9, 10, 11]])
 |   |      >>> x.getA()
 |   |      array([[ 0,  1,  2,  3],
 |   |             [ 4,  5,  6,  7],
 |   |             [ 8,  9, 10, 11]])
 |   |
 |   |  A1
 |   |      Return `self` as a flattened `ndarray`.
 |   |
 |   |      Equivalent to ``np.asarray(x).ravel()``
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      None
 |   |
 |   |      Returns
 |   |      -------
 |   |      ret : ndarray
 |   |          `self`, 1-D, as an `ndarray`
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> x = np.matrix(np.arange(12).reshape((3,4))); x
 |   |      matrix([[ 0,  1,  2,  3],
 |   |              [ 4,  5,  6,  7],
 |   |              [ 8,  9, 10, 11]])
 |   |      >>> x.getA1()
 |   |      array([ 0,  1,  2, ...,  9, 10, 11])
 |   |
 |   |  H
 |   |      Returns the (complex) conjugate transpose of `self`.
 |   |
 |   |      Equivalent to ``np.transpose(self)`` if `self` is real-valued.
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      None
 |   |
 |   |      Returns
 |   |      -------
 |   |      ret : matrix object
 |   |          complex conjugate transpose of `self`
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> x = np.matrix(np.arange(12).reshape((3,4)))
 |   |      >>> z = x - 1j*x; z
 |   |      matrix([[  0. +0.j,   1. -1.j,   2. -2.j,   3. -3.j],
 |   |              [  4. -4.j,   5. -5.j,   6. -6.j,   7. -7.j],
 |   |              [  8. -8.j,   9. -9.j,  10.-10.j,  11.-11.j]])
 |   |      >>> z.getH()
 |   |      matrix([[ 0. -0.j,  4. +4.j,  8. +8.j],
 |   |              [ 1. +1.j,  5. +5.j,  9. +9.j],
 |   |              [ 2. +2.j,  6. +6.j, 10.+10.j],
 |   |              [ 3. +3.j,  7. +7.j, 11.+11.j]])
 |   |
 |   |  I
 |   |      Returns the (multiplicative) inverse of invertible `self`.
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      None
 |   |
 |   |      Returns
 |   |      -------
 |   |      ret : matrix object
 |   |          If `self` is non-singular, `ret` is such that ``ret * self`` ==
 |   |          ``self * ret`` == ``np.matrix(np.eye(self[0,:].size))`` all return
 |   |          ``True``.
 |   |
 |   |      Raises
 |   |      ------
 |   |      numpy.linalg.LinAlgError: Singular matrix
 |   |          If `self` is singular.
 |   |
 |   |      See Also
 |   |      --------
 |   |      linalg.inv
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> m = np.matrix('[1, 2; 3, 4]'); m
 |   |      matrix([[1, 2],
 |   |              [3, 4]])
 |   |      >>> m.getI()
 |   |      matrix([[-2. ,  1. ],
 |   |              [ 1.5, -0.5]])
 |   |      >>> m.getI() * m
 |   |      matrix([[ 1.,  0.], # may vary
 |   |              [ 0.,  1.]])
 |   |
 |   |  T
 |   |      Returns the transpose of the matrix.
 |   |
 |   |      Does *not* conjugate!  For the complex conjugate transpose, use ``.H``.
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      None
 |   |
 |   |      Returns
 |   |      -------
 |   |      ret : matrix object
 |   |          The (non-conjugated) transpose of the matrix.
 |   |
 |   |      See Also
 |   |      --------
 |   |      transpose, getH
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> m = np.matrix('[1, 2; 3, 4]')
 |   |      >>> m
 |   |      matrix([[1, 2],
 |   |              [3, 4]])
 |   |      >>> m.getT()
 |   |      matrix([[1, 3],
 |   |              [2, 4]])
 |   |
 |   |  ----------------------------------------------------------------------
 |   |  Data descriptors defined here:
 |   |
 |   |  __dict__
 |   |      dictionary for instance variables
 |   |
 |   |  ----------------------------------------------------------------------
 |   |  Data and other attributes defined here:
 |   |
 |   |  __annotations__ = {}
 |   |
 |   |  __array_priority__ = 10.0
 |   |
 |   |  ----------------------------------------------------------------------
 |   |  Methods inherited from ndarray:
 |   |
 |   |  __abs__(self, /)
 |   |      abs(self)
 |   |
 |   |  __add__(self, value, /)
 |   |      Return self+value.
 |   |
 |   |  __and__(self, value, /)
 |   |      Return self&value.
 |   |
 |   |  __array__(...)
 |   |      a.__array__([dtype], /)
 |   |
 |   |      Returns either a new reference to self if dtype is not given or a new array
 |   |      of provided data type if dtype is different from the current dtype of the
 |   |      array.
 |   |
 |   |  __array_function__(...)
 |   |
 |   |  __array_prepare__(...)
 |   |      a.__array_prepare__(array[, context], /)
 |   |
 |   |      Returns a view of `array` with the same type as self.
 |   |
 |   |  __array_ufunc__(...)
 |   |
 |   |  __array_wrap__(...)
 |   |      a.__array_wrap__(array[, context], /)
 |   |
 |   |      Returns a view of `array` with the same type as self.
 |   |
 |   |  __bool__(self, /)
 |   |      True if self else False
 |   |
 |   |  __buffer__(self, flags, /)
 |   |      Return a buffer object that exposes the underlying memory of the object.
 |   |
 |   |  __complex__(...)
 |   |
 |   |  __contains__(self, key, /)
 |   |      Return bool(key in self).
 |   |
 |   |  __copy__(...)
 |   |      a.__copy__()
 |   |
 |   |      Used if :func:`copy.copy` is called on an array. Returns a copy of the array.
 |   |
 |   |      Equivalent to ``a.copy(order='K')``.
 |   |
 |   |  __deepcopy__(...)
 |   |      a.__deepcopy__(memo, /)
 |   |
 |   |      Used if :func:`copy.deepcopy` is called on an array.
 |   |
 |   |  __delitem__(self, key, /)
 |   |      Delete self[key].
 |   |
 |   |  __divmod__(self, value, /)
 |   |      Return divmod(self, value).
 |   |
 |   |  __dlpack__(...)
 |   |      a.__dlpack__(*, stream=None)
 |   |
 |   |      DLPack Protocol: Part of the Array API.
 |   |
 |   |  __dlpack_device__(...)
 |   |      a.__dlpack_device__()
 |   |
 |   |      DLPack Protocol: Part of the Array API.
 |   |
 |   |  __eq__(self, value, /)
 |   |      Return self==value.
 |   |
 |   |  __float__(self, /)
 |   |      float(self)
 |   |
 |   |  __floordiv__(self, value, /)
 |   |      Return self//value.
 |   |
 |   |  __format__(...)
 |   |      Default object formatter.
 |   |
 |   |      Return str(self) if format_spec is empty. Raise TypeError otherwise.
 |   |
 |   |  __ge__(self, value, /)
 |   |      Return self>=value.
 |   |
 |   |  __gt__(self, value, /)
 |   |      Return self>value.
 |   |
 |   |  __iadd__(self, value, /)
 |   |      Return self+=value.
 |   |
 |   |  __iand__(self, value, /)
 |   |      Return self&=value.
 |   |
 |   |  __ifloordiv__(self, value, /)
 |   |      Return self//=value.
 |   |
 |   |  __ilshift__(self, value, /)
 |   |      Return self<<=value.
 |   |
 |   |  __imatmul__(self, value, /)
 |   |      Return self@=value.
 |   |
 |   |  __imod__(self, value, /)
 |   |      Return self%=value.
 |   |
 |   |  __index__(self, /)
 |   |      Return self converted to an integer, if self is suitable for use as an index into a list.
 |   |
 |   |  __int__(self, /)
 |   |      int(self)
 |   |
 |   |  __invert__(self, /)
 |   |      ~self
 |   |
 |   |  __ior__(self, value, /)
 |   |      Return self|=value.
 |   |
 |   |  __irshift__(self, value, /)
 |   |      Return self>>=value.
 |   |
 |   |  __isub__(self, value, /)
 |   |      Return self-=value.
 |   |
 |   |  __iter__(self, /)
 |   |      Implement iter(self).
 |   |
 |   |  __itruediv__(self, value, /)
 |   |      Return self/=value.
 |   |
 |   |  __ixor__(self, value, /)
 |   |      Return self^=value.
 |   |
 |   |  __le__(self, value, /)
 |   |      Return self<=value.
 |   |
 |   |  __len__(self, /)
 |   |      Return len(self).
 |   |
 |   |  __lshift__(self, value, /)
 |   |      Return self<<value.
 |   |
 |   |  __lt__(self, value, /)
 |   |      Return self<value.
 |   |
 |   |  __matmul__(self, value, /)
 |   |      Return self@value.
 |   |
 |   |  __mod__(self, value, /)
 |   |      Return self%value.
 |   |
 |   |  __ne__(self, value, /)
 |   |      Return self!=value.
 |   |
 |   |  __neg__(self, /)
 |   |      -self
 |   |
 |   |  __or__(self, value, /)
 |   |      Return self|value.
 |   |
 |   |  __pos__(self, /)
 |   |      +self
 |   |
 |   |  __radd__(self, value, /)
 |   |      Return value+self.
 |   |
 |   |  __rand__(self, value, /)
 |   |      Return value&self.
 |   |
 |   |  __rdivmod__(self, value, /)
 |   |      Return divmod(value, self).
 |   |
 |   |  __reduce__(...)
 |   |      a.__reduce__()
 |   |
 |   |      For pickling.
 |   |
 |   |  __reduce_ex__(...)
 |   |      Helper for pickle.
 |   |
 |   |  __repr__(self, /)
 |   |      Return repr(self).
 |   |
 |   |  __rfloordiv__(self, value, /)
 |   |      Return value//self.
 |   |
 |   |  __rlshift__(self, value, /)
 |   |      Return value<<self.
 |   |
 |   |  __rmatmul__(self, value, /)
 |   |      Return value@self.
 |   |
 |   |  __rmod__(self, value, /)
 |   |      Return value%self.
 |   |
 |   |  __ror__(self, value, /)
 |   |      Return value|self.
 |   |
 |   |  __rrshift__(self, value, /)
 |   |      Return value>>self.
 |   |
 |   |  __rshift__(self, value, /)
 |   |      Return self>>value.
 |   |
 |   |  __rsub__(self, value, /)
 |   |      Return value-self.
 |   |
 |   |  __rtruediv__(self, value, /)
 |   |      Return value/self.
 |   |
 |   |  __rxor__(self, value, /)
 |   |      Return value^self.
 |   |
 |   |  __setitem__(self, key, value, /)
 |   |      Set self[key] to value.
 |   |
 |   |  __setstate__(...)
 |   |      a.__setstate__(state, /)
 |   |
 |   |      For unpickling.
 |   |
 |   |      The `state` argument must be a sequence that contains the following
 |   |      elements:
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      version : int
 |   |          optional pickle version. If omitted defaults to 0.
 |   |      shape : tuple
 |   |      dtype : data-type
 |   |      isFortran : bool
 |   |      rawdata : string or list
 |   |          a binary string with the data (or a list if 'a' is an object array)
 |   |
 |   |  __sizeof__(...)
 |   |      Size of object in memory, in bytes.
 |   |
 |   |  __str__(self, /)
 |   |      Return str(self).
 |   |
 |   |  __sub__(self, value, /)
 |   |      Return self-value.
 |   |
 |   |  __truediv__(self, value, /)
 |   |      Return self/value.
 |   |
 |   |  __xor__(self, value, /)
 |   |      Return self^value.
 |   |
 |   |  argpartition(...)
 |   |      a.argpartition(kth, axis=-1, kind='introselect', order=None)
 |   |
 |   |      Returns the indices that would partition this array.
 |   |
 |   |      Refer to `numpy.argpartition` for full documentation.
 |   |
 |   |      .. versionadded:: 1.8.0
 |   |
 |   |      See Also
 |   |      --------
 |   |      numpy.argpartition : equivalent function
 |   |
 |   |  argsort(...)
 |   |      a.argsort(axis=-1, kind=None, order=None)
 |   |
 |   |      Returns the indices that would sort this array.
 |   |
 |   |      Refer to `numpy.argsort` for full documentation.
 |   |
 |   |      See Also
 |   |      --------
 |   |      numpy.argsort : equivalent function
 |   |
 |   |  astype(...)
 |   |      a.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)
 |   |
 |   |      Copy of the array, cast to a specified type.
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      dtype : str or dtype
 |   |          Typecode or data-type to which the array is cast.
 |   |      order : {'C', 'F', 'A', 'K'}, optional
 |   |          Controls the memory layout order of the result.
 |   |          'C' means C order, 'F' means Fortran order, 'A'
 |   |          means 'F' order if all the arrays are Fortran contiguous,
 |   |          'C' order otherwise, and 'K' means as close to the
 |   |          order the array elements appear in memory as possible.
 |   |          Default is 'K'.
 |   |      casting : {'no', 'equiv', 'safe', 'same_kind', 'unsafe'}, optional
 |   |          Controls what kind of data casting may occur. Defaults to 'unsafe'
 |   |          for backwards compatibility.
 |   |
 |   |            * 'no' means the data types should not be cast at all.
 |   |            * 'equiv' means only byte-order changes are allowed.
 |   |            * 'safe' means only casts which can preserve values are allowed.
 |   |            * 'same_kind' means only safe casts or casts within a kind,
 |   |              like float64 to float32, are allowed.
 |   |            * 'unsafe' means any data conversions may be done.
 |   |      subok : bool, optional
 |   |          If True, then sub-classes will be passed-through (default), otherwise
 |   |          the returned array will be forced to be a base-class array.
 |   |      copy : bool, optional
 |   |          By default, astype always returns a newly allocated array. If this
 |   |          is set to false, and the `dtype`, `order`, and `subok`
 |   |          requirements are satisfied, the input array is returned instead
 |   |          of a copy.
 |   |
 |   |      Returns
 |   |      -------
 |   |      arr_t : ndarray
 |   |          Unless `copy` is False and the other conditions for returning the input
 |   |          array are satisfied (see description for `copy` input parameter), `arr_t`
 |   |          is a new array of the same shape as the input array, with dtype, order
 |   |          given by `dtype`, `order`.
 |   |
 |   |      Notes
 |   |      -----
 |   |      .. versionchanged:: 1.17.0
 |   |         Casting between a simple data type and a structured one is possible only
 |   |         for "unsafe" casting.  Casting to multiple fields is allowed, but
 |   |         casting from multiple fields is not.
 |   |
 |   |      .. versionchanged:: 1.9.0
 |   |         Casting from numeric to string types in 'safe' casting mode requires
 |   |         that the string dtype length is long enough to store the max
 |   |         integer/float value converted.
 |   |
 |   |      Raises
 |   |      ------
 |   |      ComplexWarning
 |   |          When casting from complex to float or int. To avoid this,
 |   |          one should use ``a.real.astype(t)``.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> x = np.array([1, 2, 2.5])
 |   |      >>> x
 |   |      array([1. ,  2. ,  2.5])
 |   |
 |   |      >>> x.astype(int)
 |   |      array([1, 2, 2])
 |   |
 |   |  byteswap(...)
 |   |      a.byteswap(inplace=False)
 |   |
 |   |      Swap the bytes of the array elements
 |   |
 |   |      Toggle between low-endian and big-endian data representation by
 |   |      returning a byteswapped array, optionally swapped in-place.
 |   |      Arrays of byte-strings are not swapped. The real and imaginary
 |   |      parts of a complex number are swapped individually.
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      inplace : bool, optional
 |   |          If ``True``, swap bytes in-place, default is ``False``.
 |   |
 |   |      Returns
 |   |      -------
 |   |      out : ndarray
 |   |          The byteswapped array. If `inplace` is ``True``, this is
 |   |          a view to self.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> A = np.array([1, 256, 8755], dtype=np.int16)
 |   |      >>> list(map(hex, A))
 |   |      ['0x1', '0x100', '0x2233']
 |   |      >>> A.byteswap(inplace=True)
 |   |      array([  256,     1, 13090], dtype=int16)
 |   |      >>> list(map(hex, A))
 |   |      ['0x100', '0x1', '0x3322']
 |   |
 |   |      Arrays of byte-strings are not swapped
 |   |
 |   |      >>> A = np.array([b'ceg', b'fac'])
 |   |      >>> A.byteswap()
 |   |      array([b'ceg', b'fac'], dtype='|S3')
 |   |
 |   |      ``A.newbyteorder().byteswap()`` produces an array with the same values
 |   |        but different representation in memory
 |   |
 |   |      >>> A = np.array([1, 2, 3])
 |   |      >>> A.view(np.uint8)
 |   |      array([1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0,
 |   |             0, 0], dtype=uint8)
 |   |      >>> A.newbyteorder().byteswap(inplace=True)
 |   |      array([1, 2, 3])
 |   |      >>> A.view(np.uint8)
 |   |      array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0,
 |   |             0, 3], dtype=uint8)
 |   |
 |   |  choose(...)
 |   |      a.choose(choices, out=None, mode='raise')
 |   |
 |   |      Use an index array to construct a new array from a set of choices.
 |   |
 |   |      Refer to `numpy.choose` for full documentation.
 |   |
 |   |      See Also
 |   |      --------
 |   |      numpy.choose : equivalent function
 |   |
 |   |  clip(...)
 |   |      a.clip(min=None, max=None, out=None, **kwargs)
 |   |
 |   |      Return an array whose values are limited to ``[min, max]``.
 |   |      One of max or min must be given.
 |   |
 |   |      Refer to `numpy.clip` for full documentation.
 |   |
 |   |      See Also
 |   |      --------
 |   |      numpy.clip : equivalent function
 |   |
 |   |  compress(...)
 |   |      a.compress(condition, axis=None, out=None)
 |   |
 |   |      Return selected slices of this array along given axis.
 |   |
 |   |      Refer to `numpy.compress` for full documentation.
 |   |
 |   |      See Also
 |   |      --------
 |   |      numpy.compress : equivalent function
 |   |
 |   |  conj(...)
 |   |      a.conj()
 |   |
 |   |      Complex-conjugate all elements.
 |   |
 |   |      Refer to `numpy.conjugate` for full documentation.
 |   |
 |   |      See Also
 |   |      --------
 |   |      numpy.conjugate : equivalent function
 |   |
 |   |  conjugate(...)
 |   |      a.conjugate()
 |   |
 |   |      Return the complex conjugate, element-wise.
 |   |
 |   |      Refer to `numpy.conjugate` for full documentation.
 |   |
 |   |      See Also
 |   |      --------
 |   |      numpy.conjugate : equivalent function
 |   |
 |   |  copy(...)
 |   |      a.copy(order='C')
 |   |
 |   |      Return a copy of the array.
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      order : {'C', 'F', 'A', 'K'}, optional
 |   |          Controls the memory layout of the copy. 'C' means C-order,
 |   |          'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,
 |   |          'C' otherwise. 'K' means match the layout of `a` as closely
 |   |          as possible. (Note that this function and :func:`numpy.copy` are very
 |   |          similar but have different default values for their order=
 |   |          arguments, and this function always passes sub-classes through.)
 |   |
 |   |      See also
 |   |      --------
 |   |      numpy.copy : Similar function with different default behavior
 |   |      numpy.copyto
 |   |
 |   |      Notes
 |   |      -----
 |   |      This function is the preferred method for creating an array copy.  The
 |   |      function :func:`numpy.copy` is similar, but it defaults to using order 'K',
 |   |      and will not pass sub-classes through by default.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> x = np.array([[1,2,3],[4,5,6]], order='F')
 |   |
 |   |      >>> y = x.copy()
 |   |
 |   |      >>> x.fill(0)
 |   |
 |   |      >>> x
 |   |      array([[0, 0, 0],
 |   |             [0, 0, 0]])
 |   |
 |   |      >>> y
 |   |      array([[1, 2, 3],
 |   |             [4, 5, 6]])
 |   |
 |   |      >>> y.flags['C_CONTIGUOUS']
 |   |      True
 |   |
 |   |  cumprod(...)
 |   |      a.cumprod(axis=None, dtype=None, out=None)
 |   |
 |   |      Return the cumulative product of the elements along the given axis.
 |   |
 |   |      Refer to `numpy.cumprod` for full documentation.
 |   |
 |   |      See Also
 |   |      --------
 |   |      numpy.cumprod : equivalent function
 |   |
 |   |  cumsum(...)
 |   |      a.cumsum(axis=None, dtype=None, out=None)
 |   |
 |   |      Return the cumulative sum of the elements along the given axis.
 |   |
 |   |      Refer to `numpy.cumsum` for full documentation.
 |   |
 |   |      See Also
 |   |      --------
 |   |      numpy.cumsum : equivalent function
 |   |
 |   |  diagonal(...)
 |   |      a.diagonal(offset=0, axis1=0, axis2=1)
 |   |
 |   |      Return specified diagonals. In NumPy 1.9 the returned array is a
 |   |      read-only view instead of a copy as in previous NumPy versions.  In
 |   |      a future version the read-only restriction will be removed.
 |   |
 |   |      Refer to :func:`numpy.diagonal` for full documentation.
 |   |
 |   |      See Also
 |   |      --------
 |   |      numpy.diagonal : equivalent function
 |   |
 |   |  dot(...)
 |   |
 |   |  dump(...)
 |   |      a.dump(file)
 |   |
 |   |      Dump a pickle of the array to the specified file.
 |   |      The array can be read back with pickle.load or numpy.load.
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      file : str or Path
 |   |          A string naming the dump file.
 |   |
 |   |          .. versionchanged:: 1.17.0
 |   |              `pathlib.Path` objects are now accepted.
 |   |
 |   |  dumps(...)
 |   |      a.dumps()
 |   |
 |   |      Returns the pickle of the array as a string.
 |   |      pickle.loads will convert the string back to an array.
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      None
 |   |
 |   |  fill(...)
 |   |      a.fill(value)
 |   |
 |   |      Fill the array with a scalar value.
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      value : scalar
 |   |          All elements of `a` will be assigned this value.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> a = np.array([1, 2])
 |   |      >>> a.fill(0)
 |   |      >>> a
 |   |      array([0, 0])
 |   |      >>> a = np.empty(2)
 |   |      >>> a.fill(1)
 |   |      >>> a
 |   |      array([1.,  1.])
 |   |
 |   |      Fill expects a scalar value and always behaves the same as assigning
 |   |      to a single array element.  The following is a rare example where this
 |   |      distinction is important:
 |   |
 |   |      >>> a = np.array([None, None], dtype=object)
 |   |      >>> a[0] = np.array(3)
 |   |      >>> a
 |   |      array([array(3), None], dtype=object)
 |   |      >>> a.fill(np.array(3))
 |   |      >>> a
 |   |      array([array(3), array(3)], dtype=object)
 |   |
 |   |      Where other forms of assignments will unpack the array being assigned:
 |   |
 |   |      >>> a[...] = np.array(3)
 |   |      >>> a
 |   |      array([3, 3], dtype=object)
 |   |
 |   |  getfield(...)
 |   |      a.getfield(dtype, offset=0)
 |   |
 |   |      Returns a field of the given array as a certain type.
 |   |
 |   |      A field is a view of the array data with a given data-type. The values in
 |   |      the view are determined by the given type and the offset into the current
 |   |      array in bytes. The offset needs to be such that the view dtype fits in the
 |   |      array dtype; for example an array of dtype complex128 has 16-byte elements.
 |   |      If taking a view with a 32-bit integer (4 bytes), the offset needs to be
 |   |      between 0 and 12 bytes.
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      dtype : str or dtype
 |   |          The data type of the view. The dtype size of the view can not be larger
 |   |          than that of the array itself.
 |   |      offset : int
 |   |          Number of bytes to skip before beginning the element view.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> x = np.diag([1.+1.j]*2)
 |   |      >>> x[1, 1] = 2 + 4.j
 |   |      >>> x
 |   |      array([[1.+1.j,  0.+0.j],
 |   |             [0.+0.j,  2.+4.j]])
 |   |      >>> x.getfield(np.float64)
 |   |      array([[1.,  0.],
 |   |             [0.,  2.]])
 |   |
 |   |      By choosing an offset of 8 bytes we can select the complex part of the
 |   |      array for our view:
 |   |
 |   |      >>> x.getfield(np.float64, offset=8)
 |   |      array([[1.,  0.],
 |   |             [0.,  4.]])
 |   |
 |   |  item(...)
 |   |      a.item(*args)
 |   |
 |   |      Copy an element of an array to a standard Python scalar and return it.
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      \*args : Arguments (variable number and type)
 |   |
 |   |          * none: in this case, the method only works for arrays
 |   |            with one element (`a.size == 1`), which element is
 |   |            copied into a standard Python scalar object and returned.
 |   |
 |   |          * int_type: this argument is interpreted as a flat index into
 |   |            the array, specifying which element to copy and return.
 |   |
 |   |          * tuple of int_types: functions as does a single int_type argument,
 |   |            except that the argument is interpreted as an nd-index into the
 |   |            array.
 |   |
 |   |      Returns
 |   |      -------
 |   |      z : Standard Python scalar object
 |   |          A copy of the specified element of the array as a suitable
 |   |          Python scalar
 |   |
 |   |      Notes
 |   |      -----
 |   |      When the data type of `a` is longdouble or clongdouble, item() returns
 |   |      a scalar array object because there is no available Python scalar that
 |   |      would not lose information. Void arrays return a buffer object for item(),
 |   |      unless fields are defined, in which case a tuple is returned.
 |   |
 |   |      `item` is very similar to a[args], except, instead of an array scalar,
 |   |      a standard Python scalar is returned. This can be useful for speeding up
 |   |      access to elements of the array and doing arithmetic on elements of the
 |   |      array using Python's optimized math.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> np.random.seed(123)
 |   |      >>> x = np.random.randint(9, size=(3, 3))
 |   |      >>> x
 |   |      array([[2, 2, 6],
 |   |             [1, 3, 6],
 |   |             [1, 0, 1]])
 |   |      >>> x.item(3)
 |   |      1
 |   |      >>> x.item(7)
 |   |      0
 |   |      >>> x.item((0, 1))
 |   |      2
 |   |      >>> x.item((2, 2))
 |   |      1
 |   |
 |   |  itemset(...)
 |   |      a.itemset(*args)
 |   |
 |   |      Insert scalar into an array (scalar is cast to array's dtype, if possible)
 |   |
 |   |      There must be at least 1 argument, and define the last argument
 |   |      as *item*.  Then, ``a.itemset(*args)`` is equivalent to but faster
 |   |      than ``a[args] = item``.  The item should be a scalar value and `args`
 |   |      must select a single item in the array `a`.
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      \*args : Arguments
 |   |          If one argument: a scalar, only used in case `a` is of size 1.
 |   |          If two arguments: the last argument is the value to be set
 |   |          and must be a scalar, the first argument specifies a single array
 |   |          element location. It is either an int or a tuple.
 |   |
 |   |      Notes
 |   |      -----
 |   |      Compared to indexing syntax, `itemset` provides some speed increase
 |   |      for placing a scalar into a particular location in an `ndarray`,
 |   |      if you must do this.  However, generally this is discouraged:
 |   |      among other problems, it complicates the appearance of the code.
 |   |      Also, when using `itemset` (and `item`) inside a loop, be sure
 |   |      to assign the methods to a local variable to avoid the attribute
 |   |      look-up at each loop iteration.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> np.random.seed(123)
 |   |      >>> x = np.random.randint(9, size=(3, 3))
 |   |      >>> x
 |   |      array([[2, 2, 6],
 |   |             [1, 3, 6],
 |   |             [1, 0, 1]])
 |   |      >>> x.itemset(4, 0)
 |   |      >>> x.itemset((2, 2), 9)
 |   |      >>> x
 |   |      array([[2, 2, 6],
 |   |             [1, 0, 6],
 |   |             [1, 0, 9]])
 |   |
 |   |  newbyteorder(...)
 |   |      arr.newbyteorder(new_order='S', /)
 |   |
 |   |      Return the array with the same data viewed with a different byte order.
 |   |
 |   |      Equivalent to::
 |   |
 |   |          arr.view(arr.dtype.newbytorder(new_order))
 |   |
 |   |      Changes are also made in all fields and sub-arrays of the array data
 |   |      type.
 |   |
 |   |
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      new_order : string, optional
 |   |          Byte order to force; a value from the byte order specifications
 |   |          below. `new_order` codes can be any of:
 |   |
 |   |          * 'S' - swap dtype from current to opposite endian
 |   |          * {'<', 'little'} - little endian
 |   |          * {'>', 'big'} - big endian
 |   |          * {'=', 'native'} - native order, equivalent to `sys.byteorder`
 |   |          * {'|', 'I'} - ignore (no change to byte order)
 |   |
 |   |          The default value ('S') results in swapping the current
 |   |          byte order.
 |   |
 |   |
 |   |      Returns
 |   |      -------
 |   |      new_arr : array
 |   |          New array object with the dtype reflecting given change to the
 |   |          byte order.
 |   |
 |   |  nonzero(...)
 |   |      a.nonzero()
 |   |
 |   |      Return the indices of the elements that are non-zero.
 |   |
 |   |      Refer to `numpy.nonzero` for full documentation.
 |   |
 |   |      See Also
 |   |      --------
 |   |      numpy.nonzero : equivalent function
 |   |
 |   |  partition(...)
 |   |      a.partition(kth, axis=-1, kind='introselect', order=None)
 |   |
 |   |      Rearranges the elements in the array in such a way that the value of the
 |   |      element in kth position is in the position it would be in a sorted array.
 |   |      All elements smaller than the kth element are moved before this element and
 |   |      all equal or greater are moved behind it. The ordering of the elements in
 |   |      the two partitions is undefined.
 |   |
 |   |      .. versionadded:: 1.8.0
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      kth : int or sequence of ints
 |   |          Element index to partition by. The kth element value will be in its
 |   |          final sorted position and all smaller elements will be moved before it
 |   |          and all equal or greater elements behind it.
 |   |          The order of all elements in the partitions is undefined.
 |   |          If provided with a sequence of kth it will partition all elements
 |   |          indexed by kth of them into their sorted position at once.
 |   |
 |   |          .. deprecated:: 1.22.0
 |   |              Passing booleans as index is deprecated.
 |   |      axis : int, optional
 |   |          Axis along which to sort. Default is -1, which means sort along the
 |   |          last axis.
 |   |      kind : {'introselect'}, optional
 |   |          Selection algorithm. Default is 'introselect'.
 |   |      order : str or list of str, optional
 |   |          When `a` is an array with fields defined, this argument specifies
 |   |          which fields to compare first, second, etc. A single field can
 |   |          be specified as a string, and not all fields need to be specified,
 |   |          but unspecified fields will still be used, in the order in which
 |   |          they come up in the dtype, to break ties.
 |   |
 |   |      See Also
 |   |      --------
 |   |      numpy.partition : Return a partitioned copy of an array.
 |   |      argpartition : Indirect partition.
 |   |      sort : Full sort.
 |   |
 |   |      Notes
 |   |      -----
 |   |      See ``np.partition`` for notes on the different algorithms.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> a = np.array([3, 4, 2, 1])
 |   |      >>> a.partition(3)
 |   |      >>> a
 |   |      array([2, 1, 3, 4])
 |   |
 |   |      >>> a.partition((1, 3))
 |   |      >>> a
 |   |      array([1, 2, 3, 4])
 |   |
 |   |  put(...)
 |   |      a.put(indices, values, mode='raise')
 |   |
 |   |      Set ``a.flat[n] = values[n]`` for all `n` in indices.
 |   |
 |   |      Refer to `numpy.put` for full documentation.
 |   |
 |   |      See Also
 |   |      --------
 |   |      numpy.put : equivalent function
 |   |
 |   |  repeat(...)
 |   |      a.repeat(repeats, axis=None)
 |   |
 |   |      Repeat elements of an array.
 |   |
 |   |      Refer to `numpy.repeat` for full documentation.
 |   |
 |   |      See Also
 |   |      --------
 |   |      numpy.repeat : equivalent function
 |   |
 |   |  reshape(...)
 |   |      a.reshape(shape, order='C')
 |   |
 |   |      Returns an array containing the same data with a new shape.
 |   |
 |   |      Refer to `numpy.reshape` for full documentation.
 |   |
 |   |      See Also
 |   |      --------
 |   |      numpy.reshape : equivalent function
 |   |
 |   |      Notes
 |   |      -----
 |   |      Unlike the free function `numpy.reshape`, this method on `ndarray` allows
 |   |      the elements of the shape parameter to be passed in as separate arguments.
 |   |      For example, ``a.reshape(10, 11)`` is equivalent to
 |   |      ``a.reshape((10, 11))``.
 |   |
 |   |  resize(...)
 |   |      a.resize(new_shape, refcheck=True)
 |   |
 |   |      Change shape and size of array in-place.
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      new_shape : tuple of ints, or `n` ints
 |   |          Shape of resized array.
 |   |      refcheck : bool, optional
 |   |          If False, reference count will not be checked. Default is True.
 |   |
 |   |      Returns
 |   |      -------
 |   |      None
 |   |
 |   |      Raises
 |   |      ------
 |   |      ValueError
 |   |          If `a` does not own its own data or references or views to it exist,
 |   |          and the data memory must be changed.
 |   |          PyPy only: will always raise if the data memory must be changed, since
 |   |          there is no reliable way to determine if references or views to it
 |   |          exist.
 |   |
 |   |      SystemError
 |   |          If the `order` keyword argument is specified. This behaviour is a
 |   |          bug in NumPy.
 |   |
 |   |      See Also
 |   |      --------
 |   |      resize : Return a new array with the specified shape.
 |   |
 |   |      Notes
 |   |      -----
 |   |      This reallocates space for the data area if necessary.
 |   |
 |   |      Only contiguous arrays (data elements consecutive in memory) can be
 |   |      resized.
 |   |
 |   |      The purpose of the reference count check is to make sure you
 |   |      do not use this array as a buffer for another Python object and then
 |   |      reallocate the memory. However, reference counts can increase in
 |   |      other ways so if you are sure that you have not shared the memory
 |   |      for this array with another Python object, then you may safely set
 |   |      `refcheck` to False.
 |   |
 |   |      Examples
 |   |      --------
 |   |      Shrinking an array: array is flattened (in the order that the data are
 |   |      stored in memory), resized, and reshaped:
 |   |
 |   |      >>> a = np.array([[0, 1], [2, 3]], order='C')
 |   |      >>> a.resize((2, 1))
 |   |      >>> a
 |   |      array([[0],
 |   |             [1]])
 |   |
 |   |      >>> a = np.array([[0, 1], [2, 3]], order='F')
 |   |      >>> a.resize((2, 1))
 |   |      >>> a
 |   |      array([[0],
 |   |             [2]])
 |   |
 |   |      Enlarging an array: as above, but missing entries are filled with zeros:
 |   |
 |   |      >>> b = np.array([[0, 1], [2, 3]])
 |   |      >>> b.resize(2, 3) # new_shape parameter doesn't have to be a tuple
 |   |      >>> b
 |   |      array([[0, 1, 2],
 |   |             [3, 0, 0]])
 |   |
 |   |      Referencing an array prevents resizing...
 |   |
 |   |      >>> c = a
 |   |      >>> a.resize((1, 1))
 |   |      Traceback (most recent call last):
 |   |      ...
 |   |      ValueError: cannot resize an array that references or is referenced ...
 |   |
 |   |      Unless `refcheck` is False:
 |   |
 |   |      >>> a.resize((1, 1), refcheck=False)
 |   |      >>> a
 |   |      array([[0]])
 |   |      >>> c
 |   |      array([[0]])
 |   |
 |   |  round(...)
 |   |      a.round(decimals=0, out=None)
 |   |
 |   |      Return `a` with each element rounded to the given number of decimals.
 |   |
 |   |      Refer to `numpy.around` for full documentation.
 |   |
 |   |      See Also
 |   |      --------
 |   |      numpy.around : equivalent function
 |   |
 |   |  searchsorted(...)
 |   |      a.searchsorted(v, side='left', sorter=None)
 |   |
 |   |      Find indices where elements of v should be inserted in a to maintain order.
 |   |
 |   |      For full documentation, see `numpy.searchsorted`
 |   |
 |   |      See Also
 |   |      --------
 |   |      numpy.searchsorted : equivalent function
 |   |
 |   |  setfield(...)
 |   |      a.setfield(val, dtype, offset=0)
 |   |
 |   |      Put a value into a specified place in a field defined by a data-type.
 |   |
 |   |      Place `val` into `a`'s field defined by `dtype` and beginning `offset`
 |   |      bytes into the field.
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      val : object
 |   |          Value to be placed in field.
 |   |      dtype : dtype object
 |   |          Data-type of the field in which to place `val`.
 |   |      offset : int, optional
 |   |          The number of bytes into the field at which to place `val`.
 |   |
 |   |      Returns
 |   |      -------
 |   |      None
 |   |
 |   |      See Also
 |   |      --------
 |   |      getfield
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> x = np.eye(3)
 |   |      >>> x.getfield(np.float64)
 |   |      array([[1.,  0.,  0.],
 |   |             [0.,  1.,  0.],
 |   |             [0.,  0.,  1.]])
 |   |      >>> x.setfield(3, np.int32)
 |   |      >>> x.getfield(np.int32)
 |   |      array([[3, 3, 3],
 |   |             [3, 3, 3],
 |   |             [3, 3, 3]], dtype=int32)
 |   |      >>> x
 |   |      array([[1.0e+000, 1.5e-323, 1.5e-323],
 |   |             [1.5e-323, 1.0e+000, 1.5e-323],
 |   |             [1.5e-323, 1.5e-323, 1.0e+000]])
 |   |      >>> x.setfield(np.eye(3), np.int32)
 |   |      >>> x
 |   |      array([[1.,  0.,  0.],
 |   |             [0.,  1.,  0.],
 |   |             [0.,  0.,  1.]])
 |   |
 |   |  setflags(...)
 |   |      a.setflags(write=None, align=None, uic=None)
 |   |
 |   |      Set array flags WRITEABLE, ALIGNED, WRITEBACKIFCOPY,
 |   |      respectively.
 |   |
 |   |      These Boolean-valued flags affect how numpy interprets the memory
 |   |      area used by `a` (see Notes below). The ALIGNED flag can only
 |   |      be set to True if the data is actually aligned according to the type.
 |   |      The WRITEBACKIFCOPY and flag can never be set
 |   |      to True. The flag WRITEABLE can only be set to True if the array owns its
 |   |      own memory, or the ultimate owner of the memory exposes a writeable buffer
 |   |      interface, or is a string. (The exception for string is made so that
 |   |      unpickling can be done without copying memory.)
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      write : bool, optional
 |   |          Describes whether or not `a` can be written to.
 |   |      align : bool, optional
 |   |          Describes whether or not `a` is aligned properly for its type.
 |   |      uic : bool, optional
 |   |          Describes whether or not `a` is a copy of another "base" array.
 |   |
 |   |      Notes
 |   |      -----
 |   |      Array flags provide information about how the memory area used
 |   |      for the array is to be interpreted. There are 7 Boolean flags
 |   |      in use, only four of which can be changed by the user:
 |   |      WRITEBACKIFCOPY, WRITEABLE, and ALIGNED.
 |   |
 |   |      WRITEABLE (W) the data area can be written to;
 |   |
 |   |      ALIGNED (A) the data and strides are aligned appropriately for the hardware
 |   |      (as determined by the compiler);
 |   |
 |   |      WRITEBACKIFCOPY (X) this array is a copy of some other array (referenced
 |   |      by .base). When the C-API function PyArray_ResolveWritebackIfCopy is
 |   |      called, the base array will be updated with the contents of this array.
 |   |
 |   |      All flags can be accessed using the single (upper case) letter as well
 |   |      as the full name.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> y = np.array([[3, 1, 7],
 |   |      ...               [2, 0, 0],
 |   |      ...               [8, 5, 9]])
 |   |      >>> y
 |   |      array([[3, 1, 7],
 |   |             [2, 0, 0],
 |   |             [8, 5, 9]])
 |   |      >>> y.flags
 |   |        C_CONTIGUOUS : True
 |   |        F_CONTIGUOUS : False
 |   |        OWNDATA : True
 |   |        WRITEABLE : True
 |   |        ALIGNED : True
 |   |        WRITEBACKIFCOPY : False
 |   |      >>> y.setflags(write=0, align=0)
 |   |      >>> y.flags
 |   |        C_CONTIGUOUS : True
 |   |        F_CONTIGUOUS : False
 |   |        OWNDATA : True
 |   |        WRITEABLE : False
 |   |        ALIGNED : False
 |   |        WRITEBACKIFCOPY : False
 |   |      >>> y.setflags(uic=1)
 |   |      Traceback (most recent call last):
 |   |        File "<stdin>", line 1, in <module>
 |   |      ValueError: cannot set WRITEBACKIFCOPY flag to True
 |   |
 |   |  sort(...)
 |   |      a.sort(axis=-1, kind=None, order=None)
 |   |
 |   |      Sort an array in-place. Refer to `numpy.sort` for full documentation.
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      axis : int, optional
 |   |          Axis along which to sort. Default is -1, which means sort along the
 |   |          last axis.
 |   |      kind : {'quicksort', 'mergesort', 'heapsort', 'stable'}, optional
 |   |          Sorting algorithm. The default is 'quicksort'. Note that both 'stable'
 |   |          and 'mergesort' use timsort under the covers and, in general, the
 |   |          actual implementation will vary with datatype. The 'mergesort' option
 |   |          is retained for backwards compatibility.
 |   |
 |   |          .. versionchanged:: 1.15.0
 |   |             The 'stable' option was added.
 |   |
 |   |      order : str or list of str, optional
 |   |          When `a` is an array with fields defined, this argument specifies
 |   |          which fields to compare first, second, etc.  A single field can
 |   |          be specified as a string, and not all fields need be specified,
 |   |          but unspecified fields will still be used, in the order in which
 |   |          they come up in the dtype, to break ties.
 |   |
 |   |      See Also
 |   |      --------
 |   |      numpy.sort : Return a sorted copy of an array.
 |   |      numpy.argsort : Indirect sort.
 |   |      numpy.lexsort : Indirect stable sort on multiple keys.
 |   |      numpy.searchsorted : Find elements in sorted array.
 |   |      numpy.partition: Partial sort.
 |   |
 |   |      Notes
 |   |      -----
 |   |      See `numpy.sort` for notes on the different sorting algorithms.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> a = np.array([[1,4], [3,1]])
 |   |      >>> a.sort(axis=1)
 |   |      >>> a
 |   |      array([[1, 4],
 |   |             [1, 3]])
 |   |      >>> a.sort(axis=0)
 |   |      >>> a
 |   |      array([[1, 3],
 |   |             [1, 4]])
 |   |
 |   |      Use the `order` keyword to specify a field to use when sorting a
 |   |      structured array:
 |   |
 |   |      >>> a = np.array([('a', 2), ('c', 1)], dtype=[('x', 'S1'), ('y', int)])
 |   |      >>> a.sort(order='y')
 |   |      >>> a
 |   |      array([(b'c', 1), (b'a', 2)],
 |   |            dtype=[('x', 'S1'), ('y', '<i8')])
 |   |
 |   |  swapaxes(...)
 |   |      a.swapaxes(axis1, axis2)
 |   |
 |   |      Return a view of the array with `axis1` and `axis2` interchanged.
 |   |
 |   |      Refer to `numpy.swapaxes` for full documentation.
 |   |
 |   |      See Also
 |   |      --------
 |   |      numpy.swapaxes : equivalent function
 |   |
 |   |  take(...)
 |   |      a.take(indices, axis=None, out=None, mode='raise')
 |   |
 |   |      Return an array formed from the elements of `a` at the given indices.
 |   |
 |   |      Refer to `numpy.take` for full documentation.
 |   |
 |   |      See Also
 |   |      --------
 |   |      numpy.take : equivalent function
 |   |
 |   |  tobytes(...)
 |   |      a.tobytes(order='C')
 |   |
 |   |      Construct Python bytes containing the raw data bytes in the array.
 |   |
 |   |      Constructs Python bytes showing a copy of the raw contents of
 |   |      data memory. The bytes object is produced in C-order by default.
 |   |      This behavior is controlled by the ``order`` parameter.
 |   |
 |   |      .. versionadded:: 1.9.0
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      order : {'C', 'F', 'A'}, optional
 |   |          Controls the memory layout of the bytes object. 'C' means C-order,
 |   |          'F' means F-order, 'A' (short for *Any*) means 'F' if `a` is
 |   |          Fortran contiguous, 'C' otherwise. Default is 'C'.
 |   |
 |   |      Returns
 |   |      -------
 |   |      s : bytes
 |   |          Python bytes exhibiting a copy of `a`'s raw data.
 |   |
 |   |      See also
 |   |      --------
 |   |      frombuffer
 |   |          Inverse of this operation, construct a 1-dimensional array from Python
 |   |          bytes.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> x = np.array([[0, 1], [2, 3]], dtype='<u2')
 |   |      >>> x.tobytes()
 |   |      b'\x00\x00\x01\x00\x02\x00\x03\x00'
 |   |      >>> x.tobytes('C') == x.tobytes()
 |   |      True
 |   |      >>> x.tobytes('F')
 |   |      b'\x00\x00\x02\x00\x01\x00\x03\x00'
 |   |
 |   |  tofile(...)
 |   |      a.tofile(fid, sep="", format="%s")
 |   |
 |   |      Write array to a file as text or binary (default).
 |   |
 |   |      Data is always written in 'C' order, independent of the order of `a`.
 |   |      The data produced by this method can be recovered using the function
 |   |      fromfile().
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      fid : file or str or Path
 |   |          An open file object, or a string containing a filename.
 |   |
 |   |          .. versionchanged:: 1.17.0
 |   |              `pathlib.Path` objects are now accepted.
 |   |
 |   |      sep : str
 |   |          Separator between array items for text output.
 |   |          If "" (empty), a binary file is written, equivalent to
 |   |          ``file.write(a.tobytes())``.
 |   |      format : str
 |   |          Format string for text file output.
 |   |          Each entry in the array is formatted to text by first converting
 |   |          it to the closest Python type, and then using "format" % item.
 |   |
 |   |      Notes
 |   |      -----
 |   |      This is a convenience function for quick storage of array data.
 |   |      Information on endianness and precision is lost, so this method is not a
 |   |      good choice for files intended to archive data or transport data between
 |   |      machines with different endianness. Some of these problems can be overcome
 |   |      by outputting the data as text files, at the expense of speed and file
 |   |      size.
 |   |
 |   |      When fid is a file object, array contents are directly written to the
 |   |      file, bypassing the file object's ``write`` method. As a result, tofile
 |   |      cannot be used with files objects supporting compression (e.g., GzipFile)
 |   |      or file-like objects that do not support ``fileno()`` (e.g., BytesIO).
 |   |
 |   |  tostring(...)
 |   |      a.tostring(order='C')
 |   |
 |   |      A compatibility alias for `tobytes`, with exactly the same behavior.
 |   |
 |   |      Despite its name, it returns `bytes` not `str`\ s.
 |   |
 |   |      .. deprecated:: 1.19.0
 |   |
 |   |  trace(...)
 |   |      a.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)
 |   |
 |   |      Return the sum along diagonals of the array.
 |   |
 |   |      Refer to `numpy.trace` for full documentation.
 |   |
 |   |      See Also
 |   |      --------
 |   |      numpy.trace : equivalent function
 |   |
 |   |  transpose(...)
 |   |      a.transpose(*axes)
 |   |
 |   |      Returns a view of the array with axes transposed.
 |   |
 |   |      Refer to `numpy.transpose` for full documentation.
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      axes : None, tuple of ints, or `n` ints
 |   |
 |   |       * None or no argument: reverses the order of the axes.
 |   |
 |   |       * tuple of ints: `i` in the `j`-th place in the tuple means that the
 |   |         array's `i`-th axis becomes the transposed array's `j`-th axis.
 |   |
 |   |       * `n` ints: same as an n-tuple of the same ints (this form is
 |   |         intended simply as a "convenience" alternative to the tuple form).
 |   |
 |   |      Returns
 |   |      -------
 |   |      p : ndarray
 |   |          View of the array with its axes suitably permuted.
 |   |
 |   |      See Also
 |   |      --------
 |   |      transpose : Equivalent function.
 |   |      ndarray.T : Array property returning the array transposed.
 |   |      ndarray.reshape : Give a new shape to an array without changing its data.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> a = np.array([[1, 2], [3, 4]])
 |   |      >>> a
 |   |      array([[1, 2],
 |   |             [3, 4]])
 |   |      >>> a.transpose()
 |   |      array([[1, 3],
 |   |             [2, 4]])
 |   |      >>> a.transpose((1, 0))
 |   |      array([[1, 3],
 |   |             [2, 4]])
 |   |      >>> a.transpose(1, 0)
 |   |      array([[1, 3],
 |   |             [2, 4]])
 |   |
 |   |      >>> a = np.array([1, 2, 3, 4])
 |   |      >>> a
 |   |      array([1, 2, 3, 4])
 |   |      >>> a.transpose()
 |   |      array([1, 2, 3, 4])
 |   |
 |   |  view(...)
 |   |      a.view([dtype][, type])
 |   |
 |   |      New view of array with the same data.
 |   |
 |   |      .. note::
 |   |          Passing None for ``dtype`` is different from omitting the parameter,
 |   |          since the former invokes ``dtype(None)`` which is an alias for
 |   |          ``dtype('float_')``.
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      dtype : data-type or ndarray sub-class, optional
 |   |          Data-type descriptor of the returned view, e.g., float32 or int16.
 |   |          Omitting it results in the view having the same data-type as `a`.
 |   |          This argument can also be specified as an ndarray sub-class, which
 |   |          then specifies the type of the returned object (this is equivalent to
 |   |          setting the ``type`` parameter).
 |   |      type : Python type, optional
 |   |          Type of the returned view, e.g., ndarray or matrix.  Again, omission
 |   |          of the parameter results in type preservation.
 |   |
 |   |      Notes
 |   |      -----
 |   |      ``a.view()`` is used two different ways:
 |   |
 |   |      ``a.view(some_dtype)`` or ``a.view(dtype=some_dtype)`` constructs a view
 |   |      of the array's memory with a different data-type.  This can cause a
 |   |      reinterpretation of the bytes of memory.
 |   |
 |   |      ``a.view(ndarray_subclass)`` or ``a.view(type=ndarray_subclass)`` just
 |   |      returns an instance of `ndarray_subclass` that looks at the same array
 |   |      (same shape, dtype, etc.)  This does not cause a reinterpretation of the
 |   |      memory.
 |   |
 |   |      For ``a.view(some_dtype)``, if ``some_dtype`` has a different number of
 |   |      bytes per entry than the previous dtype (for example, converting a regular
 |   |      array to a structured array), then the last axis of ``a`` must be
 |   |      contiguous. This axis will be resized in the result.
 |   |
 |   |      .. versionchanged:: 1.23.0
 |   |         Only the last axis needs to be contiguous. Previously, the entire array
 |   |         had to be C-contiguous.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> x = np.array([(1, 2)], dtype=[('a', np.int8), ('b', np.int8)])
 |   |
 |   |      Viewing array data using a different type and dtype:
 |   |
 |   |      >>> y = x.view(dtype=np.int16, type=np.matrix)
 |   |      >>> y
 |   |      matrix([[513]], dtype=int16)
 |   |      >>> print(type(y))
 |   |      <class 'numpy.matrix'>
 |   |
 |   |      Creating a view on a structured array so it can be used in calculations
 |   |
 |   |      >>> x = np.array([(1, 2),(3,4)], dtype=[('a', np.int8), ('b', np.int8)])
 |   |      >>> xv = x.view(dtype=np.int8).reshape(-1,2)
 |   |      >>> xv
 |   |      array([[1, 2],
 |   |             [3, 4]], dtype=int8)
 |   |      >>> xv.mean(0)
 |   |      array([2.,  3.])
 |   |
 |   |      Making changes to the view changes the underlying array
 |   |
 |   |      >>> xv[0,1] = 20
 |   |      >>> x
 |   |      array([(1, 20), (3,  4)], dtype=[('a', 'i1'), ('b', 'i1')])
 |   |
 |   |      Using a view to convert an array to a recarray:
 |   |
 |   |      >>> z = x.view(np.recarray)
 |   |      >>> z.a
 |   |      array([1, 3], dtype=int8)
 |   |
 |   |      Views share data:
 |   |
 |   |      >>> x[0] = (9, 10)
 |   |      >>> z[0]
 |   |      (9, 10)
 |   |
 |   |      Views that change the dtype size (bytes per entry) should normally be
 |   |      avoided on arrays defined by slices, transposes, fortran-ordering, etc.:
 |   |
 |   |      >>> x = np.array([[1, 2, 3], [4, 5, 6]], dtype=np.int16)
 |   |      >>> y = x[:, ::2]
 |   |      >>> y
 |   |      array([[1, 3],
 |   |             [4, 6]], dtype=int16)
 |   |      >>> y.view(dtype=[('width', np.int16), ('length', np.int16)])
 |   |      Traceback (most recent call last):
 |   |          ...
 |   |      ValueError: To change to a dtype of a different size, the last axis must be contiguous
 |   |      >>> z = y.copy()
 |   |      >>> z.view(dtype=[('width', np.int16), ('length', np.int16)])
 |   |      array([[(1, 3)],
 |   |             [(4, 6)]], dtype=[('width', '<i2'), ('length', '<i2')])
 |   |
 |   |      However, views that change dtype are totally fine for arrays with a
 |   |      contiguous last axis, even if the rest of the axes are not C-contiguous:
 |   |
 |   |      >>> x = np.arange(2 * 3 * 4, dtype=np.int8).reshape(2, 3, 4)
 |   |      >>> x.transpose(1, 0, 2).view(np.int16)
 |   |      array([[[ 256,  770],
 |   |              [3340, 3854]],
 |   |      <BLANKLINE>
 |   |             [[1284, 1798],
 |   |              [4368, 4882]],
 |   |      <BLANKLINE>
 |   |             [[2312, 2826],
 |   |              [5396, 5910]]], dtype=int16)
 |   |
 |   |  ----------------------------------------------------------------------
 |   |  Class methods inherited from ndarray:
 |   |
 |   |  __class_getitem__(...) from builtins.type
 |   |      a.__class_getitem__(item, /)
 |   |
 |   |      Return a parametrized wrapper around the `~numpy.ndarray` type.
 |   |
 |   |      .. versionadded:: 1.22
 |   |
 |   |      Returns
 |   |      -------
 |   |      alias : types.GenericAlias
 |   |          A parametrized `~numpy.ndarray` type.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> from typing import Any
 |   |      >>> import numpy as np
 |   |
 |   |      >>> np.ndarray[Any, np.dtype[Any]]
 |   |      numpy.ndarray[typing.Any, numpy.dtype[typing.Any]]
 |   |
 |   |      See Also
 |   |      --------
 |   |      :pep:`585` : Type hinting generics in standard collections.
 |   |      numpy.typing.NDArray : An ndarray alias :term:`generic <generic type>`
 |   |                          w.r.t. its `dtype.type <numpy.dtype.type>`.
 |   |
 |   |  ----------------------------------------------------------------------
 |   |  Data descriptors inherited from ndarray:
 |   |
 |   |  __array_interface__
 |   |      Array protocol: Python side.
 |   |
 |   |  __array_struct__
 |   |      Array protocol: C-struct side.
 |   |
 |   |  base
 |   |      Base object if memory is from some other object.
 |   |
 |   |      Examples
 |   |      --------
 |   |      The base of an array that owns its memory is None:
 |   |
 |   |      >>> x = np.array([1,2,3,4])
 |   |      >>> x.base is None
 |   |      True
 |   |
 |   |      Slicing creates a view, whose memory is shared with x:
 |   |
 |   |      >>> y = x[2:]
 |   |      >>> y.base is x
 |   |      True
 |   |
 |   |  ctypes
 |   |      An object to simplify the interaction of the array with the ctypes
 |   |      module.
 |   |
 |   |      This attribute creates an object that makes it easier to use arrays
 |   |      when calling shared libraries with the ctypes module. The returned
 |   |      object has, among others, data, shape, and strides attributes (see
 |   |      Notes below) which themselves return ctypes objects that can be used
 |   |      as arguments to a shared library.
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      None
 |   |
 |   |      Returns
 |   |      -------
 |   |      c : Python object
 |   |          Possessing attributes data, shape, strides, etc.
 |   |
 |   |      See Also
 |   |      --------
 |   |      numpy.ctypeslib
 |   |
 |   |      Notes
 |   |      -----
 |   |      Below are the public attributes of this object which were documented
 |   |      in "Guide to NumPy" (we have omitted undocumented public attributes,
 |   |      as well as documented private attributes):
 |   |
 |   |      .. autoattribute:: numpy.core._internal._ctypes.data
 |   |          :noindex:
 |   |
 |   |      .. autoattribute:: numpy.core._internal._ctypes.shape
 |   |          :noindex:
 |   |
 |   |      .. autoattribute:: numpy.core._internal._ctypes.strides
 |   |          :noindex:
 |   |
 |   |      .. automethod:: numpy.core._internal._ctypes.data_as
 |   |          :noindex:
 |   |
 |   |      .. automethod:: numpy.core._internal._ctypes.shape_as
 |   |          :noindex:
 |   |
 |   |      .. automethod:: numpy.core._internal._ctypes.strides_as
 |   |          :noindex:
 |   |
 |   |      If the ctypes module is not available, then the ctypes attribute
 |   |      of array objects still returns something useful, but ctypes objects
 |   |      are not returned and errors may be raised instead. In particular,
 |   |      the object will still have the ``as_parameter`` attribute which will
 |   |      return an integer equal to the data attribute.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> import ctypes
 |   |      >>> x = np.array([[0, 1], [2, 3]], dtype=np.int32)
 |   |      >>> x
 |   |      array([[0, 1],
 |   |             [2, 3]], dtype=int32)
 |   |      >>> x.ctypes.data
 |   |      31962608 # may vary
 |   |      >>> x.ctypes.data_as(ctypes.POINTER(ctypes.c_uint32))
 |   |      <__main__.LP_c_uint object at 0x7ff2fc1fc200> # may vary
 |   |      >>> x.ctypes.data_as(ctypes.POINTER(ctypes.c_uint32)).contents
 |   |      c_uint(0)
 |   |      >>> x.ctypes.data_as(ctypes.POINTER(ctypes.c_uint64)).contents
 |   |      c_ulong(4294967296)
 |   |      >>> x.ctypes.shape
 |   |      <numpy.core._internal.c_long_Array_2 object at 0x7ff2fc1fce60> # may vary
 |   |      >>> x.ctypes.strides
 |   |      <numpy.core._internal.c_long_Array_2 object at 0x7ff2fc1ff320> # may vary
 |   |
 |   |  data
 |   |      Python buffer object pointing to the start of the array's data.
 |   |
 |   |  dtype
 |   |      Data-type of the array's elements.
 |   |
 |   |      .. warning::
 |   |
 |   |          Setting ``arr.dtype`` is discouraged and may be deprecated in the
 |   |          future.  Setting will replace the ``dtype`` without modifying the
 |   |          memory (see also `ndarray.view` and `ndarray.astype`).
 |   |
 |   |      Parameters
 |   |      ----------
 |   |      None
 |   |
 |   |      Returns
 |   |      -------
 |   |      d : numpy dtype object
 |   |
 |   |      See Also
 |   |      --------
 |   |      ndarray.astype : Cast the values contained in the array to a new data-type.
 |   |      ndarray.view : Create a view of the same data but a different data-type.
 |   |      numpy.dtype
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> x
 |   |      array([[0, 1],
 |   |             [2, 3]])
 |   |      >>> x.dtype
 |   |      dtype('int32')
 |   |      >>> type(x.dtype)
 |   |      <type 'numpy.dtype'>
 |   |
 |   |  flags
 |   |      Information about the memory layout of the array.
 |   |
 |   |      Attributes
 |   |      ----------
 |   |      C_CONTIGUOUS (C)
 |   |          The data is in a single, C-style contiguous segment.
 |   |      F_CONTIGUOUS (F)
 |   |          The data is in a single, Fortran-style contiguous segment.
 |   |      OWNDATA (O)
 |   |          The array owns the memory it uses or borrows it from another object.
 |   |      WRITEABLE (W)
 |   |          The data area can be written to.  Setting this to False locks
 |   |          the data, making it read-only.  A view (slice, etc.) inherits WRITEABLE
 |   |          from its base array at creation time, but a view of a writeable
 |   |          array may be subsequently locked while the base array remains writeable.
 |   |          (The opposite is not true, in that a view of a locked array may not
 |   |          be made writeable.  However, currently, locking a base object does not
 |   |          lock any views that already reference it, so under that circumstance it
 |   |          is possible to alter the contents of a locked array via a previously
 |   |          created writeable view onto it.)  Attempting to change a non-writeable
 |   |          array raises a RuntimeError exception.
 |   |      ALIGNED (A)
 |   |          The data and all elements are aligned appropriately for the hardware.
 |   |      WRITEBACKIFCOPY (X)
 |   |          This array is a copy of some other array. The C-API function
 |   |          PyArray_ResolveWritebackIfCopy must be called before deallocating
 |   |          to the base array will be updated with the contents of this array.
 |   |      FNC
 |   |          F_CONTIGUOUS and not C_CONTIGUOUS.
 |   |      FORC
 |   |          F_CONTIGUOUS or C_CONTIGUOUS (one-segment test).
 |   |      BEHAVED (B)
 |   |          ALIGNED and WRITEABLE.
 |   |      CARRAY (CA)
 |   |          BEHAVED and C_CONTIGUOUS.
 |   |      FARRAY (FA)
 |   |          BEHAVED and F_CONTIGUOUS and not C_CONTIGUOUS.
 |   |
 |   |      Notes
 |   |      -----
 |   |      The `flags` object can be accessed dictionary-like (as in ``a.flags['WRITEABLE']``),
 |   |      or by using lowercased attribute names (as in ``a.flags.writeable``). Short flag
 |   |      names are only supported in dictionary access.
 |   |
 |   |      Only the WRITEBACKIFCOPY, WRITEABLE, and ALIGNED flags can be
 |   |      changed by the user, via direct assignment to the attribute or dictionary
 |   |      entry, or by calling `ndarray.setflags`.
 |   |
 |   |      The array flags cannot be set arbitrarily:
 |   |
 |   |      - WRITEBACKIFCOPY can only be set ``False``.
 |   |      - ALIGNED can only be set ``True`` if the data is truly aligned.
 |   |      - WRITEABLE can only be set ``True`` if the array owns its own memory
 |   |        or the ultimate owner of the memory exposes a writeable buffer
 |   |        interface or is a string.
 |   |
 |   |      Arrays can be both C-style and Fortran-style contiguous simultaneously.
 |   |      This is clear for 1-dimensional arrays, but can also be true for higher
 |   |      dimensional arrays.
 |   |
 |   |      Even for contiguous arrays a stride for a given dimension
 |   |      ``arr.strides[dim]`` may be *arbitrary* if ``arr.shape[dim] == 1``
 |   |      or the array has no elements.
 |   |      It does *not* generally hold that ``self.strides[-1] == self.itemsize``
 |   |      for C-style contiguous arrays or ``self.strides[0] == self.itemsize`` for
 |   |      Fortran-style contiguous arrays is true.
 |   |
 |   |  flat
 |   |      A 1-D iterator over the array.
 |   |
 |   |      This is a `numpy.flatiter` instance, which acts similarly to, but is not
 |   |      a subclass of, Python's built-in iterator object.
 |   |
 |   |      See Also
 |   |      --------
 |   |      flatten : Return a copy of the array collapsed into one dimension.
 |   |
 |   |      flatiter
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> x = np.arange(1, 7).reshape(2, 3)
 |   |      >>> x
 |   |      array([[1, 2, 3],
 |   |             [4, 5, 6]])
 |   |      >>> x.flat[3]
 |   |      4
 |   |      >>> x.T
 |   |      array([[1, 4],
 |   |             [2, 5],
 |   |             [3, 6]])
 |   |      >>> x.T.flat[3]
 |   |      5
 |   |      >>> type(x.flat)
 |   |      <class 'numpy.flatiter'>
 |   |
 |   |      An assignment example:
 |   |
 |   |      >>> x.flat = 3; x
 |   |      array([[3, 3, 3],
 |   |             [3, 3, 3]])
 |   |      >>> x.flat[[1,4]] = 1; x
 |   |      array([[3, 1, 3],
 |   |             [3, 1, 3]])
 |   |
 |   |  imag
 |   |      The imaginary part of the array.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> x = np.sqrt([1+0j, 0+1j])
 |   |      >>> x.imag
 |   |      array([ 0.        ,  0.70710678])
 |   |      >>> x.imag.dtype
 |   |      dtype('float64')
 |   |
 |   |  itemsize
 |   |      Length of one array element in bytes.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> x = np.array([1,2,3], dtype=np.float64)
 |   |      >>> x.itemsize
 |   |      8
 |   |      >>> x = np.array([1,2,3], dtype=np.complex128)
 |   |      >>> x.itemsize
 |   |      16
 |   |
 |   |  nbytes
 |   |      Total bytes consumed by the elements of the array.
 |   |
 |   |      Notes
 |   |      -----
 |   |      Does not include memory consumed by non-element attributes of the
 |   |      array object.
 |   |
 |   |      See Also
 |   |      --------
 |   |      sys.getsizeof
 |   |          Memory consumed by the object itself without parents in case view.
 |   |          This does include memory consumed by non-element attributes.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> x = np.zeros((3,5,2), dtype=np.complex128)
 |   |      >>> x.nbytes
 |   |      480
 |   |      >>> np.prod(x.shape) * x.itemsize
 |   |      480
 |   |
 |   |  ndim
 |   |      Number of array dimensions.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> x = np.array([1, 2, 3])
 |   |      >>> x.ndim
 |   |      1
 |   |      >>> y = np.zeros((2, 3, 4))
 |   |      >>> y.ndim
 |   |      3
 |   |
 |   |  real
 |   |      The real part of the array.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> x = np.sqrt([1+0j, 0+1j])
 |   |      >>> x.real
 |   |      array([ 1.        ,  0.70710678])
 |   |      >>> x.real.dtype
 |   |      dtype('float64')
 |   |
 |   |      See Also
 |   |      --------
 |   |      numpy.real : equivalent function
 |   |
 |   |  shape
 |   |      Tuple of array dimensions.
 |   |
 |   |      The shape property is usually used to get the current shape of an array,
 |   |      but may also be used to reshape the array in-place by assigning a tuple of
 |   |      array dimensions to it.  As with `numpy.reshape`, one of the new shape
 |   |      dimensions can be -1, in which case its value is inferred from the size of
 |   |      the array and the remaining dimensions. Reshaping an array in-place will
 |   |      fail if a copy is required.
 |   |
 |   |      .. warning::
 |   |
 |   |          Setting ``arr.shape`` is discouraged and may be deprecated in the
 |   |          future.  Using `ndarray.reshape` is the preferred approach.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> x = np.array([1, 2, 3, 4])
 |   |      >>> x.shape
 |   |      (4,)
 |   |      >>> y = np.zeros((2, 3, 4))
 |   |      >>> y.shape
 |   |      (2, 3, 4)
 |   |      >>> y.shape = (3, 8)
 |   |      >>> y
 |   |      array([[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
 |   |             [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
 |   |             [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]])
 |   |      >>> y.shape = (3, 6)
 |   |      Traceback (most recent call last):
 |   |        File "<stdin>", line 1, in <module>
 |   |      ValueError: total size of new array must be unchanged
 |   |      >>> np.zeros((4,2))[::2].shape = (-1,)
 |   |      Traceback (most recent call last):
 |   |        File "<stdin>", line 1, in <module>
 |   |      AttributeError: Incompatible shape for in-place modification. Use
 |   |      `.reshape()` to make a copy with the desired shape.
 |   |
 |   |      See Also
 |   |      --------
 |   |      numpy.shape : Equivalent getter function.
 |   |      numpy.reshape : Function similar to setting ``shape``.
 |   |      ndarray.reshape : Method similar to setting ``shape``.
 |   |
 |   |  size
 |   |      Number of elements in the array.
 |   |
 |   |      Equal to ``np.prod(a.shape)``, i.e., the product of the array's
 |   |      dimensions.
 |   |
 |   |      Notes
 |   |      -----
 |   |      `a.size` returns a standard arbitrary precision Python integer. This
 |   |      may not be the case with other methods of obtaining the same value
 |   |      (like the suggested ``np.prod(a.shape)``, which returns an instance
 |   |      of ``np.int_``), and may be relevant if the value is used further in
 |   |      calculations that may overflow a fixed size integer type.
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> x = np.zeros((3, 5, 2), dtype=np.complex128)
 |   |      >>> x.size
 |   |      30
 |   |      >>> np.prod(x.shape)
 |   |      30
 |   |
 |   |  strides
 |   |      Tuple of bytes to step in each dimension when traversing an array.
 |   |
 |   |      The byte offset of element ``(i[0], i[1], ..., i[n])`` in an array `a`
 |   |      is::
 |   |
 |   |          offset = sum(np.array(i) * a.strides)
 |   |
 |   |      A more detailed explanation of strides can be found in the
 |   |      "ndarray.rst" file in the NumPy reference guide.
 |   |
 |   |      .. warning::
 |   |
 |   |          Setting ``arr.strides`` is discouraged and may be deprecated in the
 |   |          future.  `numpy.lib.stride_tricks.as_strided` should be preferred
 |   |          to create a new view of the same data in a safer way.
 |   |
 |   |      Notes
 |   |      -----
 |   |      Imagine an array of 32-bit integers (each 4 bytes)::
 |   |
 |   |        x = np.array([[0, 1, 2, 3, 4],
 |   |                      [5, 6, 7, 8, 9]], dtype=np.int32)
 |   |
 |   |      This array is stored in memory as 40 bytes, one after the other
 |   |      (known as a contiguous block of memory).  The strides of an array tell
 |   |      us how many bytes we have to skip in memory to move to the next position
 |   |      along a certain axis.  For example, we have to skip 4 bytes (1 value) to
 |   |      move to the next column, but 20 bytes (5 values) to get to the same
 |   |      position in the next row.  As such, the strides for the array `x` will be
 |   |      ``(20, 4)``.
 |   |
 |   |      See Also
 |   |      --------
 |   |      numpy.lib.stride_tricks.as_strided
 |   |
 |   |      Examples
 |   |      --------
 |   |      >>> y = np.reshape(np.arange(2*3*4), (2,3,4))
 |   |      >>> y
 |   |      array([[[ 0,  1,  2,  3],
 |   |              [ 4,  5,  6,  7],
 |   |              [ 8,  9, 10, 11]],
 |   |             [[12, 13, 14, 15],
 |   |              [16, 17, 18, 19],
 |   |              [20, 21, 22, 23]]])
 |   |      >>> y.strides
 |   |      (48, 16, 4)
 |   |      >>> y[1,1,1]
 |   |      17
 |   |      >>> offset=sum(y.strides * np.array((1,1,1)))
 |   |      >>> offset/y.itemsize
 |   |      17
 |   |
 |   |      >>> x = np.reshape(np.arange(5*6*7*8), (5,6,7,8)).transpose(2,3,1,0)
 |   |      >>> x.strides
 |   |      (32, 4, 224, 1344)
 |   |      >>> i = np.array([3,5,2,2])
 |   |      >>> offset = sum(i * x.strides)
 |   |      >>> x[3,5,2,2]
 |   |      813
 |   |      >>> offset / x.itemsize
 |   |      813
 |   |
 |   |  ----------------------------------------------------------------------
 |   |  Data and other attributes inherited from ndarray:
 |   |
 |   |  __hash__ = None
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AxisConcatenator:
 |
 |  __dict__
 |      dictionary for instance variables
 |
 |  __weakref__
 |      list of weak references to the object

None
Help on module numpy.core.defchararray in numpy.core:

NAME
    numpy.core.defchararray

DESCRIPTION
    This module contains a set of functions for vectorized string
    operations and methods.

    .. note::
       The `chararray` class exists for backwards compatibility with
       Numarray, it is not recommended for new development. Starting from numpy
       1.4, if one needs arrays of strings, it is recommended to use arrays of
       `dtype` `object_`, `bytes_` or `str_`, and use the free functions
       in the `numpy.char` module for fast vectorized string operations.

    Some methods will only be available if the corresponding string method is
    available in your version of Python.

    The preferred alias for `defchararray` is `numpy.char`.

FUNCTIONS
    add(x1, x2)
        Return element-wise string concatenation for two arrays of str or unicode.

        Arrays `x1` and `x2` must have the same shape.

        Parameters
        ----------
        x1 : array_like of str or unicode
            Input array.
        x2 : array_like of str or unicode
            Input array.

        Returns
        -------
        add : ndarray
            Output array of `bytes_` or `str_`, depending on input types
            of the same shape as `x1` and `x2`.

    array(obj, itemsize=None, copy=True, unicode=None, order=None)
        Create a `chararray`.

        .. note::
           This class is provided for numarray backward-compatibility.
           New code (not concerned with numarray compatibility) should use
           arrays of type `bytes_` or `str_` and use the free functions
           in :mod:`numpy.char <numpy.core.defchararray>` for fast
           vectorized string operations instead.

        Versus a regular NumPy array of type `str` or `unicode`, this
        class adds the following functionality:

          1) values automatically have whitespace removed from the end
             when indexed

          2) comparison operators automatically remove whitespace from the
             end when comparing values

          3) vectorized string operations are provided as methods
             (e.g. `str.endswith`) and infix operators (e.g. ``+, *, %``)

        Parameters
        ----------
        obj : array of str or unicode-like

        itemsize : int, optional
            `itemsize` is the number of characters per scalar in the
            resulting array.  If `itemsize` is None, and `obj` is an
            object array or a Python list, the `itemsize` will be
            automatically determined.  If `itemsize` is provided and `obj`
            is of type str or unicode, then the `obj` string will be
            chunked into `itemsize` pieces.

        copy : bool, optional
            If true (default), then the object is copied.  Otherwise, a copy
            will only be made if __array__ returns a copy, if obj is a
            nested sequence, or if a copy is needed to satisfy any of the other
            requirements (`itemsize`, unicode, `order`, etc.).

        unicode : bool, optional
            When true, the resulting `chararray` can contain Unicode
            characters, when false only 8-bit characters.  If unicode is
            None and `obj` is one of the following:

              - a `chararray`,
              - an ndarray of type `str` or `unicode`
              - a Python str or unicode object,

            then the unicode setting of the output array will be
            automatically determined.

        order : {'C', 'F', 'A'}, optional
            Specify the order of the array.  If order is 'C' (default), then the
            array will be in C-contiguous order (last-index varies the
            fastest).  If order is 'F', then the returned array
            will be in Fortran-contiguous order (first-index varies the
            fastest).  If order is 'A', then the returned array may
            be in any order (either C-, Fortran-contiguous, or even
            discontiguous).

    asarray(obj, itemsize=None, unicode=None, order=None)
        Convert the input to a `chararray`, copying the data only if
        necessary.

        Versus a regular NumPy array of type `str` or `unicode`, this
        class adds the following functionality:

          1) values automatically have whitespace removed from the end
             when indexed

          2) comparison operators automatically remove whitespace from the
             end when comparing values

          3) vectorized string operations are provided as methods
             (e.g. `str.endswith`) and infix operators (e.g. ``+``, ``*``,``%``)

        Parameters
        ----------
        obj : array of str or unicode-like

        itemsize : int, optional
            `itemsize` is the number of characters per scalar in the
            resulting array.  If `itemsize` is None, and `obj` is an
            object array or a Python list, the `itemsize` will be
            automatically determined.  If `itemsize` is provided and `obj`
            is of type str or unicode, then the `obj` string will be
            chunked into `itemsize` pieces.

        unicode : bool, optional
            When true, the resulting `chararray` can contain Unicode
            characters, when false only 8-bit characters.  If unicode is
            None and `obj` is one of the following:

              - a `chararray`,
              - an ndarray of type `str` or 'unicode`
              - a Python str or unicode object,

            then the unicode setting of the output array will be
            automatically determined.

        order : {'C', 'F'}, optional
            Specify the order of the array.  If order is 'C' (default), then the
            array will be in C-contiguous order (last-index varies the
            fastest).  If order is 'F', then the returned array
            will be in Fortran-contiguous order (first-index varies the
            fastest).

    capitalize(a)
        Return a copy of `a` with only the first character of each element
        capitalized.

        Calls `str.capitalize` element-wise.

        For 8-bit strings, this method is locale-dependent.

        Parameters
        ----------
        a : array_like of str or unicode
            Input array of strings to capitalize.

        Returns
        -------
        out : ndarray
            Output array of str or unicode, depending on input
            types

        See Also
        --------
        str.capitalize

        Examples
        --------
        >>> c = np.array(['a1b2','1b2a','b2a1','2a1b'],'S4'); c
        array(['a1b2', '1b2a', 'b2a1', '2a1b'],
            dtype='|S4')
        >>> np.char.capitalize(c)
        array(['A1b2', '1b2a', 'B2a1', '2a1b'],
            dtype='|S4')

    center(a, width, fillchar=' ')
        Return a copy of `a` with its elements centered in a string of
        length `width`.

        Calls `str.center` element-wise.

        Parameters
        ----------
        a : array_like of str or unicode

        width : int
            The length of the resulting strings
        fillchar : str or unicode, optional
            The padding character to use (default is space).

        Returns
        -------
        out : ndarray
            Output array of str or unicode, depending on input
            types

        See Also
        --------
        str.center

        Notes
        -----
        This function is intended to work with arrays of strings.  The
        fill character is not applied to numeric types.

        Examples
        --------
        >>> c = np.array(['a1b2','1b2a','b2a1','2a1b']); c
        array(['a1b2', '1b2a', 'b2a1', '2a1b'], dtype='<U4')
        >>> np.char.center(c, width=9)
        array(['   a1b2  ', '   1b2a  ', '   b2a1  ', '   2a1b  '], dtype='<U9')
        >>> np.char.center(c, width=9, fillchar='*')
        array(['***a1b2**', '***1b2a**', '***b2a1**', '***2a1b**'], dtype='<U9')
        >>> np.char.center(c, width=1)
        array(['a', '1', 'b', '2'], dtype='<U1')

    count(a, sub, start=0, end=None)
        Returns an array with the number of non-overlapping occurrences of
        substring `sub` in the range [`start`, `end`].

        Calls `str.count` element-wise.

        Parameters
        ----------
        a : array_like of str or unicode

        sub : str or unicode
           The substring to search for.

        start, end : int, optional
           Optional arguments `start` and `end` are interpreted as slice
           notation to specify the range in which to count.

        Returns
        -------
        out : ndarray
            Output array of ints.

        See Also
        --------
        str.count

        Examples
        --------
        >>> c = np.array(['aAaAaA', '  aA  ', 'abBABba'])
        >>> c
        array(['aAaAaA', '  aA  ', 'abBABba'], dtype='<U7')
        >>> np.char.count(c, 'A')
        array([3, 1, 1])
        >>> np.char.count(c, 'aA')
        array([3, 1, 0])
        >>> np.char.count(c, 'A', start=1, end=4)
        array([2, 1, 1])
        >>> np.char.count(c, 'A', start=1, end=3)
        array([1, 0, 0])

    decode(a, encoding=None, errors=None)
        Calls ``bytes.decode`` element-wise.

        The set of available codecs comes from the Python standard library,
        and may be extended at runtime.  For more information, see the
        :mod:`codecs` module.

        Parameters
        ----------
        a : array_like of str or unicode

        encoding : str, optional
           The name of an encoding

        errors : str, optional
           Specifies how to handle encoding errors

        Returns
        -------
        out : ndarray

        See Also
        --------
        :py:meth:`bytes.decode`

        Notes
        -----
        The type of the result will depend on the encoding specified.

        Examples
        --------
        >>> c = np.array([b'\x81\xc1\x81\xc1\x81\xc1', b'@@\x81\xc1@@',
        ...               b'\x81\x82\xc2\xc1\xc2\x82\x81'])
        >>> c
        array([b'\x81\xc1\x81\xc1\x81\xc1', b'@@\x81\xc1@@',
        ...    b'\x81\x82\xc2\xc1\xc2\x82\x81'], dtype='|S7')
        >>> np.char.decode(c, encoding='cp037')
        array(['aAaAaA', '  aA  ', 'abBABba'], dtype='<U7')

    encode(a, encoding=None, errors=None)
        Calls `str.encode` element-wise.

        The set of available codecs comes from the Python standard library,
        and may be extended at runtime. For more information, see the codecs
        module.

        Parameters
        ----------
        a : array_like of str or unicode

        encoding : str, optional
           The name of an encoding

        errors : str, optional
           Specifies how to handle encoding errors

        Returns
        -------
        out : ndarray

        See Also
        --------
        str.encode

        Notes
        -----
        The type of the result will depend on the encoding specified.

    endswith(a, suffix, start=0, end=None)
        Returns a boolean array which is `True` where the string element
        in `a` ends with `suffix`, otherwise `False`.

        Calls `str.endswith` element-wise.

        Parameters
        ----------
        a : array_like of str or unicode

        suffix : str

        start, end : int, optional
            With optional `start`, test beginning at that position. With
            optional `end`, stop comparing at that position.

        Returns
        -------
        out : ndarray
            Outputs an array of bools.

        See Also
        --------
        str.endswith

        Examples
        --------
        >>> s = np.array(['foo', 'bar'])
        >>> s[0] = 'foo'
        >>> s[1] = 'bar'
        >>> s
        array(['foo', 'bar'], dtype='<U3')
        >>> np.char.endswith(s, 'ar')
        array([False,  True])
        >>> np.char.endswith(s, 'a', start=1, end=2)
        array([False,  True])

    equal(x1, x2)
        Return (x1 == x2) element-wise.

        Unlike `numpy.equal`, this comparison is performed by first
        stripping whitespace characters from the end of the string.  This
        behavior is provided for backward-compatibility with numarray.

        Parameters
        ----------
        x1, x2 : array_like of str or unicode
            Input arrays of the same shape.

        Returns
        -------
        out : ndarray
            Output array of bools.

        See Also
        --------
        not_equal, greater_equal, less_equal, greater, less

    expandtabs(a, tabsize=8)
        Return a copy of each string element where all tab characters are
        replaced by one or more spaces.

        Calls `str.expandtabs` element-wise.

        Return a copy of each string element where all tab characters are
        replaced by one or more spaces, depending on the current column
        and the given `tabsize`. The column number is reset to zero after
        each newline occurring in the string. This doesn't understand other
        non-printing characters or escape sequences.

        Parameters
        ----------
        a : array_like of str or unicode
            Input array
        tabsize : int, optional
            Replace tabs with `tabsize` number of spaces.  If not given defaults
            to 8 spaces.

        Returns
        -------
        out : ndarray
            Output array of str or unicode, depending on input type

        See Also
        --------
        str.expandtabs

    find(a, sub, start=0, end=None)
        For each element, return the lowest index in the string where
        substring `sub` is found.

        Calls `str.find` element-wise.

        For each element, return the lowest index in the string where
        substring `sub` is found, such that `sub` is contained in the
        range [`start`, `end`].

        Parameters
        ----------
        a : array_like of str or unicode

        sub : str or unicode

        start, end : int, optional
            Optional arguments `start` and `end` are interpreted as in
            slice notation.

        Returns
        -------
        out : ndarray or int
            Output array of ints.  Returns -1 if `sub` is not found.

        See Also
        --------
        str.find

        Examples
        --------
        >>> a = np.array(["NumPy is a Python library"])
        >>> np.char.find(a, "Python", start=0, end=None)
        array([11])

    greater(x1, x2)
        Return (x1 > x2) element-wise.

        Unlike `numpy.greater`, this comparison is performed by first
        stripping whitespace characters from the end of the string.  This
        behavior is provided for backward-compatibility with numarray.

        Parameters
        ----------
        x1, x2 : array_like of str or unicode
            Input arrays of the same shape.

        Returns
        -------
        out : ndarray
            Output array of bools.

        See Also
        --------
        equal, not_equal, greater_equal, less_equal, less

    greater_equal(x1, x2)
        Return (x1 >= x2) element-wise.

        Unlike `numpy.greater_equal`, this comparison is performed by
        first stripping whitespace characters from the end of the string.
        This behavior is provided for backward-compatibility with
        numarray.

        Parameters
        ----------
        x1, x2 : array_like of str or unicode
            Input arrays of the same shape.

        Returns
        -------
        out : ndarray
            Output array of bools.

        See Also
        --------
        equal, not_equal, less_equal, greater, less

    index(a, sub, start=0, end=None)
        Like `find`, but raises `ValueError` when the substring is not found.

        Calls `str.index` element-wise.

        Parameters
        ----------
        a : array_like of str or unicode

        sub : str or unicode

        start, end : int, optional

        Returns
        -------
        out : ndarray
            Output array of ints.  Returns -1 if `sub` is not found.

        See Also
        --------
        find, str.find

        Examples
        --------
        >>> a = np.array(["Computer Science"])
        >>> np.char.index(a, "Science", start=0, end=None)
        array([9])

    isalnum(a)
        Returns true for each element if all characters in the string are
        alphanumeric and there is at least one character, false otherwise.

        Calls `str.isalnum` element-wise.

        For 8-bit strings, this method is locale-dependent.

        Parameters
        ----------
        a : array_like of str or unicode

        Returns
        -------
        out : ndarray
            Output array of str or unicode, depending on input type

        See Also
        --------
        str.isalnum

    isalpha(a)
        Returns true for each element if all characters in the string are
        alphabetic and there is at least one character, false otherwise.

        Calls `str.isalpha` element-wise.

        For 8-bit strings, this method is locale-dependent.

        Parameters
        ----------
        a : array_like of str or unicode

        Returns
        -------
        out : ndarray
            Output array of bools

        See Also
        --------
        str.isalpha

    isdecimal(a)
        For each element, return True if there are only decimal
        characters in the element.

        Calls `str.isdecimal` element-wise.

        Decimal characters include digit characters, and all characters
        that can be used to form decimal-radix numbers,
        e.g. ``U+0660, ARABIC-INDIC DIGIT ZERO``.

        Parameters
        ----------
        a : array_like, unicode
            Input array.

        Returns
        -------
        out : ndarray, bool
            Array of booleans identical in shape to `a`.

        See Also
        --------
        str.isdecimal

        Examples
        --------
        >>> np.char.isdecimal(['12345', '4.99', '123ABC', ''])
        array([ True, False, False, False])

    isdigit(a)
        Returns true for each element if all characters in the string are
        digits and there is at least one character, false otherwise.

        Calls `str.isdigit` element-wise.

        For 8-bit strings, this method is locale-dependent.

        Parameters
        ----------
        a : array_like of str or unicode

        Returns
        -------
        out : ndarray
            Output array of bools

        See Also
        --------
        str.isdigit

        Examples
        --------
        >>> a = np.array(['a', 'b', '0'])
        >>> np.char.isdigit(a)
        array([False, False,  True])
        >>> a = np.array([['a', 'b', '0'], ['c', '1', '2']])
        >>> np.char.isdigit(a)
        array([[False, False,  True], [False,  True,  True]])

    islower(a)
        Returns true for each element if all cased characters in the
        string are lowercase and there is at least one cased character,
        false otherwise.

        Calls `str.islower` element-wise.

        For 8-bit strings, this method is locale-dependent.

        Parameters
        ----------
        a : array_like of str or unicode

        Returns
        -------
        out : ndarray
            Output array of bools

        See Also
        --------
        str.islower

    isnumeric(a)
        For each element, return True if there are only numeric
        characters in the element.

        Calls `str.isnumeric` element-wise.

        Numeric characters include digit characters, and all characters
        that have the Unicode numeric value property, e.g. ``U+2155,
        VULGAR FRACTION ONE FIFTH``.

        Parameters
        ----------
        a : array_like, unicode
            Input array.

        Returns
        -------
        out : ndarray, bool
            Array of booleans of same shape as `a`.

        See Also
        --------
        str.isnumeric

        Examples
        --------
        >>> np.char.isnumeric(['123', '123abc', '9.0', '1/4', 'VIII'])
        array([ True, False, False, False, False])

    isspace(a)
        Returns true for each element if there are only whitespace
        characters in the string and there is at least one character,
        false otherwise.

        Calls `str.isspace` element-wise.

        For 8-bit strings, this method is locale-dependent.

        Parameters
        ----------
        a : array_like of str or unicode

        Returns
        -------
        out : ndarray
            Output array of bools

        See Also
        --------
        str.isspace

    istitle(a)
        Returns true for each element if the element is a titlecased
        string and there is at least one character, false otherwise.

        Call `str.istitle` element-wise.

        For 8-bit strings, this method is locale-dependent.

        Parameters
        ----------
        a : array_like of str or unicode

        Returns
        -------
        out : ndarray
            Output array of bools

        See Also
        --------
        str.istitle

    isupper(a)
        Return true for each element if all cased characters in the
        string are uppercase and there is at least one character, false
        otherwise.

        Call `str.isupper` element-wise.

        For 8-bit strings, this method is locale-dependent.

        Parameters
        ----------
        a : array_like of str or unicode

        Returns
        -------
        out : ndarray
            Output array of bools

        See Also
        --------
        str.isupper

        Examples
        --------
        >>> str = "GHC"
        >>> np.char.isupper(str)
        array(True)
        >>> a = np.array(["hello", "HELLO", "Hello"])
        >>> np.char.isupper(a)
        array([False,  True, False])

    join(sep, seq)
        Return a string which is the concatenation of the strings in the
        sequence `seq`.

        Calls `str.join` element-wise.

        Parameters
        ----------
        sep : array_like of str or unicode
        seq : array_like of str or unicode

        Returns
        -------
        out : ndarray
            Output array of str or unicode, depending on input types

        See Also
        --------
        str.join

        Examples
        --------
        >>> np.char.join('-', 'osd')
        array('o-s-d', dtype='<U5')

        >>> np.char.join(['-', '.'], ['ghc', 'osd'])
        array(['g-h-c', 'o.s.d'], dtype='<U5')

    less(x1, x2)
        Return (x1 < x2) element-wise.

        Unlike `numpy.greater`, this comparison is performed by first
        stripping whitespace characters from the end of the string.  This
        behavior is provided for backward-compatibility with numarray.

        Parameters
        ----------
        x1, x2 : array_like of str or unicode
            Input arrays of the same shape.

        Returns
        -------
        out : ndarray
            Output array of bools.

        See Also
        --------
        equal, not_equal, greater_equal, less_equal, greater

    less_equal(x1, x2)
        Return (x1 <= x2) element-wise.

        Unlike `numpy.less_equal`, this comparison is performed by first
        stripping whitespace characters from the end of the string.  This
        behavior is provided for backward-compatibility with numarray.

        Parameters
        ----------
        x1, x2 : array_like of str or unicode
            Input arrays of the same shape.

        Returns
        -------
        out : ndarray
            Output array of bools.

        See Also
        --------
        equal, not_equal, greater_equal, greater, less

    ljust(a, width, fillchar=' ')
        Return an array with the elements of `a` left-justified in a
        string of length `width`.

        Calls `str.ljust` element-wise.

        Parameters
        ----------
        a : array_like of str or unicode

        width : int
            The length of the resulting strings
        fillchar : str or unicode, optional
            The character to use for padding

        Returns
        -------
        out : ndarray
            Output array of str or unicode, depending on input type

        See Also
        --------
        str.ljust

    lower(a)
        Return an array with the elements converted to lowercase.

        Call `str.lower` element-wise.

        For 8-bit strings, this method is locale-dependent.

        Parameters
        ----------
        a : array_like, {str, unicode}
            Input array.

        Returns
        -------
        out : ndarray, {str, unicode}
            Output array of str or unicode, depending on input type

        See Also
        --------
        str.lower

        Examples
        --------
        >>> c = np.array(['A1B C', '1BCA', 'BCA1']); c
        array(['A1B C', '1BCA', 'BCA1'], dtype='<U5')
        >>> np.char.lower(c)
        array(['a1b c', '1bca', 'bca1'], dtype='<U5')

    lstrip(a, chars=None)
        For each element in `a`, return a copy with the leading characters
        removed.

        Calls `str.lstrip` element-wise.

        Parameters
        ----------
        a : array-like, {str, unicode}
            Input array.

        chars : {str, unicode}, optional
            The `chars` argument is a string specifying the set of
            characters to be removed. If omitted or None, the `chars`
            argument defaults to removing whitespace. The `chars` argument
            is not a prefix; rather, all combinations of its values are
            stripped.

        Returns
        -------
        out : ndarray, {str, unicode}
            Output array of str or unicode, depending on input type

        See Also
        --------
        str.lstrip

        Examples
        --------
        >>> c = np.array(['aAaAaA', '  aA  ', 'abBABba'])
        >>> c
        array(['aAaAaA', '  aA  ', 'abBABba'], dtype='<U7')

        The 'a' variable is unstripped from c[1] because whitespace leading.

        >>> np.char.lstrip(c, 'a')
        array(['AaAaA', '  aA  ', 'bBABba'], dtype='<U7')


        >>> np.char.lstrip(c, 'A') # leaves c unchanged
        array(['aAaAaA', '  aA  ', 'abBABba'], dtype='<U7')
        >>> (np.char.lstrip(c, ' ') == np.char.lstrip(c, '')).all()
        ... # XXX: is this a regression? This used to return True
        ... # np.char.lstrip(c,'') does not modify c at all.
        False
        >>> (np.char.lstrip(c, ' ') == np.char.lstrip(c, None)).all()
        True

    mod(a, values)
        Return (a % i), that is pre-Python 2.6 string formatting
        (interpolation), element-wise for a pair of array_likes of str
        or unicode.

        Parameters
        ----------
        a : array_like of str or unicode

        values : array_like of values
           These values will be element-wise interpolated into the string.

        Returns
        -------
        out : ndarray
            Output array of str or unicode, depending on input types

        See Also
        --------
        str.__mod__

    multiply(a, i)
        Return (a * i), that is string multiple concatenation,
        element-wise.

        Values in `i` of less than 0 are treated as 0 (which yields an
        empty string).

        Parameters
        ----------
        a : array_like of str or unicode

        i : array_like of ints

        Returns
        -------
        out : ndarray
            Output array of str or unicode, depending on input types

        Examples
        --------
        >>> a = np.array(["a", "b", "c"])
        >>> np.char.multiply(x, 3)
        array(['aaa', 'bbb', 'ccc'], dtype='<U3')
        >>> i = np.array([1, 2, 3])
        >>> np.char.multiply(a, i)
        array(['a', 'bb', 'ccc'], dtype='<U3')
        >>> np.char.multiply(np.array(['a']), i)
        array(['a', 'aa', 'aaa'], dtype='<U3')
        >>> a = np.array(['a', 'b', 'c', 'd', 'e', 'f']).reshape((2, 3))
        >>> np.char.multiply(a, 3)
        array([['aaa', 'bbb', 'ccc'],
               ['ddd', 'eee', 'fff']], dtype='<U3')
        >>> np.char.multiply(a, i)
        array([['a', 'bb', 'ccc'],
               ['d', 'ee', 'fff']], dtype='<U3')

    not_equal(x1, x2)
        Return (x1 != x2) element-wise.

        Unlike `numpy.not_equal`, this comparison is performed by first
        stripping whitespace characters from the end of the string.  This
        behavior is provided for backward-compatibility with numarray.

        Parameters
        ----------
        x1, x2 : array_like of str or unicode
            Input arrays of the same shape.

        Returns
        -------
        out : ndarray
            Output array of bools.

        See Also
        --------
        equal, greater_equal, less_equal, greater, less

    partition(a, sep)
        Partition each element in `a` around `sep`.

        Calls `str.partition` element-wise.

        For each element in `a`, split the element as the first
        occurrence of `sep`, and return 3 strings containing the part
        before the separator, the separator itself, and the part after
        the separator. If the separator is not found, return 3 strings
        containing the string itself, followed by two empty strings.

        Parameters
        ----------
        a : array_like, {str, unicode}
            Input array
        sep : {str, unicode}
            Separator to split each string element in `a`.

        Returns
        -------
        out : ndarray, {str, unicode}
            Output array of str or unicode, depending on input type.
            The output array will have an extra dimension with 3
            elements per input element.

        See Also
        --------
        str.partition

    replace(a, old, new, count=None)
        For each element in `a`, return a copy of the string with all
        occurrences of substring `old` replaced by `new`.

        Calls `str.replace` element-wise.

        Parameters
        ----------
        a : array-like of str or unicode

        old, new : str or unicode

        count : int, optional
            If the optional argument `count` is given, only the first
            `count` occurrences are replaced.

        Returns
        -------
        out : ndarray
            Output array of str or unicode, depending on input type

        See Also
        --------
        str.replace

        Examples
        --------
        >>> a = np.array(["That is a mango", "Monkeys eat mangos"])
        >>> np.char.replace(a, 'mango', 'banana')
        array(['That is a banana', 'Monkeys eat bananas'], dtype='<U19')

        >>> a = np.array(["The dish is fresh", "This is it"])
        >>> np.char.replace(a, 'is', 'was')
        array(['The dwash was fresh', 'Thwas was it'], dtype='<U19')

    rfind(a, sub, start=0, end=None)
        For each element in `a`, return the highest index in the string
        where substring `sub` is found, such that `sub` is contained
        within [`start`, `end`].

        Calls `str.rfind` element-wise.

        Parameters
        ----------
        a : array-like of str or unicode

        sub : str or unicode

        start, end : int, optional
            Optional arguments `start` and `end` are interpreted as in
            slice notation.

        Returns
        -------
        out : ndarray
           Output array of ints.  Return -1 on failure.

        See Also
        --------
        str.rfind

    rindex(a, sub, start=0, end=None)
        Like `rfind`, but raises `ValueError` when the substring `sub` is
        not found.

        Calls `str.rindex` element-wise.

        Parameters
        ----------
        a : array-like of str or unicode

        sub : str or unicode

        start, end : int, optional

        Returns
        -------
        out : ndarray
           Output array of ints.

        See Also
        --------
        rfind, str.rindex

    rjust(a, width, fillchar=' ')
        Return an array with the elements of `a` right-justified in a
        string of length `width`.

        Calls `str.rjust` element-wise.

        Parameters
        ----------
        a : array_like of str or unicode

        width : int
            The length of the resulting strings
        fillchar : str or unicode, optional
            The character to use for padding

        Returns
        -------
        out : ndarray
            Output array of str or unicode, depending on input type

        See Also
        --------
        str.rjust

    rpartition(a, sep)
        Partition (split) each element around the right-most separator.

        Calls `str.rpartition` element-wise.

        For each element in `a`, split the element as the last
        occurrence of `sep`, and return 3 strings containing the part
        before the separator, the separator itself, and the part after
        the separator. If the separator is not found, return 3 strings
        containing the string itself, followed by two empty strings.

        Parameters
        ----------
        a : array_like of str or unicode
            Input array
        sep : str or unicode
            Right-most separator to split each element in array.

        Returns
        -------
        out : ndarray
            Output array of string or unicode, depending on input
            type.  The output array will have an extra dimension with
            3 elements per input element.

        See Also
        --------
        str.rpartition

    rsplit(a, sep=None, maxsplit=None)
        For each element in `a`, return a list of the words in the
        string, using `sep` as the delimiter string.

        Calls `str.rsplit` element-wise.

        Except for splitting from the right, `rsplit`
        behaves like `split`.

        Parameters
        ----------
        a : array_like of str or unicode

        sep : str or unicode, optional
            If `sep` is not specified or None, any whitespace string
            is a separator.
        maxsplit : int, optional
            If `maxsplit` is given, at most `maxsplit` splits are done,
            the rightmost ones.

        Returns
        -------
        out : ndarray
           Array of list objects

        See Also
        --------
        str.rsplit, split

    rstrip(a, chars=None)
        For each element in `a`, return a copy with the trailing
        characters removed.

        Calls `str.rstrip` element-wise.

        Parameters
        ----------
        a : array-like of str or unicode

        chars : str or unicode, optional
           The `chars` argument is a string specifying the set of
           characters to be removed. If omitted or None, the `chars`
           argument defaults to removing whitespace. The `chars` argument
           is not a suffix; rather, all combinations of its values are
           stripped.

        Returns
        -------
        out : ndarray
            Output array of str or unicode, depending on input type

        See Also
        --------
        str.rstrip

        Examples
        --------
        >>> c = np.array(['aAaAaA', 'abBABba'], dtype='S7'); c
        array(['aAaAaA', 'abBABba'],
            dtype='|S7')
        >>> np.char.rstrip(c, b'a')
        array(['aAaAaA', 'abBABb'],
            dtype='|S7')
        >>> np.char.rstrip(c, b'A')
        array(['aAaAa', 'abBABba'],
            dtype='|S7')

    split(a, sep=None, maxsplit=None)
        For each element in `a`, return a list of the words in the
        string, using `sep` as the delimiter string.

        Calls `str.split` element-wise.

        Parameters
        ----------
        a : array_like of str or unicode

        sep : str or unicode, optional
           If `sep` is not specified or None, any whitespace string is a
           separator.

        maxsplit : int, optional
            If `maxsplit` is given, at most `maxsplit` splits are done.

        Returns
        -------
        out : ndarray
            Array of list objects

        See Also
        --------
        str.split, rsplit

    splitlines(a, keepends=None)
        For each element in `a`, return a list of the lines in the
        element, breaking at line boundaries.

        Calls `str.splitlines` element-wise.

        Parameters
        ----------
        a : array_like of str or unicode

        keepends : bool, optional
            Line breaks are not included in the resulting list unless
            keepends is given and true.

        Returns
        -------
        out : ndarray
            Array of list objects

        See Also
        --------
        str.splitlines

    startswith(a, prefix, start=0, end=None)
        Returns a boolean array which is `True` where the string element
        in `a` starts with `prefix`, otherwise `False`.

        Calls `str.startswith` element-wise.

        Parameters
        ----------
        a : array_like of str or unicode

        prefix : str

        start, end : int, optional
            With optional `start`, test beginning at that position. With
            optional `end`, stop comparing at that position.

        Returns
        -------
        out : ndarray
            Array of booleans

        See Also
        --------
        str.startswith

    str_len(a)
        Return len(a) element-wise.

        Parameters
        ----------
        a : array_like of str or unicode

        Returns
        -------
        out : ndarray
            Output array of integers

        See Also
        --------
        len

        Examples
        --------
        >>> a = np.array(['Grace Hopper Conference', 'Open Source Day'])
        >>> np.char.str_len(a)
        array([23, 15])
        >>> a = np.array([u'Р', u'о'])
        >>> np.char.str_len(a)
        array([1, 1])
        >>> a = np.array([['hello', 'world'], [u'Р', u'о']])
        >>> np.char.str_len(a)
        array([[5, 5], [1, 1]])

    strip(a, chars=None)
        For each element in `a`, return a copy with the leading and
        trailing characters removed.

        Calls `str.strip` element-wise.

        Parameters
        ----------
        a : array-like of str or unicode

        chars : str or unicode, optional
           The `chars` argument is a string specifying the set of
           characters to be removed. If omitted or None, the `chars`
           argument defaults to removing whitespace. The `chars` argument
           is not a prefix or suffix; rather, all combinations of its
           values are stripped.

        Returns
        -------
        out : ndarray
            Output array of str or unicode, depending on input type

        See Also
        --------
        str.strip

        Examples
        --------
        >>> c = np.array(['aAaAaA', '  aA  ', 'abBABba'])
        >>> c
        array(['aAaAaA', '  aA  ', 'abBABba'], dtype='<U7')
        >>> np.char.strip(c)
        array(['aAaAaA', 'aA', 'abBABba'], dtype='<U7')
        >>> np.char.strip(c, 'a') # 'a' unstripped from c[1] because whitespace leads
        array(['AaAaA', '  aA  ', 'bBABb'], dtype='<U7')
        >>> np.char.strip(c, 'A') # 'A' unstripped from c[1] because (unprinted) ws trails
        array(['aAaAa', '  aA  ', 'abBABba'], dtype='<U7')

    swapcase(a)
        Return element-wise a copy of the string with
        uppercase characters converted to lowercase and vice versa.

        Calls `str.swapcase` element-wise.

        For 8-bit strings, this method is locale-dependent.

        Parameters
        ----------
        a : array_like, {str, unicode}
            Input array.

        Returns
        -------
        out : ndarray, {str, unicode}
            Output array of str or unicode, depending on input type

        See Also
        --------
        str.swapcase

        Examples
        --------
        >>> c=np.array(['a1B c','1b Ca','b Ca1','cA1b'],'S5'); c
        array(['a1B c', '1b Ca', 'b Ca1', 'cA1b'],
            dtype='|S5')
        >>> np.char.swapcase(c)
        array(['A1b C', '1B cA', 'B cA1', 'Ca1B'],
            dtype='|S5')

    title(a)
        Return element-wise title cased version of string or unicode.

        Title case words start with uppercase characters, all remaining cased
        characters are lowercase.

        Calls `str.title` element-wise.

        For 8-bit strings, this method is locale-dependent.

        Parameters
        ----------
        a : array_like, {str, unicode}
            Input array.

        Returns
        -------
        out : ndarray
            Output array of str or unicode, depending on input type

        See Also
        --------
        str.title

        Examples
        --------
        >>> c=np.array(['a1b c','1b ca','b ca1','ca1b'],'S5'); c
        array(['a1b c', '1b ca', 'b ca1', 'ca1b'],
            dtype='|S5')
        >>> np.char.title(c)
        array(['A1B C', '1B Ca', 'B Ca1', 'Ca1B'],
            dtype='|S5')

    translate(a, table, deletechars=None)
        For each element in `a`, return a copy of the string where all
        characters occurring in the optional argument `deletechars` are
        removed, and the remaining characters have been mapped through the
        given translation table.

        Calls `str.translate` element-wise.

        Parameters
        ----------
        a : array-like of str or unicode

        table : str of length 256

        deletechars : str

        Returns
        -------
        out : ndarray
            Output array of str or unicode, depending on input type

        See Also
        --------
        str.translate

    upper(a)
        Return an array with the elements converted to uppercase.

        Calls `str.upper` element-wise.

        For 8-bit strings, this method is locale-dependent.

        Parameters
        ----------
        a : array_like, {str, unicode}
            Input array.

        Returns
        -------
        out : ndarray, {str, unicode}
            Output array of str or unicode, depending on input type

        See Also
        --------
        str.upper

        Examples
        --------
        >>> c = np.array(['a1b c', '1bca', 'bca1']); c
        array(['a1b c', '1bca', 'bca1'], dtype='<U5')
        >>> np.char.upper(c)
        array(['A1B C', '1BCA', 'BCA1'], dtype='<U5')

    zfill(a, width)
        Return the numeric string left-filled with zeros

        Calls `str.zfill` element-wise.

        Parameters
        ----------
        a : array_like, {str, unicode}
            Input array.
        width : int
            Width of string to left-fill elements in `a`.

        Returns
        -------
        out : ndarray, {str, unicode}
            Output array of str or unicode, depending on input type

        See Also
        --------
        str.zfill

DATA
    __all__ = ['equal', 'not_equal', 'greater_equal', 'less_equal', 'great...

FILE
    /home/santosg/miniconda3/lib/python3.12/site-packages/numpy/core/defchararray.py


None
Help on _ArrayFunctionDispatcher in module numpy:

choose(a, choices, out=None, mode='raise')
    Construct an array from an index array and a list of arrays to choose from.

    First of all, if confused or uncertain, definitely look at the Examples -
    in its full generality, this function is less simple than it might
    seem from the following code description (below ndi =
    `numpy.lib.index_tricks`):

    ``np.choose(a,c) == np.array([c[a[I]][I] for I in ndi.ndindex(a.shape)])``.

    But this omits some subtleties.  Here is a fully general summary:

    Given an "index" array (`a`) of integers and a sequence of ``n`` arrays
    (`choices`), `a` and each choice array are first broadcast, as necessary,
    to arrays of a common shape; calling these *Ba* and *Bchoices[i], i =
    0,...,n-1* we have that, necessarily, ``Ba.shape == Bchoices[i].shape``
    for each ``i``.  Then, a new array with shape ``Ba.shape`` is created as
    follows:

    * if ``mode='raise'`` (the default), then, first of all, each element of
      ``a`` (and thus ``Ba``) must be in the range ``[0, n-1]``; now, suppose
      that ``i`` (in that range) is the value at the ``(j0, j1, ..., jm)``
      position in ``Ba`` - then the value at the same position in the new array
      is the value in ``Bchoices[i]`` at that same position;

    * if ``mode='wrap'``, values in `a` (and thus `Ba`) may be any (signed)
      integer; modular arithmetic is used to map integers outside the range
      `[0, n-1]` back into that range; and then the new array is constructed
      as above;

    * if ``mode='clip'``, values in `a` (and thus ``Ba``) may be any (signed)
      integer; negative integers are mapped to 0; values greater than ``n-1``
      are mapped to ``n-1``; and then the new array is constructed as above.

    Parameters
    ----------
    a : int array
        This array must contain integers in ``[0, n-1]``, where ``n`` is the
        number of choices, unless ``mode=wrap`` or ``mode=clip``, in which
        cases any integers are permissible.
    choices : sequence of arrays
        Choice arrays. `a` and all of the choices must be broadcastable to the
        same shape.  If `choices` is itself an array (not recommended), then
        its outermost dimension (i.e., the one corresponding to
        ``choices.shape[0]``) is taken as defining the "sequence".
    out : array, optional
        If provided, the result will be inserted into this array. It should
        be of the appropriate shape and dtype. Note that `out` is always
        buffered if ``mode='raise'``; use other modes for better performance.
    mode : {'raise' (default), 'wrap', 'clip'}, optional
        Specifies how indices outside ``[0, n-1]`` will be treated:

          * 'raise' : an exception is raised
          * 'wrap' : value becomes value mod ``n``
          * 'clip' : values < 0 are mapped to 0, values > n-1 are mapped to n-1

    Returns
    -------
    merged_array : array
        The merged result.

    Raises
    ------
    ValueError: shape mismatch
        If `a` and each choice array are not all broadcastable to the same
        shape.

    See Also
    --------
    ndarray.choose : equivalent method
    numpy.take_along_axis : Preferable if `choices` is an array

    Notes
    -----
    To reduce the chance of misinterpretation, even though the following
    "abuse" is nominally supported, `choices` should neither be, nor be
    thought of as, a single array, i.e., the outermost sequence-like container
    should be either a list or a tuple.

    Examples
    --------

    >>> choices = [[0, 1, 2, 3], [10, 11, 12, 13],
    ...   [20, 21, 22, 23], [30, 31, 32, 33]]
    >>> np.choose([2, 3, 1, 0], choices
    ... # the first element of the result will be the first element of the
    ... # third (2+1) "array" in choices, namely, 20; the second element
    ... # will be the second element of the fourth (3+1) choice array, i.e.,
    ... # 31, etc.
    ... )
    array([20, 31, 12,  3])
    >>> np.choose([2, 4, 1, 0], choices, mode='clip') # 4 goes to 3 (4-1)
    array([20, 31, 12,  3])
    >>> # because there are 4 choice arrays
    >>> np.choose([2, 4, 1, 0], choices, mode='wrap') # 4 goes to (4 mod 4)
    array([20,  1, 12,  3])
    >>> # i.e., 0

    A couple examples illustrating how choose broadcasts:

    >>> a = [[1, 0, 1], [0, 1, 0], [1, 0, 1]]
    >>> choices = [-10, 10]
    >>> np.choose(a, choices)
    array([[ 10, -10,  10],
           [-10,  10, -10],
           [ 10, -10,  10]])

    >>> # With thanks to Anne Archibald
    >>> a = np.array([0, 1]).reshape((2,1,1))
    >>> c1 = np.array([1, 2, 3]).reshape((1,3,1))
    >>> c2 = np.array([-1, -2, -3, -4, -5]).reshape((1,1,5))
    >>> np.choose(a, (c1, c2)) # result is 2x3x5, res[0,:,:]=c1, res[1,:,:]=c2
    array([[[ 1,  1,  1,  1,  1],
            [ 2,  2,  2,  2,  2],
            [ 3,  3,  3,  3,  3]],
           [[-1, -2, -3, -4, -5],
            [-1, -2, -3, -4, -5],
            [-1, -2, -3, -4, -5]]])

None
Help on _ArrayFunctionDispatcher in module numpy:

concatenate(...)
    concatenate((a1, a2, ...), axis=0, out=None, dtype=None, casting="same_kind")

    Join a sequence of arrays along an existing axis.

    Parameters
    ----------
    a1, a2, ... : sequence of array_like
        The arrays must have the same shape, except in the dimension
        corresponding to `axis` (the first, by default).
    axis : int, optional
        The axis along which the arrays will be joined.  If axis is None,
        arrays are flattened before use.  Default is 0.
    out : ndarray, optional
        If provided, the destination to place the result. The shape must be
        correct, matching that of what concatenate would have returned if no
        out argument were specified.
    dtype : str or dtype
        If provided, the destination array will have this dtype. Cannot be
        provided together with `out`.

        .. versionadded:: 1.20.0

    casting : {'no', 'equiv', 'safe', 'same_kind', 'unsafe'}, optional
        Controls what kind of data casting may occur. Defaults to 'same_kind'.

        .. versionadded:: 1.20.0

    Returns
    -------
    res : ndarray
        The concatenated array.

    See Also
    --------
    ma.concatenate : Concatenate function that preserves input masks.
    array_split : Split an array into multiple sub-arrays of equal or
                  near-equal size.
    split : Split array into a list of multiple sub-arrays of equal size.
    hsplit : Split array into multiple sub-arrays horizontally (column wise).
    vsplit : Split array into multiple sub-arrays vertically (row wise).
    dsplit : Split array into multiple sub-arrays along the 3rd axis (depth).
    stack : Stack a sequence of arrays along a new axis.
    block : Assemble arrays from blocks.
    hstack : Stack arrays in sequence horizontally (column wise).
    vstack : Stack arrays in sequence vertically (row wise).
    dstack : Stack arrays in sequence depth wise (along third dimension).
    column_stack : Stack 1-D arrays as columns into a 2-D array.

    Notes
    -----
    When one or more of the arrays to be concatenated is a MaskedArray,
    this function will return a MaskedArray object instead of an ndarray,
    but the input masks are *not* preserved. In cases where a MaskedArray
    is expected as input, use the ma.concatenate function from the masked
    array module instead.

    Examples
    --------
    >>> a = np.array([[1, 2], [3, 4]])
    >>> b = np.array([[5, 6]])
    >>> np.concatenate((a, b), axis=0)
    array([[1, 2],
           [3, 4],
           [5, 6]])
    >>> np.concatenate((a, b.T), axis=1)
    array([[1, 2, 5],
           [3, 4, 6]])
    >>> np.concatenate((a, b), axis=None)
    array([1, 2, 3, 4, 5, 6])

    This function will not preserve masking of MaskedArray inputs.

    >>> a = np.ma.arange(3)
    >>> a[1] = np.ma.masked
    >>> b = np.arange(2, 5)
    >>> a
    masked_array(data=[0, --, 2],
                 mask=[False,  True, False],
           fill_value=999999)
    >>> b
    array([2, 3, 4])
    >>> np.concatenate([a, b])
    masked_array(data=[0, 1, 2, 2, 3, 4],
                 mask=False,
           fill_value=999999)
    >>> np.ma.concatenate([a, b])
    masked_array(data=[0, --, 2, 2, 3, 4],
                 mask=[False,  True, False, False, False, False],
           fill_value=999999)

None
Help on _ArrayFunctionDispatcher in module numpy:

copy(a, order='K', subok=False)
    Return an array copy of the given object.

    Parameters
    ----------
    a : array_like
        Input data.
    order : {'C', 'F', 'A', 'K'}, optional
        Controls the memory layout of the copy. 'C' means C-order,
        'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,
        'C' otherwise. 'K' means match the layout of `a` as closely
        as possible. (Note that this function and :meth:`ndarray.copy` are very
        similar, but have different default values for their order=
        arguments.)
    subok : bool, optional
        If True, then sub-classes will be passed-through, otherwise the
        returned array will be forced to be a base-class array (defaults to False).

        .. versionadded:: 1.19.0

    Returns
    -------
    arr : ndarray
        Array interpretation of `a`.

    See Also
    --------
    ndarray.copy : Preferred method for creating an array copy

    Notes
    -----
    This is equivalent to:

    >>> np.array(a, copy=True)  #doctest: +SKIP

    Examples
    --------
    Create an array x, with a reference y and a copy z:

    >>> x = np.array([1, 2, 3])
    >>> y = x
    >>> z = np.copy(x)

    Note that, when we modify x, y changes, but not z:

    >>> x[0] = 10
    >>> x[0] == y[0]
    True
    >>> x[0] == z[0]
    False

    Note that, np.copy clears previously set WRITEABLE=False flag.

    >>> a = np.array([1, 2, 3])
    >>> a.flags["WRITEABLE"] = False
    >>> b = np.copy(a)
    >>> b.flags["WRITEABLE"]
    True
    >>> b[0] = 3
    >>> b
    array([3, 2, 3])

    Note that np.copy is a shallow copy and will not copy object
    elements within arrays. This is mainly important for arrays
    containing Python objects. The new array will contain the
    same object which may lead to surprises if that object can
    be modified (is mutable):

    >>> a = np.array([1, 'm', [2, 3, 4]], dtype=object)
    >>> b = np.copy(a)
    >>> b[2][0] = 10
    >>> a
    array([1, 'm', list([10, 3, 4])], dtype=object)

    To ensure all elements within an ``object`` array are copied,
    use `copy.deepcopy`:

    >>> import copy
    >>> a = np.array([1, 'm', [2, 3, 4]], dtype=object)
    >>> c = copy.deepcopy(a)
    >>> c[2][0] = 10
    >>> c
    array([1, 'm', list([10, 3, 4])], dtype=object)
    >>> a
    array([1, 'm', list([2, 3, 4])], dtype=object)

None
Help on _ArrayFunctionDispatcher in module numpy:

corrcoef(x, y=None, rowvar=True, bias=<no value>, ddof=<no value>, *, dtype=None)
    Return Pearson product-moment correlation coefficients.

    Please refer to the documentation for `cov` for more detail.  The
    relationship between the correlation coefficient matrix, `R`, and the
    covariance matrix, `C`, is

    .. math:: R_{ij} = \frac{ C_{ij} } { \sqrt{ C_{ii} C_{jj} } }

    The values of `R` are between -1 and 1, inclusive.

    Parameters
    ----------
    x : array_like
        A 1-D or 2-D array containing multiple variables and observations.
        Each row of `x` represents a variable, and each column a single
        observation of all those variables. Also see `rowvar` below.
    y : array_like, optional
        An additional set of variables and observations. `y` has the same
        shape as `x`.
    rowvar : bool, optional
        If `rowvar` is True (default), then each row represents a
        variable, with observations in the columns. Otherwise, the relationship
        is transposed: each column represents a variable, while the rows
        contain observations.
    bias : _NoValue, optional
        Has no effect, do not use.

        .. deprecated:: 1.10.0
    ddof : _NoValue, optional
        Has no effect, do not use.

        .. deprecated:: 1.10.0
    dtype : data-type, optional
        Data-type of the result. By default, the return data-type will have
        at least `numpy.float64` precision.

        .. versionadded:: 1.20

    Returns
    -------
    R : ndarray
        The correlation coefficient matrix of the variables.

    See Also
    --------
    cov : Covariance matrix

    Notes
    -----
    Due to floating point rounding the resulting array may not be Hermitian,
    the diagonal elements may not be 1, and the elements may not satisfy the
    inequality abs(a) <= 1. The real and imaginary parts are clipped to the
    interval [-1,  1] in an attempt to improve on that situation but is not
    much help in the complex case.

    This function accepts but discards arguments `bias` and `ddof`.  This is
    for backwards compatibility with previous versions of this function.  These
    arguments had no effect on the return values of the function and can be
    safely ignored in this and previous versions of numpy.

    Examples
    --------
    In this example we generate two random arrays, ``xarr`` and ``yarr``, and
    compute the row-wise and column-wise Pearson correlation coefficients,
    ``R``. Since ``rowvar`` is  true by  default, we first find the row-wise
    Pearson correlation coefficients between the variables of ``xarr``.

    >>> import numpy as np
    >>> rng = np.random.default_rng(seed=42)
    >>> xarr = rng.random((3, 3))
    >>> xarr
    array([[0.77395605, 0.43887844, 0.85859792],
           [0.69736803, 0.09417735, 0.97562235],
           [0.7611397 , 0.78606431, 0.12811363]])
    >>> R1 = np.corrcoef(xarr)
    >>> R1
    array([[ 1.        ,  0.99256089, -0.68080986],
           [ 0.99256089,  1.        , -0.76492172],
           [-0.68080986, -0.76492172,  1.        ]])

    If we add another set of variables and observations ``yarr``, we can
    compute the row-wise Pearson correlation coefficients between the
    variables in ``xarr`` and ``yarr``.

    >>> yarr = rng.random((3, 3))
    >>> yarr
    array([[0.45038594, 0.37079802, 0.92676499],
           [0.64386512, 0.82276161, 0.4434142 ],
           [0.22723872, 0.55458479, 0.06381726]])
    >>> R2 = np.corrcoef(xarr, yarr)
    >>> R2
    array([[ 1.        ,  0.99256089, -0.68080986,  0.75008178, -0.934284  ,
            -0.99004057],
           [ 0.99256089,  1.        , -0.76492172,  0.82502011, -0.97074098,
            -0.99981569],
           [-0.68080986, -0.76492172,  1.        , -0.99507202,  0.89721355,
             0.77714685],
           [ 0.75008178,  0.82502011, -0.99507202,  1.        , -0.93657855,
            -0.83571711],
           [-0.934284  , -0.97074098,  0.89721355, -0.93657855,  1.        ,
             0.97517215],
           [-0.99004057, -0.99981569,  0.77714685, -0.83571711,  0.97517215,
             1.        ]])

    Finally if we use the option ``rowvar=False``, the columns are now
    being treated as the variables and we will find the column-wise Pearson
    correlation coefficients between variables in ``xarr`` and ``yarr``.

    >>> R3 = np.corrcoef(xarr, yarr, rowvar=False)
    >>> R3
    array([[ 1.        ,  0.77598074, -0.47458546, -0.75078643, -0.9665554 ,
             0.22423734],
           [ 0.77598074,  1.        , -0.92346708, -0.99923895, -0.58826587,
            -0.44069024],
           [-0.47458546, -0.92346708,  1.        ,  0.93773029,  0.23297648,
             0.75137473],
           [-0.75078643, -0.99923895,  0.93773029,  1.        ,  0.55627469,
             0.47536961],
           [-0.9665554 , -0.58826587,  0.23297648,  0.55627469,  1.        ,
            -0.46666491],
           [ 0.22423734, -0.44069024,  0.75137473,  0.47536961, -0.46666491,
             1.        ]])

None
Help on ufunc:

cos = <ufunc 'cos'>
    cos(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])

    Cosine element-wise.

    Parameters
    ----------
    x : array_like
        Input array in radians.
    out : ndarray, None, or tuple of ndarray and None, optional
        A location into which the result is stored. If provided, it must have
        a shape that the inputs broadcast to. If not provided or None,
        a freshly-allocated array is returned. A tuple (possible only as a
        keyword argument) must have length equal to the number of outputs.
    where : array_like, optional
        This condition is broadcast over the input. At locations where the
        condition is True, the `out` array will be set to the ufunc result.
        Elsewhere, the `out` array will retain its original value.
        Note that if an uninitialized `out` array is created via the default
        ``out=None``, locations within it where the condition is False will
        remain uninitialized.
    **kwargs
        For other keyword-only arguments, see the
        :ref:`ufunc docs <ufuncs.kwargs>`.

    Returns
    -------
    y : ndarray
        The corresponding cosine values.
        This is a scalar if `x` is a scalar.

    Notes
    -----
    If `out` is provided, the function writes the result into it,
    and returns a reference to `out`.  (See Examples)

    References
    ----------
    M. Abramowitz and I. A. Stegun, Handbook of Mathematical Functions.
    New York, NY: Dover, 1972.

    Examples
    --------
    >>> np.cos(np.array([0, np.pi/2, np.pi]))
    array([  1.00000000e+00,   6.12303177e-17,  -1.00000000e+00])
    >>>
    >>> # Example of providing the optional output parameter
    >>> out1 = np.array([0], dtype='d')
    >>> out2 = np.cos([0.1], out1)
    >>> out2 is out1
    True
    >>>
    >>> # Example of ValueError due to provision of shape mis-matched `out`
    >>> np.cos(np.zeros((3,3)),np.zeros((2,2)))
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    ValueError: operands could not be broadcast together with shapes (3,3) (2,2)

None
Help on _ArrayFunctionDispatcher in module numpy:

cumsum(a, axis=None, dtype=None, out=None)
    Return the cumulative sum of the elements along a given axis.

    Parameters
    ----------
    a : array_like
        Input array.
    axis : int, optional
        Axis along which the cumulative sum is computed. The default
        (None) is to compute the cumsum over the flattened array.
    dtype : dtype, optional
        Type of the returned array and of the accumulator in which the
        elements are summed.  If `dtype` is not specified, it defaults
        to the dtype of `a`, unless `a` has an integer dtype with a
        precision less than that of the default platform integer.  In
        that case, the default platform integer is used.
    out : ndarray, optional
        Alternative output array in which to place the result. It must
        have the same shape and buffer length as the expected output
        but the type will be cast if necessary. See :ref:`ufuncs-output-type` for
        more details.

    Returns
    -------
    cumsum_along_axis : ndarray.
        A new array holding the result is returned unless `out` is
        specified, in which case a reference to `out` is returned. The
        result has the same size as `a`, and the same shape as `a` if
        `axis` is not None or `a` is a 1-d array.

    See Also
    --------
    sum : Sum array elements.
    trapz : Integration of array values using the composite trapezoidal rule.
    diff : Calculate the n-th discrete difference along given axis.

    Notes
    -----
    Arithmetic is modular when using integer types, and no error is
    raised on overflow.

    ``cumsum(a)[-1]`` may not be equal to ``sum(a)`` for floating-point
    values since ``sum`` may use a pairwise summation routine, reducing
    the roundoff-error. See `sum` for more information.

    Examples
    --------
    >>> a = np.array([[1,2,3], [4,5,6]])
    >>> a
    array([[1, 2, 3],
           [4, 5, 6]])
    >>> np.cumsum(a)
    array([ 1,  3,  6, 10, 15, 21])
    >>> np.cumsum(a, dtype=float)     # specifies type of output value(s)
    array([  1.,   3.,   6.,  10.,  15.,  21.])

    >>> np.cumsum(a,axis=0)      # sum over rows for each of the 3 columns
    array([[1, 2, 3],
           [5, 7, 9]])
    >>> np.cumsum(a,axis=1)      # sum over columns for each of the 2 rows
    array([[ 1,  3,  6],
           [ 4,  9, 15]])

    ``cumsum(b)[-1]`` may not be equal to ``sum(b)``

    >>> b = np.array([1, 2e-9, 3e-9] * 1000000)
    >>> b.cumsum()[-1]
    1000000.0050045159
    >>> b.sum()
    1000000.0050000029

None
Help on _ArrayFunctionDispatcher in module numpy:

delete(arr, obj, axis=None)
    Return a new array with sub-arrays along an axis deleted. For a one
    dimensional array, this returns those entries not returned by
    `arr[obj]`.

    Parameters
    ----------
    arr : array_like
        Input array.
    obj : slice, int or array of ints
        Indicate indices of sub-arrays to remove along the specified axis.

        .. versionchanged:: 1.19.0
            Boolean indices are now treated as a mask of elements to remove,
            rather than being cast to the integers 0 and 1.

    axis : int, optional
        The axis along which to delete the subarray defined by `obj`.
        If `axis` is None, `obj` is applied to the flattened array.

    Returns
    -------
    out : ndarray
        A copy of `arr` with the elements specified by `obj` removed. Note
        that `delete` does not occur in-place. If `axis` is None, `out` is
        a flattened array.

    See Also
    --------
    insert : Insert elements into an array.
    append : Append elements at the end of an array.

    Notes
    -----
    Often it is preferable to use a boolean mask. For example:

    >>> arr = np.arange(12) + 1
    >>> mask = np.ones(len(arr), dtype=bool)
    >>> mask[[0,2,4]] = False
    >>> result = arr[mask,...]

    Is equivalent to ``np.delete(arr, [0,2,4], axis=0)``, but allows further
    use of `mask`.

    Examples
    --------
    >>> arr = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])
    >>> arr
    array([[ 1,  2,  3,  4],
           [ 5,  6,  7,  8],
           [ 9, 10, 11, 12]])
    >>> np.delete(arr, 1, 0)
    array([[ 1,  2,  3,  4],
           [ 9, 10, 11, 12]])

    >>> np.delete(arr, np.s_[::2], 1)
    array([[ 2,  4],
           [ 6,  8],
           [10, 12]])
    >>> np.delete(arr, [1,3,5], None)
    array([ 1,  3,  5,  7,  8,  9, 10, 11, 12])

None
Help on _ArrayFunctionDispatcher in module numpy:

diff(a, n=1, axis=-1, prepend=<no value>, append=<no value>)
    Calculate the n-th discrete difference along the given axis.

    The first difference is given by ``out[i] = a[i+1] - a[i]`` along
    the given axis, higher differences are calculated by using `diff`
    recursively.

    Parameters
    ----------
    a : array_like
        Input array
    n : int, optional
        The number of times values are differenced. If zero, the input
        is returned as-is.
    axis : int, optional
        The axis along which the difference is taken, default is the
        last axis.
    prepend, append : array_like, optional
        Values to prepend or append to `a` along axis prior to
        performing the difference.  Scalar values are expanded to
        arrays with length 1 in the direction of axis and the shape
        of the input array in along all other axes.  Otherwise the
        dimension and shape must match `a` except along axis.

        .. versionadded:: 1.16.0

    Returns
    -------
    diff : ndarray
        The n-th differences. The shape of the output is the same as `a`
        except along `axis` where the dimension is smaller by `n`. The
        type of the output is the same as the type of the difference
        between any two elements of `a`. This is the same as the type of
        `a` in most cases. A notable exception is `datetime64`, which
        results in a `timedelta64` output array.

    See Also
    --------
    gradient, ediff1d, cumsum

    Notes
    -----
    Type is preserved for boolean arrays, so the result will contain
    `False` when consecutive elements are the same and `True` when they
    differ.

    For unsigned integer arrays, the results will also be unsigned. This
    should not be surprising, as the result is consistent with
    calculating the difference directly:

    >>> u8_arr = np.array([1, 0], dtype=np.uint8)
    >>> np.diff(u8_arr)
    array([255], dtype=uint8)
    >>> u8_arr[1,...] - u8_arr[0,...]
    255

    If this is not desirable, then the array should be cast to a larger
    integer type first:

    >>> i16_arr = u8_arr.astype(np.int16)
    >>> np.diff(i16_arr)
    array([-1], dtype=int16)

    Examples
    --------
    >>> x = np.array([1, 2, 4, 7, 0])
    >>> np.diff(x)
    array([ 1,  2,  3, -7])
    >>> np.diff(x, n=2)
    array([  1,   1, -10])

    >>> x = np.array([[1, 3, 6, 10], [0, 5, 6, 8]])
    >>> np.diff(x)
    array([[2, 3, 4],
           [5, 1, 2]])
    >>> np.diff(x, axis=0)
    array([[-1,  2,  0, -2]])

    >>> x = np.arange('1066-10-13', '1066-10-16', dtype=np.datetime64)
    >>> np.diff(x)
    array([1, 1], dtype='timedelta64[D]')

None
Help on _ArrayFunctionDispatcher in module numpy:

dot(...)
    dot(a, b, out=None)

    Dot product of two arrays. Specifically,

    - If both `a` and `b` are 1-D arrays, it is inner product of vectors
      (without complex conjugation).

    - If both `a` and `b` are 2-D arrays, it is matrix multiplication,
      but using :func:`matmul` or ``a @ b`` is preferred.

    - If either `a` or `b` is 0-D (scalar), it is equivalent to
      :func:`multiply` and using ``numpy.multiply(a, b)`` or ``a * b`` is
      preferred.

    - If `a` is an N-D array and `b` is a 1-D array, it is a sum product over
      the last axis of `a` and `b`.

    - If `a` is an N-D array and `b` is an M-D array (where ``M>=2``), it is a
      sum product over the last axis of `a` and the second-to-last axis of
      `b`::

        dot(a, b)[i,j,k,m] = sum(a[i,j,:] * b[k,:,m])

    It uses an optimized BLAS library when possible (see `numpy.linalg`).

    Parameters
    ----------
    a : array_like
        First argument.
    b : array_like
        Second argument.
    out : ndarray, optional
        Output argument. This must have the exact kind that would be returned
        if it was not used. In particular, it must have the right type, must be
        C-contiguous, and its dtype must be the dtype that would be returned
        for `dot(a,b)`. This is a performance feature. Therefore, if these
        conditions are not met, an exception is raised, instead of attempting
        to be flexible.

    Returns
    -------
    output : ndarray
        Returns the dot product of `a` and `b`.  If `a` and `b` are both
        scalars or both 1-D arrays then a scalar is returned; otherwise
        an array is returned.
        If `out` is given, then it is returned.

    Raises
    ------
    ValueError
        If the last dimension of `a` is not the same size as
        the second-to-last dimension of `b`.

    See Also
    --------
    vdot : Complex-conjugating dot product.
    tensordot : Sum products over arbitrary axes.
    einsum : Einstein summation convention.
    matmul : '@' operator as method with out parameter.
    linalg.multi_dot : Chained dot product.

    Examples
    --------
    >>> np.dot(3, 4)
    12

    Neither argument is complex-conjugated:

    >>> np.dot([2j, 3j], [2j, 3j])
    (-13+0j)

    For 2-D arrays it is the matrix product:

    >>> a = [[1, 0], [0, 1]]
    >>> b = [[4, 1], [2, 2]]
    >>> np.dot(a, b)
    array([[4, 1],
           [2, 2]])

    >>> a = np.arange(3*4*5*6).reshape((3,4,5,6))
    >>> b = np.arange(3*4*5*6)[::-1].reshape((5,4,6,3))
    >>> np.dot(a, b)[2,3,2,1,2,2]
    499128
    >>> sum(a[2,3,2,:] * b[1,2,:,2])
    499128

None
Help on float object:

class float(object)
 |  float(x=0, /)
 |
 |  Convert a string or number to a floating point number, if possible.
 |
 |  Methods defined here:
 |
 |  __abs__(self, /)
 |      abs(self)
 |
 |  __add__(self, value, /)
 |      Return self+value.
 |
 |  __bool__(self, /)
 |      True if self else False
 |
 |  __ceil__(self, /)
 |      Return the ceiling as an Integral.
 |
 |  __divmod__(self, value, /)
 |      Return divmod(self, value).
 |
 |  __eq__(self, value, /)
 |      Return self==value.
 |
 |  __float__(self, /)
 |      float(self)
 |
 |  __floor__(self, /)
 |      Return the floor as an Integral.
 |
 |  __floordiv__(self, value, /)
 |      Return self//value.
 |
 |  __format__(self, format_spec, /)
 |      Formats the float according to format_spec.
 |
 |  __ge__(self, value, /)
 |      Return self>=value.
 |
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |
 |  __getnewargs__(self, /)
 |
 |  __gt__(self, value, /)
 |      Return self>value.
 |
 |  __hash__(self, /)
 |      Return hash(self).
 |
 |  __int__(self, /)
 |      int(self)
 |
 |  __le__(self, value, /)
 |      Return self<=value.
 |
 |  __lt__(self, value, /)
 |      Return self<value.
 |
 |  __mod__(self, value, /)
 |      Return self%value.
 |
 |  __mul__(self, value, /)
 |      Return self*value.
 |
 |  __ne__(self, value, /)
 |      Return self!=value.
 |
 |  __neg__(self, /)
 |      -self
 |
 |  __pos__(self, /)
 |      +self
 |
 |  __pow__(self, value, mod=None, /)
 |      Return pow(self, value, mod).
 |
 |  __radd__(self, value, /)
 |      Return value+self.
 |
 |  __rdivmod__(self, value, /)
 |      Return divmod(value, self).
 |
 |  __repr__(self, /)
 |      Return repr(self).
 |
 |  __rfloordiv__(self, value, /)
 |      Return value//self.
 |
 |  __rmod__(self, value, /)
 |      Return value%self.
 |
 |  __rmul__(self, value, /)
 |      Return value*self.
 |
 |  __round__(self, ndigits=None, /)
 |      Return the Integral closest to x, rounding half toward even.
 |
 |      When an argument is passed, work like built-in round(x, ndigits).
 |
 |  __rpow__(self, value, mod=None, /)
 |      Return pow(value, self, mod).
 |
 |  __rsub__(self, value, /)
 |      Return value-self.
 |
 |  __rtruediv__(self, value, /)
 |      Return value/self.
 |
 |  __sub__(self, value, /)
 |      Return self-value.
 |
 |  __truediv__(self, value, /)
 |      Return self/value.
 |
 |  __trunc__(self, /)
 |      Return the Integral closest to x between 0 and x.
 |
 |  as_integer_ratio(self, /)
 |      Return a pair of integers, whose ratio is exactly equal to the original float.
 |
 |      The ratio is in lowest terms and has a positive denominator.  Raise
 |      OverflowError on infinities and a ValueError on NaNs.
 |
 |      >>> (10.0).as_integer_ratio()
 |      (10, 1)
 |      >>> (0.0).as_integer_ratio()
 |      (0, 1)
 |      >>> (-.25).as_integer_ratio()
 |      (-1, 4)
 |
 |  conjugate(self, /)
 |      Return self, the complex conjugate of any float.
 |
 |  hex(self, /)
 |      Return a hexadecimal representation of a floating-point number.
 |
 |      >>> (-0.1).hex()
 |      '-0x1.999999999999ap-4'
 |      >>> 3.14159.hex()
 |      '0x1.921f9f01b866ep+1'
 |
 |  is_integer(self, /)
 |      Return True if the float is an integer.
 |
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |
 |  __getformat__(typestr, /) from builtins.type
 |      You probably don't want to use this function.
 |
 |        typestr
 |          Must be 'double' or 'float'.
 |
 |      It exists mainly to be used in Python's test suite.
 |
 |      This function returns whichever of 'unknown', 'IEEE, big-endian' or 'IEEE,
 |      little-endian' best describes the format of floating point numbers used by the
 |      C type named by typestr.
 |
 |  fromhex(string, /) from builtins.type
 |      Create a floating-point number from a hexadecimal string.
 |
 |      >>> float.fromhex('0x1.ffffp10')
 |      2047.984375
 |      >>> float.fromhex('-0x1p-1074')
 |      -5e-324
 |
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |
 |  imag
 |      the imaginary part of a complex number
 |
 |  real
 |      the real part of a complex number

None
